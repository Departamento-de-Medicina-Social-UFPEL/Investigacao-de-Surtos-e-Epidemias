async = undefined
fs = undefined
path = undefined
request = undefined
url = undefined
request = require('request')
url = require('url')
async = require('async')
fs = require('fs')
path = require('path')

module.exports = (caso, cb) ->
  bibs = undefined
  components = undefined
  deu = undefined
  mapper = undefined
  slideBib = undefined
  components = caso.components
  slideBib = components.filter((c) ->
    c.tipo == 'bibliografia'
  )[0]
  bibs = slideBib.conteudo
  console.log bibs.length, "<===== bibs !!!!!!!!!!!!!"
  mapper = (bib, nextor) ->
    b = undefined
    urlInterna = undefined
    link = undefined
    loc = undefined
    options = undefined
    # console.log bib, "<========= bib"
    # console.log bib, 'bib'
    
    urlInterna = bib.urlLocal
    # console.log bib, "<========= bib"
    if urlInterna.length > 0
      console.log 'ENTROU NO IF MAROTO DA URL INTERNA'
      return nextor( null,
        pathname: '/home/dev/static/public/bib/' + urlInterna
        filename: urlInterna
        size: '0')
    else
      if !/\.pdf/gim.test(bib.urlExterno)
        return nextor(null)
      b = bib.urlExterno
      if !/https?:\/\//gim.test(b)
        console.log 'ATENCÃO: Link ' + b + ' não possui protocolo. Tentando http://'
        b = 'http://' + b
      link = url.parse(b)
      loc = path.parse(link.pathname)
      options =
        method: 'HEAD'
        url: b
        headers: 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
        followAllRedirects: true
      request options, (err, r) ->
        headers = undefined
        mime = undefined
        size = undefined
        status = undefined
        if err
          return nextor(null)
        headers = r.headers
        mime = headers['content-type']
        size = headers['content-length']
        status = r.statusCode
        msgerro = caso.titulo + ' ' + caso._id
        if status == 200 and (mime == 'application/pdf' or mime == 'application/save')
          return fs.stat('/home/dev/static/public/bib/' + loc.base, (err, stat) ->
            #nao deu erro, tem local
            if !err
              size = stat.size
              return nextor(null,
                pathname: '/home/dev/static/public/bib/' + loc.base
                filename: loc.base
                size: size)
            options =
              method: 'GET'
              url: b
              headers: 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
              followAllRedirects: true
            #nao tem local, busca
            request options, (err, res, body) ->
              if err
                return nextor("Erro request bibliografia: "+ b,
                  pathname: '/home/dev/static/public/bib/' + loc.base
                  filename: loc.base
                  size: size)
              headers = r.headers
              mime = headers['content-type']
              size = headers['content-length']
              status = r.statusCode
              console.log 'saving file: /home/dev/static/public/bib/' + loc.base
              #escreve o arquivo na pasta de destino
              fs.writeFile '/home/dev/static/public/bib/' + loc.base, body, (err) ->
                if err
                  return nextor("Error ao escrever arquivo bib na pasta destino ".b, null)
                return nextor null,
                  pathname: '/home/dev/static/public/bib/' + loc.base
                  filename: loc.base
                  size: size
          )
        else if status != 200
          console.log bib
          throw 'ERRO: Arquivo ' + b + ' não encontrado. status ' + status 
          return nextor(null)
        else if mime != 'application/pdf'
          console.log bib
          throw 'ERRO: Arquivo ' + b + ' não é PDF. status ' + mime 
          return nextor(null)
        return

  deu = (err, mapped) ->
    # throw err if err
    cb err, mapped.filter((a) ->
      Boolean a
    )

  async.map bibs, mapper, deu

# ---
# generated by coffee-script 1.9.2

# ---
# generated by js2coffee 2.2.0