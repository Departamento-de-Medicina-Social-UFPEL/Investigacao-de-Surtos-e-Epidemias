// Generated by CoffeeScript 2.7.0
define(['../models/Monitoramento'], function(Monitoramento) {
  var Monitoramentos;
  return Monitoramentos = (function() {
    class Monitoramentos extends Backbone.Collection {
      ['initialize'](options) {}

      
      // onChange:()->
      // onReset:()->
      ['addAmostra'](a) {
        var dados, jaexiste, l, self;
        l = this.get(a.id_local);
        dados = l.get('dados');
        //console.log dados, 'dados do local', l.get('tipo'),a
        self = this;
        dados.forEach(function(d) {
          var dt_fim_a, dt_fim_d, dt_ini_a, dt_ini_d;
          //console.log a.periodoInicio is d.periodoInicio, a.id isnt d.id, a.periodoInicio , d.periodoInicio , a.id , d.id, 'davex'
          if (l.get('tipo') === 'diario') {
            if (a.periodoInicio === d.periodoInicio && (a.id !== d.id || !a.id)) {
              throw "Já existem dados na base para o dia informado!";
            }
          } else {
            dt_ini_a = new Date(self.getDateInternational(a.periodoInicio));
            dt_fim_a = new Date(self.getDateInternational(a.periodoFim));
            dt_ini_d = new Date(self.getDateInternational(d.periodoInicio));
            dt_fim_d = new Date(self.getDateInternational(d.periodoFim));
            if (dt_ini_a >= dt_ini_d && dt_ini_a <= dt_fim_d && (a.id !== d.id || !a.id)) {
              console.log(dt_ini_a, 'data entrando');
              console.log(dt_ini_d, ' data ja estva ', dt_fim_d);
              console.log(' a d ids ', a.id, d.id, !a.id);
              throw "A data do início do período está superposta a um período inserido anteriormente!";
            }
            if (dt_fim_a >= dt_ini_d && dt_fim_a <= dt_fim_d && (a.id !== d.id || !a.id)) {
              throw "A data de fim do período está superposta a um período inserido anteriormente!";
            }
            if (dt_fim_a <= dt_ini_d && dt_fim_a >= dt_fim_d && (a.id !== d.id || !a.id)) {
              throw "O periodo da amostra esta contendo uma outra amostra já inserida!";
            }
          }
        });
        if (!a.id) {
          a['id'] = a.id_local + '_' + (a.periodoInicio.split('/').join('_'));
        }
        jaexiste = false;
        dados = dados.map((d) => {
          if (d.id === a.id) {
            jaexiste = true;
            return a;
          } else {
            return d;
          }
        });
        if (!jaexiste) {
          dados.push(a);
        }
        l.set('dados', dados);
        return this.update(l);
      }

      ['create'](l) {
        l.dados = [];
        if (!l.tipo) {
          l['tipo'] = 'dia';
        }
        console.log(l, 'moni', l['tipo']);
        this.add(l);
        this.saveLocal();
        this.saveServer(l);
        return this.get(l.id);
      }

      ['update'](l) {
        this.models = this.models.map((m) => {
          if (l.get('id') === m.get('id')) {
            m = l;
          }
          return m;
        });
        console.log('update', l.get('dados'));
        this.saveLocal();
        return this.saveServer(l.toJSON());
      }

      ['excluir'](id) {
        var local;
        local = this.remove(id);
        this.removeServer(id);
        return this.saveLocal();
      }

      saveLocal() {
        var local, user;
        if (!App.local) {
          return;
        }
        ({local, user} = App);
        return local.set(`monitoramento-${user.cpf}`, this.toJSON());
      }

      removeServer(id) {
        if (!App.socket) {
          return;
        }
        return App.socket.emit("desmonitorou", id, function(data) {
          return console.log(data, 'removeu?');
        });
      }

      saveServer(res) {
        if (!App.socket) {
          return;
        }
        return App.socket.emit("monitorou", res, function(data) {
          return console.log(data);
        });
      }

      getDateInternational(strDate) {
        var c;
        strDate = strDate.split('/');
        c = strDate[0];
        strDate[0] = strDate[1];
        strDate[1] = c;
        return strDate.join('/');
      }

    };

    Monitoramentos.prototype['model'] = Monitoramento;

    Monitoramentos.prototype['url'] = '';

    return Monitoramentos;

  }).call(this);
});
