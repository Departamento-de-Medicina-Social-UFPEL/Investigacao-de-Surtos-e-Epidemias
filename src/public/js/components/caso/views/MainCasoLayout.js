// Generated by CoffeeScript 2.7.0
define(['../models/Paciente', '../collections/SlidesColl', './SlidesColl', './Introbox', './Paciente', 'utils'], function(PacienteModel, SlidesColl, SlidesCollView, IntroboxView, PacienteView, utils) {
  var CasoView;
  CasoView = (function() {
    class CasoView extends Marionette.LayoutView {
      initialize() {}

      getRespostasDeste() {
        var respostas;
        console.log(`'caso' -> ${this.model.get('_id')}`);
        if (!App.user) {
          return null;
        }
        respostas = App.progresso.getByAtividadeId(this.model.get('_id'));
        if (respostas.length > 0) {
          this.model.set({respostas});
          this.assinalaMarcadas();
          return this.trigger('novasRespostas');
        }
      }

      onRender() {
        var _this, handlerAtualizaProgresso, slidesView;
        this.paciente = new PacienteModel(this.model.get('paciente'));
        console.log(this.model, this.paciente);
        this.allSlides = new SlidesColl(this.model.get('slides'), this.paciente, this.model);
        this.addRegions({
          introReg: '.caso #introducao',
          pacienteReg: '.caso #pacienteTopo',
          slidesReg: '.caso #slidesLista'
        });
        if (this.paciente.sexo) {
          this.pacienteReg.show(new PacienteView({
            model: this.paciente
          }));
        } else {
          this.pacienteReg.hide;
        }
        this.introReg.show(new IntroboxView({
          model: this.model
        }));
        slidesView = new SlidesCollView({
          collection: new SlidesColl(this.model.get('slides').slice(1), this.paciente, this.model)
        });
        this.slidesReg.show(slidesView);
        _this = this;
        handlerAtualizaProgresso = function() {
          this.getRespostasDeste();
          return this.rodapeReg.currentView.render();
        };
        if (App.user) {
          this.listenTo(App.progresso, 'fetched change', handlerAtualizaProgresso);
        }
        return this.getRespostasDeste();
      }

      ['assinalaMarcadas']() {
        var casoId, mediaG, questoes, respostas, self, slides, soma, texto;
        self = this;
        if (!this.slidesReg) {
          setTimeout(function() {
            return self.assinalaMarcadas;
          }, 300);
          return null;
        }
        // @slidesReg
        casoId = this.model.get('_id');
        slides = this.slidesReg.currentView.children;
        // console.log "slides = do @slidesReg.currentView.children", slides
        respostas = this.model.get('respostas');
        if (!slides) {
          return null;
        }
        questoes = slides.filter(function(view) {
          return view.model.get('tipo').match(/questao.*/ig);
        });
        soma = respostas.reduce(function(memo, resp) {
          return memo + resp.get('escore');
        }, 0);
        mediaG = soma / respostas.length;
        texto = '';
        this.ui.estResp.find('.mensagem').empty();
        if (respostas.length === questoes.length) {
          this.ui.estResp.find('#btnContinua').hide();
          this.ui.estResp.find('#btnRecomeca').removeClass('btn-xs').addClass('btn-sm');
          texto = `Você já respondeu todas as ${questoes.length} questões deste caso.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
          texto = `Sua média de acertos final foi de ${mediaG.toFixed(2).replace('.', ',')}%.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        } else {
          texto = `Você já respondeu ${respostas.length} das ${questoes.length} questões deste caso.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
          texto = `Sua média de acertos até agora é de ${mediaG.toFixed(2).replace('.', ',')}%.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        }
        this.ui.estResp.removeClass('hide').show();
        return respostas.forEach(function(resposta) {
          var e, i, len, marca, marcadas, opcs, quest, seqid;
          seqid = resposta.get('seqid');
          quest = questoes[seqid];
          opcs = quest.$el.find('.opcoes');
          marcadas = resposta.get('marcadas');
          for (i = 0, len = marcadas.length; i < len; i++) {
            marca = marcadas[i];
            e = opcs.find(`[data-originalidx="${marca}"]:input`);
            // console.log "MARCA RESPOSTA",seqid, marca, e
            e.attr('checked', true);
            e.parent().removeClass('unchecked').addClass('checked');
          }
          quest.silent = true;
          return quest.ui.btnResp.click();
        });
      }

    };

    CasoView.prototype.className = 'caso-main container';

    CasoView.prototype.template = '#caso-main';

    CasoView.prototype.ui = {
      estResp: '.caso #estadoResposta',
      confirmaReset: '.caso #estadoResposta #confirmaRecomeca'
    };

    CasoView.prototype.events = {
      'click @ui.estResp #btnRecomeca': 'confirmaRecomeca',
      'click @ui.estResp #btnContinua': 'vaiPraQuestaoDaVez'
    };

    return CasoView;

  }).call(this);
  return CasoView;
});
