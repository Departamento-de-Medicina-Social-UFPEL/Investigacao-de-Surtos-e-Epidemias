// Generated by CoffeeScript 2.7.0
define(['../models/Paciente', '../collections/SlidesColl', './SlidesColl', './Introbox', './Paciente', 'utils'], function(PacienteModel, SlidesColl, SlidesCollView, IntroboxView, PacienteView, utils) {
  var CasoView;
  CasoView = (function() {
    class CasoView extends Marionette.LayoutView {
      initialize() {
        var ref, status;
        status = {
          'status': 'attended',
          'percentage': 0,
          'LTIvalue': 0
        };
        if (!window.unasus) {
          return;
        }
        if (!((ref = unasus.pack) != null ? ref.getStatus() : void 0)) {
          return unasus.pack.setStatus(status);
        }
      }

      vaiPraQuestaoDaVez() {
        var page;
        page = $('html, body');
        page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function() {
          page.stop();
          return page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
        });
        return page.animate({
          scrollTop: $("section.slide.daVez").offset().top - 85
        }, 2000, function() {
          return page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
        });
      }

      confirmaRecomeca() {
        var self, status;
        self = this;
        if (typeof unasus !== "undefined" && unasus !== null ? unasus.pack : void 0) {
          status = {
            'status': 'attended',
            'percentage': 0,
            'LTIvalue': 0
          };
          unasus.pack.setStatus(status);
        }
        this.ui.confirmaReset.modal({
          keyboard: false
        });
        return this.ui.confirmaReset.find('#delete').on('click', function() {
          var i, len, page, respDest, resposta;
          respDest = App.progresso.getByAtividadeId(self.model.get('_id'));
          for (i = 0, len = respDest.length; i < len; i++) {
            resposta = respDest[i];
            resposta.destroy();
          }
          App.progresso.calculaProgressoGeral();
          App.progresso.trigger('change');
          // self.model.unset 'respostas'
          page = $('html, body');
          page.removeClass('modal-open');
          return Backbone.history.loadUrl(Backbone.history.fragment);
        });
      }

      onRender() {
        var _this, handlerAtualizaProgresso, slides, slidesView;
        // console.log @ui.estResp
        this.paciente = new PacienteModel(this.model.get('paciente'));
        // console.log @model, @paciente
        this.allSlides = new SlidesColl(this.model.get('slides'), this.paciente, this.model);
        this.addRegions({
          introReg: '.caso #introducao',
          pacienteReg: '.caso #pacienteTopo',
          slidesReg: '.caso #slidesLista'
        });
        if (this.model.get('paciente')) {
          this.pacienteReg.show(new PacienteView({
            model: this.paciente
          }));
        }
        this.introReg.show(new IntroboxView({
          model: this.model
        }));
        slides = this.model.get('slides');
        if (slides[0].tipo === 'intro') {
          slides = slides.slice(1);
        }
        slidesView = new SlidesCollView({
          collection: new SlidesColl(slides, this.paciente, this.model)
        });
        this.slidesReg.show(slidesView);
        _this = this;
        handlerAtualizaProgresso = function() {
          return this.getRespostasDeste();
        };
        // @rodapeReg.currentView.render()
        this.listenTo(App.progresso, 'fetched change', handlerAtualizaProgresso);
        setTimeout(function() {
          return $.material.init();
        }, 10);
        this.ajustaHeader();
        return this.getRespostasDeste();
      }

      ajustaHeader() {
        var cor, e, etiqueta, m, o, pro, style, tag;
        pro = this.model.get('pro');
        [e, m, o] = pro;
        cor = (function() {
          switch (true) {
            case e && m:
              return 'linear-gradient(90deg, #0091D6 10px, #378A33 27px)';
            case e:
              return '#0091D6';
            case m:
              return '#378A33';
            case o:
              return '#DB160F';
          }
        })();
        console.log(pro, cor, cor.length);
        etiqueta = $('.navbar-brand .pro-tag');
        if (etiqueta.length === 0) {
          tag = `${e ? 'E ' : ''}${m ? 'M ' : ''}${o ? 'O' : ''}`;
          style = {
            'background': cor,
            'padding-left': '5px',
            'padding-right': '5px',
            'margin-right': '5px',
            'padding-bottom': '1px',
            'font-weight': 'bold',
            'border-radius': '4px'
          };
          tag = $('<span></span>').addClass('pro-tag').html(tag.trim()).css(style);
          if (cor.length === 7) {
            tag.addClass('single-child');
          }
          return $('.navbar-brand').prepend(tag);
        }
      }

      getRespostasDeste() {
        var respostas;
        // console.log "'caso' -> #{@model.get '_id'}"
        // return null unless App.user
        respostas = App.progresso.getByAtividadeId(this.model.get('_id'));
        console.log(respostas);
        if (respostas.length > 0) {
          this.model.set({respostas});
          this.assinalaMarcadas();
          return this.trigger('novasRespostas');
        }
      }

      ['assinalaMarcadas']() {
        var casoId, mediaG, persist, questoes, respostas, self, slides, soma, texto;
        self = this;
        if (!this.slidesReg) {
          setTimeout(function() {
            return self.assinalaMarcadas;
          }, 100);
          return null;
        }
        // @slidesReg
        casoId = this.model.get('_id');
        slides = this.slidesReg.currentView.children;
        // console.log "slides = do @slidesReg.currentView.children", slides
        respostas = this.model.get('respostas');
        if (!slides) {
          return null;
        }
        questoes = slides.filter(function(view) {
          return view.model.get('tipo').match(/questao.*/ig);
        });
        soma = respostas.reduce(function(memo, resp) {
          return memo + resp.get('escore');
        }, 0);
        mediaG = soma / respostas.length;
        texto = '';
        this.ui.estResp.find('.mensagem').empty();
        persist = {
          'status': 'attempted',
          'percentage': 0,
          'LTIvalue': 0
        };
        if (respostas.length === questoes.length) {
          this.ui.estResp.find('#btnContinua').hide();
          this.ui.estResp.find('#btnRecomeca').removeClass('btn-xs').addClass('btn-sm');
          texto = `Você já respondeu todas as ${questoes.length} questões deste caso.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
          texto = `Sua média de acertos final foi de ${mediaG.toFixed(2).replace('.', ',')}%.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
          persist.status = mediaG >= 70 ? 'passed' : 'failed';
          persist.percentage = 100;
        } else {
          persist.status = 'attempted';
          persist.percentage = parseInt((respostas.length / questoes.length) * 100);
          texto = `Você já respondeu ${respostas.length} das ${questoes.length} questões deste caso.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
          texto = `Sua média de acertos até agora é de ${mediaG.toFixed(2).replace('.', ',')}%.`;
          this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        }
        if (typeof unasus !== "undefined" && unasus !== null ? unasus.pack : void 0) {
          persist.LTIvalue = mediaG / 100;
          unasus.pack.setStatus(persist);
        }
        this.ui.estResp.removeClass('hide').show();
        // console.log @ui.estResp
        return respostas.forEach(function(resposta) {
          var e, i, len, marca, marcadas, opcs, quest, seqid;
          seqid = resposta.get('seqid');
          quest = questoes[seqid];
          opcs = quest.$el.find('.opcoes');
          marcadas = resposta.get('marcadas');
          for (i = 0, len = marcadas.length; i < len; i++) {
            marca = marcadas[i];
            e = opcs.find(`[data-originalidx="${marca}"]:input`);
            // console.log "MARCA RESPOSTA",seqid, marca, e
            e.attr('checked', true);
            e.parent().removeClass('unchecked').addClass('checked');
          }
          quest.silent = true;
          quest.tocado();
          return quest.ui.btnResp.click();
        });
      }

    };

    CasoView.prototype.className = 'caso-main container';

    CasoView.prototype.template = '#caso-progresso-single-main';

    CasoView.prototype.ui = {
      estResp: '.caso #estadoResposta',
      confirmaReset: '.caso #estadoResposta #confirmaRecomeca'
    };

    CasoView.prototype.events = {
      'click @ui.estResp #btnRecomeca': 'confirmaRecomeca',
      'click @ui.estResp #btnContinua': 'vaiPraQuestaoDaVez'
    };

    return CasoView;

  }).call(this);
  return CasoView;
});
