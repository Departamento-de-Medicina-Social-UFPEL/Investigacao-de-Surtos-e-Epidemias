// Generated by CoffeeScript 2.7.0
define(['./controller', './routes'], function(controller, routes) {
  var url;
  url = {
    'host': window.location.host,
    'path': 'arouca/modulo/maad-paliativo'
  };
  return function(component, parentApp, Backbone, Marionette, $, _) {
    var enviaUserEnquete;
    App.commands.setHandler('storeUser', function(user = App.user, cb) {
      var local, progresso, resposta, socket;
      // console.log arguments
      ({local, socket, progresso} = parentApp);
      if (!user) {
        return false;
      }
      parentApp.user = user;
      if (local) {
        local.set('user', parentApp.user);
      }
      progresso.setUser(user);
      resposta = {
        ok: false
      };
      if (socket) {
        user['modulo'] = App.moduloId;
        console.log("emit user", user);
        return socket.emit('user', user, function(resposta) {
          var erroServidor, u;
          console.log(`SALVO USER no server`, resposta);
          if (resposta.ok) {
            if (resposta.user.cpf !== user.cpf) {
              resposta.ok = false;
              erroServidor = "Conflito de cpf enviado: " + user.cpf + " recebido " + resposta.user.cpf;
              socket.emit('senderror', erroServidor, function(r) {});
              if (cb) {
                // console.log 'erro salvo no servidor'
                return cb(resposta);
              }
            } else {
              u = resposta.user;
              App.user = u;
              App.local.set('user', App.user);
              // console.log App.user, 'salvo no server e local', local.get 'user'
              // App.progresso.setUser App.user
              // console.log 'sincronizando progressos'
              return App.execute('retrieveRespostas', cb);
            }
          } else {
            if (cb) {
              return cb(resposta);
            }
          }
        });
      } else {
        if (cb) {
          return cb(resposta);
        }
      }
    });
    App.commands.setHandler('retrieveRespostas', function(cb) {
      var cpfUser, local, obj, progresso, ref, respostaz, resps, respsServer, socket, ts, user;
      // console.log "App.commands.setHandler 'retrieveRespostas', (cb)->"
      ({user, local, socket, progresso} = parentApp);
      if (socket && local && user) {
        // console.log "emit respostas"
        respostaz = App.local.get('respostas-' + App.user.cpf) ? App.local.get('respostas-' + App.user.cpf) : [];
        respsServer = [];
        // console.log respostaz
        resps = _.sortBy(respostaz, 'ts');
        ts = resps ? (ref = resps[0]) != null ? ref.ts : void 0 : 0;
        cpfUser = parentApp.progresso.user.get('cpf');
        obj = {
          user: cpfUser,
          modulo: window.modulo._id
        };
        // console.log obj
        // console.log 'enviando respostas locais para o servidor'
        return socket.emit('respostas:rebuild', resps, function(data) {
          var ref1, respsLocais;
          if (!data.ok) {
            if (cb) {
              return cb(data);
            } else {
              return (ref1 = App.main.currentView) != null ? ref1.render() : void 0;
            }
          }
          if (data.respostas.length > 0) {
            respsLocais = data.respostas;
          }
          return socket.emit('respostas', obj, function(data) {
            var ok, ref2, respostas;
            //console.log 'buscando progresso completo do servidor validas(a+b) ...', obj
            ({ok, respostas} = data);
            if (!ok) {
              if (cb) {
                return cb(data);
              }
            }
            if (!data.respostas) {
              // App.local.set('respostas-'+App.user.cpf, respsServer)
              data.respostas = respsLocais;
            }
            App.progresso.reset(data.respostas);
            if (cb) {
              return cb(data);
            } else {
              return (ref2 = App.main.currentView) != null ? ref2.render() : void 0;
            }
          });
        });
      }
    });
    App.commands.setHandler('loginComo', function(cpf, cb) {
      var local, progresso, socket;
      ({local, socket, progresso} = parentApp);
      return socket.emit('getuser', {
        cpf: cpf
      }, function(resposta) {
        var erroServidor, u;
        // console.log {cpf:cpf}, resposta, 'resposta'
        if (resposta.ok) {
          if (resposta.user.cpf !== cpf) {
            erroServidor = "Conflito (loginComo) de cpf enviado: " + cpf + " recebido " + resposta.user.cpf;
            socket.emit('senderror', erroServidor, function(r) {});
          }
          // console.log 'erro salvo no servidor'
          // console.log resposta.user, '<- aqui esta'
          u = resposta.user;
          App.user = u;
          App.local.set('user', App.user);
          // console.log App.user, 'salvo local', local.get 'user'
          App.progresso.setUser(App.user);
          return App.execute('retrieveRespostas', function() {
            return window.location.reload();
          });
        } else {
          return console.log("Error:", resposta);
        }
      });
    });
    App.commands.setHandler('storeUserEnquete', function(userEnquete, cb) {
      var local, progresso, socket;
      // console.log arguments, userEnquete, 'userEnquete'
      ({local, socket, progresso} = parentApp);
      if (!userEnquete) {
        return false;
      }
      if (!App.user) {
        // console.log 'nao tem usar local tentando buscar'
        return socket.emit('getuser', {
          cpf: userEnquete.cpf,
          modulo: App.moduloId
        }, function(resposta) {
          var erroServidor;
          if (resposta.ok) {
            App.user = resposta.user;
            // console.log 'tem usar local tentando enviar enquete', resposta
            return enviaUserEnquete(userEnquete, cb);
          } else {
            erroServidor = "Não foi possivel salvar a enquete para: " + userEnquete.cpf;
            return socket.emit('senderror', erroServidor, function(r) {});
          }
        });
      } else {
        // console.log 'tem user local, enviando enquete', App.user.cpf
        // console.log 'erro salvo no servidor'
        return enviaUserEnquete(userEnquete, cb);
      }
    });
    App.commands.setHandler('dashboard.calcProgresso', function(cb) {
      return App.socket.emit('dashboard.calcProgresso', App.user.cpf, App.moduloId, cb);
    });
    return enviaUserEnquete = function(userEnquete, cb) {
      var local, progresso, resposta, socket;
      ({local, socket, progresso} = parentApp);
      // console.log 'enviando enquete' , userEnquete, App.user
      if (!App.user.enquetes) {
        App.user.enquetes = {};
      }
      if (!App.user.enquetes[App.moduloId]) {
        App.user.enquetes[App.moduloId] = {};
      }
      if (userEnquete.cadastro) {
        App.user.enquetes[App.moduloId]['cadastro'] = userEnquete.cadastro;
      }
      if (userEnquete.conclusao) {
        App.user.enquetes[App.moduloId]['conclusao'] = userEnquete.conclusao;
      }
      if (userEnquete.encerramento) {
        App.user.enquetes[App.moduloId]['encerramento'] = userEnquete.encerramento;
      }
      parentApp.user = App.user;
      if (local) {
        local.set('user', parentApp.user);
      }
      resposta = {
        ok: false
      };
      if (socket) {
        // console.log "emit user", App.user
        return socket.emit('userEnquete', App.user, function(resposta) {
          var erroServidor;
          if (!resposta.ok) {
            erroServidor = "Não foi possível salvar suas respostas!";
            socket.emit('senderror', erroServidor, function(r) {});
            if (cb) {
              // console.log 'erro salvo no servidor'
              return cb(resposta);
            }
          } else {
            if (cb) {
              // App.user = resposta.user
              // App.local.set 'user', App.user
              // console.log App.user, 'enquete salva no server e local', local.get 'user'
              return cb(resposta);
            }
          }
        });
      } else {
        if (cb) {
          // App.progresso.setUser App.user
          return cb(resposta);
        }
      }
    };
  };
});
