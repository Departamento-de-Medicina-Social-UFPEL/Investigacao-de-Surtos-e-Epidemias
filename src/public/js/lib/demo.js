// Generated by CoffeeScript 2.7.0
define(['underscore'], function(_) {
  var PopulacaoEmFaixas;
  PopulacaoEmFaixas = class PopulacaoEmFaixas {
    constructor(faixaUf, sexoFaixaUf) {
      this.faixaPorUf = faixaUf;
      this.faixaPorRelSexo = sexoFaixaUf;
      this.faixas = _(this.faixaPorUf.map(function(v, k, l) {
        var ref;
        if ((function() {
          var results = [];
          for (var i = 1, ref = l.length - 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--){ results.push(i); }
          return results;
        }).apply(this).indexOf(k) !== -1) {
          return v[0];
        }
      })).compact().__wrapped__;
      this.ufs = {
        "RO": "Rondônia",
        "AC": "Acre",
        "AM": "Amazonas",
        "RR": "Roraima",
        "PA": "Pará",
        "AP": "Amapá",
        "TO": "Tocantins",
        "MA": "Maranhão",
        "PI": "Piauí",
        "CE": "Ceará",
        "RN": "Rio Grande do Norte",
        "PB": "Paraíba",
        "PE": "Pernambuco",
        "AL": "Alagoas",
        "SE": "Sergipe",
        "BA": "Bahia",
        "MG": "Minas Gerais",
        "ES": "Espírito Santo",
        "RJ": "Rio de Janeiro",
        "SP": "São Paulo",
        "PR": "Paraná",
        "SC": "Santa Catarina",
        "RS": "Rio Grande do Sul",
        "MS": "Mato Grosso do Sul",
        "MT": "Mato Grosso",
        "GO": "Goiás",
        "DF": "Distrito Federal"
      };
    }

    getFaixas() {
      return this.faixas;
    }

    getUfs() {
      return this.ufs;
    }

    getUfBySigla(sigla) {
      return this.ufs[sigla.toUpperCase()];
    }

    getFaixasPorUf(uf) {
      var faixa, i, len, ref, ufCol, ufVals;
      ufCol = this.faixaPorRelSexo[0].indexOf(uf.toUpperCase());
      ufVals = [];
      ref = this.faixaPorUf;
      for (i = 0, len = ref.length; i < len; i++) {
        faixa = ref[i];
        ufVals.push(faixa[ufCol]);
      }
      return this.getMiolo(ufVals, function(v) {
        var error;
        try {
          v = v.replace(/,/gm, '.');
        } catch (error1) {
          error = error1;
        }
        return (parseFloat(v)) / 100;
      });
    }

    getFaixasDestSexoPorUf(uf) {
      var faixa, i, len, ref, ufCol, ufVals;
      ufCol = this.faixaPorRelSexo[0].indexOf(uf.toUpperCase());
      ufVals = [];
      ref = this.faixaPorRelSexo;
      for (i = 0, len = ref.length; i < len; i++) {
        faixa = ref[i];
        ufVals.push(faixa[ufCol]);
      }
      return this.getMiolo(ufVals, function(v) {
        var error;
        try {
          return v = v.replace(/,/gm, '.');
        } catch (error1) {
          error = error1;
        }
      });
    }

    getData(uf, locPop) {
      var faix, genero, k, perF, perM, popDist, sexDist, total, upperSigla;
      popDist = this.getFaixasPorUf(uf);
      sexDist = this.getFaixasDestSexoPorUf(uf);
      console.log(locPop);
      faix = [];
      for (k in this.faixas) {
        total = locPop * popDist[k];
        genero = this.propPorGen(sexDist[k], total);
        perF = genero.F * 100;
        perM = 100 - (genero.F * 100);
        faix.push({
          nome: this.faixas[k],
          total: total,
          perTotal: popDist[k] * 100,
          totM: perM * total / 100,
          perM: perM,
          totF: perF * total / 100,
          perF: perF
        });
      }
      upperSigla = uf.toUpperCase();
      return {
        estado: this.ufs[upperSigla],
        sigla: upperSigla,
        populacao: {
          total: locPop,
          feminino: faix.reduce(function(sum, faixa) {
            sum += faixa.totF;
            return sum;
          }, 0),
          masculino: faix.reduce(function(sum, faixa) {
            return sum += faixa.totM;
          }, 0)
        },
        faixas: faix
      };
    }

    propPorGen(MalesPerFemale) {
      var total, totalF, totalM;
      total = MalesPerFemale + 50;
      totalM = MalesPerFemale / total;
      totalF = 50 / total;
      return {
        M: totalM,
        F: totalF
      };
    }

    getMiolo(arr) {
      var arg, ret;
      // console.log arguments
      arg = arguments[1];
      ret = arr.slice(1, -1);
      if (typeof arg === 'function') {
        return ret.map(arg);
      } else {
        return ret;
      }
    }

    findKey(obj, value) {
      var eh, k, v;
      console.log(arguments);
      for (k in obj) {
        v = obj[k];
        console.log(value, v, k);
        eh = v === value;
        console.log(`${v} is ${value} ? ${eh}`);
        if (eh) {
          return k;
        }
      }
    }

  };
  return PopulacaoEmFaixas;
});
