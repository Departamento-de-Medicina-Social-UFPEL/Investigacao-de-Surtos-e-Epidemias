// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

requirejs.config({
  'baseUrl': '/casca',
  'waitSeconds': 100,
  'paths': {
    'utils': 'js/lib/utils',
    'jquery': 'lib/jquery/dist/jquery',
    'underscore': 'lib/lodash/lodash',
    'backbone': 'lib/backbone/backbone',
    'backbone.marionette': 'lib/backbone.marionette/lib/backbone.marionette',
    'bootstrap': 'lib/bootstrap/dist/js/bootstrap'
  },
  'map': {
    '*': {
      'marionette': 'backbone.marionette'
    }
  },
  'shim': {
    'bootstrap': {
      'deps': ['jquery']
    },
    'backbone.marionette': {
      'deps': ['jquery', 'backbone']
    }
  }
});

require(['marionette'], function(Marionette) {
  var Biblio, InfoBiblio, InputBiblioIn;
  InfoBiblio = (function(_super) {
    __extends(InfoBiblio, _super);

    function InfoBiblio() {
      return InfoBiblio.__super__.constructor.apply(this, arguments);
    }

    InfoBiblio.prototype['initialize'] = function() {
      return this.bindUIElements();
    };

    InfoBiblio.prototype['events'] = {
      'mouseup': 'checkSelection'
    };

    InfoBiblio.prototype['ui'] = {
      'content': '.content',
      'externo': '.externo',
      'local': '.local'
    };

    InfoBiblio.prototype['checkSelection'] = function(evt) {
      var sel;
      sel = this.getSelection();
      if (sel) {
        return console.log(sel);
      } else {
        return console.log('nada');
      }
    };

    InfoBiblio.prototype['getSelection'] = function(evt) {
      if (window.getSelection) {
        return window.getSelection().toString();
      } else if (document.selection && document.selection.type !== "Control") {
        return document.selection.createRange().text;
      } else {
        return null;
      }
    };

    return InfoBiblio;

  })(Marionette.View);
  InputBiblioIn = (function(_super) {
    __extends(InputBiblioIn, _super);

    function InputBiblioIn() {
      return InputBiblioIn.__super__.constructor.apply(this, arguments);
    }

    InputBiblioIn.prototype['events'] = {
      'change': 'updateInfo'
    };

    InputBiblioIn.prototype['updateInfo'] = function(evt) {
      var obj;
      try {
        obj = (new Function("return " + (this.$el.val())))();
      } catch (_error) {}
      if (obj) {
        App.info.$el.show();
        App.info.ui.content.text(obj.linkTitulo);
        App.info.ui.externo.attr('href', obj.urlExterno);
        return App.info.ui.local.attr('href', obj.urlLocal);
      }
    };

    return InputBiblioIn;

  })(Marionette.View);
  Biblio = (function(_super) {
    __extends(Biblio, _super);

    function Biblio() {
      return Biblio.__super__.constructor.apply(this, arguments);
    }

    Biblio.prototype['start'] = function() {
      this.input = new InputBiblioIn({
        'el': '.bib-in'
      });
      this.output = new Marionette.View({
        'el': '.bib-out'
      });
      this.info = new InfoBiblio({
        'el': '.bib-info'
      });
      this.info.$el.hide();
      return console.log('start');
    };

    return Biblio;

  })(Marionette.Application);
  window.App = new Biblio;
  return App.start();
});
