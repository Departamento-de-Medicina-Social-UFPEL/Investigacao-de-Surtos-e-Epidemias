// Generated by CoffeeScript 2.7.0
define(['backbone.marionette', './ConteudoItemView', './UnidadesCollView'], function(Marionette, ConteudoItemView, UnidadesCollView) {
  var MenuView;
  return MenuView = (function() {
    class MenuView extends Marionette.CompositeView {
      initialize() {
        var self;
        self = this;
        return this.model = new Backbone.Model({
          ofertas: this.collection.map((m) => {
            var conteudo;
            conteudo = m.get('conteudo');
            //conteudo = conteudo[0].toUpperCase()+ conteudo.slice(1)
            return conteudo;
          })
        });
      }

      childView(arg) {
        var conteudo, elegivel, g, masterLock, modelo, nr_elegivel, ofertas, percAcertoPosTeste, percAcertoPreTeste, percCasos, self, sigla, titulo, unidade, unidades, view;
        self = this;
        conteudo = arg.model.get('conteudo');
        unidade = arg.model.get('unidade');
        conteudo = conteudo[0].toUpperCase() + conteudo.slice(1);
        // console.log(conteudo, 'conteudo')
        g = App.progresso.geral;
        sigla = '';
        nr_elegivel = 0;
        ofertas = [];
        if (window.modulo.fl_por_unidade) {
          unidades = _.where(window.modulo.components, {
            folder: 'unidade-progresso'
          });
          //console.log unidades, 'unidade'
          unidades = unidades.filter((u) => {
            return u.unidade;
          }).map(function(o) {
            var modelo;
            modelo = {
              'categories': o.categories,
              'nome': o.short,
              'unidade': o.unidade,
              'titulo': 'Unidade ' + o.unidade,
              'bloqueada': o.bloqueada,
              'nucleo': 'Interdisciplinar_' + o.unidade,
              'casos': o.resource.casos,
              'corIntro': o.cor,
              'corFonte': 'white',
              'sigla': '<span class=\'pro-tag \' style=\'background: darkgoldenrod!important;\'>U' + o.unidade + '</span>'
            };
            modelo.percCasos = g.unidade[o.unidade]['percCasosConclu'].toFixed(1);
            modelo.percAcertoPreTeste = g.unidade[o.unidade]['percAcertoPreTeste'].toFixed(1);
            modelo.percAcertoPosTeste = g.unidade[o.unidade]['percAcertoPosTeste'].toFixed(1);
            modelo.lockTesteFinal = App["masterFinalLockUnidade"](o.unidade);
            modelo.fl_cert_casos_clinicos = parseFloat(g.unidade[o.unidade]['percCasosConclu']) >= 70;
            modelo.fl_cert_pos_teste = parseFloat(g.unidade[o.unidade]['percAcertoPosTeste']) >= 70;
            modelo.elegivel = App["masterElegivelCertUnidade"](o.unidade);
            nr_elegivel = modelo.elegivel ? nr_elegivel + 1 : nr_elegivel;
            return ofertas.push(new Backbone.Model(modelo));
          });
          view = new UnidadesCollView({
            collection: new Backbone.Collection(ofertas)
          });
        } else {
          percAcertoPreTeste = g['percAcertoPreTeste' + conteudo].toFixed(1);
          percCasos = g['percCasosConcluNucleo' + conteudo].toFixed(1);
          percAcertoPosTeste = g['percAcertoPosTeste' + conteudo].toFixed(1);
          titulo = arg.model.get('tipo') !== 'integrador' ? conteudo : 'Integral';
          elegivel = App["masterElegivelCert" + conteudo]();
          masterLock = App["masterFinalLock" + conteudo]();
          switch (conteudo) {
            case 'Enfermagem':
              sigla = '<span class=\'pro-tag enf\'>E</span>';
              break;
            case 'Medicina':
              sigla = '<span class=\'pro-tag med\'>M</span>';
              break;
            case 'Odontologia':
              sigla = '<span class=\'pro-tag odo\'>O</span>';
              break;
            case 'Interdisciplinar':
              sigla = '<span class=\'pro-tag \' style=\'background: darkgoldenrod!important;\'>I</span>';
              break;
            default:
              break;
          }
          modelo = new Backbone.Model({
            'elegivel': elegivel,
            'categories': [],
            'lockTesteFinal': masterLock,
            'fl_cert_casos_clinicos': percCasos >= 70,
            'fl_cert_pos_teste': percAcertoPosTeste >= 70,
            'nucleo': conteudo,
            'titulo': titulo,
            'sigla': sigla,
            'id_arouca': arg.model.get('id_arouca'),
            'percAcertoPreTeste': percAcertoPreTeste,
            'percCasos': percCasos,
            'percAcertoPosTeste': percAcertoPosTeste
          });
          //console.log modelo, 'modelo lateral'
          view = new ConteudoItemView({
            model: modelo
          });
        }
        return view;
      }

      // childView: ConteudoItemView
      sincroniza() {
        var flag_inscrito, self;
        self = this;
        // flag_inscrito = @estaInscrito()
        flag_inscrito = true;
        self.ui.sincText.removeClass('alert').removeClass('alert-info').removeClass('alert-danger').html('');
        self.ui.sincBar.parent().show();
        return setTimeout(function() {
          var mensagem;
          self.ui.sincBar.css({
            'width': '50%'
          });
          if (!navigator.onLine || !flag_inscrito || App.progresso.length === 0) {
            mensagem = 'Ocorreu um erro ao sincronizar seu progresso, verifique sua conexão e tente novamente.';
            // if not flag_inscrito
            //   mensagem = 'Para sincronizar seu processo você precisa estar inscrito em um conteúdo!'
            if (App.progresso.length === 0) {
              mensagem = 'Você ainda não possui progressos, faça alguma atividade e tente novamente!';
            }
            self.ui.sincText.addClass('alert alert-danger').html(mensagem);
            return self.ui.sincBar.parent().hide().children().css({
              'width': '10%'
            });
          } else {
            return App.execute('storeUser', App.user, function(dataUser) {
              var c, dt, i, len, mensagemErro, ref;
              console.log('retorno store sincronize', dataUser);
              if (!dataUser.ok && !dataUser.certificado) {
                self.ui.sincBar.parent().hide().children().css({
                  'width': '10%'
                });
                return self.ui.sincText.addClass('alert alert-danger').html('Ocorreu um erro ao sincronizar seu progresso, verifique sua conexão e tente novamente.');
              } else {
                dt = new Date();
                mensagemErro = 'Progresso sincronizado em: ' + dt.toLocaleString();
                if (dataUser.certificado) {
                  mensagemErro = '<ul class="list-group">';
                  ref = dataUser.certificado;
                  for (i = 0, len = ref.length; i < len; i++) {
                    c = ref[i];
                    console.log('uma certificada', c);
                    mensagemErro += "<li class='list-group-item'><a class='list-group-item' href='" + c.url_certificado + "'> Clique aqui para obter certificado: " + c.conteudo + "</a></li>";
                  }
                  mensagemErro += '</ul>';
                }
                setTimeout(function() {
                  return self.ui.sincBar.css({
                    'width': '100%'
                  });
                }, 1000);
                return setTimeout(function() {
                  self.ui.sincBar.parent().hide().children().css({
                    'width': '10%'
                  });
                  return self.ui.sincText.addClass('alert alert-info').html(mensagemErro);
                }, 1000);
              }
            });
          }
        }, 1000);
      }

      estaInscrito() {
        var hoje, saida, self;
        self = this;
        hoje = new Date();
        saida = false;
        if (App.user.ofertas) {
          App.user.ofertas.forEach(function(o) {
            if (o.modulo === App.moduloId && ((new Date(o.data_inicio)) <= hoje && (new Date(o.data_fim_matricula)) >= hoje)) {
              return saida = true;
            }
          });
        }
        return saida;
      }

      verificaInscricoesConcluintes() {
        var fl_inscrito, hoje, numOfertasAbertas, numOfertasConcluinte, self;
        self = this;
        hoje = new Date();
        fl_inscrito = false;
        numOfertasAbertas = window.modulo.ofertasAbertas.length;
        numOfertasConcluinte = 0;
        if (App.user.ofertas) {
          return window.modulo.ofertasAbertas.forEach(function(oa) {
            App.user.ofertas.forEach(function(o) {
              if (o.id_arouca === oa.id_arouca) {
                return fl_inscrito = true;
              }
            });
            if (!fl_inscrito) {
              App.user.ofertas.forEach(function(o) {
                if (o.modulo === App.moduloId && o.conteudo === oa.conteudo && o.dt_conclusao) {
                  return numOfertasConcluinte++;
                }
              });
            }
            if (numOfertasAbertas === numOfertasConcluinte) {
              return self.ui.sinc.hide();
            }
          });
        }
      }

      onRender() {
        this.ui.zero.show();
        this.ui.progresso.hide();
        this.ui.sinc.hide();
        if (App.progresso) {
          if (App.progresso.length > 0) {
            this.ui.zero.hide();
            this.ui.progresso.show();
            this.ui.sinc.show();
          }
        }
        $('.lista-conteudos').css({
          display: 'block'
        });
        return this.verificaInscricoesConcluintes();
      }

    };

    MenuView.prototype.tagName = 'li';

    MenuView.prototype.className = 'dropdown menu-top-right';

    MenuView.prototype.template = _.template($('#user-progresso-menu-template').html(), {
      interpolate: /\<\@\=(.+?)\@\>/gim,
      evaluate: /\<\@([\s\S]+?)\@\>/gim,
      escape: /\<\@\-(.+?)\@\>/gim
    });

    MenuView.prototype.ui = {
      'zero': '.progressoZero',
      'progresso': '.progresso-conteudo',
      'sinc': '.progresso-sincroniza',
      'sincBar': '#progressbar-sinc',
      'btnMenu': '.titulo-block-progresso',
      'sincText': '.text-sinc-progresso'
    };

    MenuView.prototype.events = {
      'click @ui.sinc': 'sincroniza'
    };

    // window.modulo.ofertasAbertas.forEach (o)->
    //     conteudo = o.conteudo
    //     self[o.conteudo].show view
    MenuView.prototype.childViewContainer = '.progresso-conteudo';

    return MenuView;

  }).call(this);
});
