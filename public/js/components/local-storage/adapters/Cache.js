// Generated by CoffeeScript 1.8.0
define(['underscore', 'lzs'], function(_, LZString) {
  var Cache;
  return Cache = (function() {
    function Cache(options) {
      var settings;
      settings = {
        namespace: 'global',
        backend: false,
        separator: '-'
      };
      if (_.isString(options)) {
        options.namespace = options;
      }
      if (options) {
        _.extend(settings, options);
      }
      this.separator = settings.separator;
      this.setNamespace(settings.namespace);
      if (settings.backend) {
        this.setBackend(settings.backend);
      }
      this.storage = window.localStorage;
      this.compressor = LZString;
      this.latestSet = 0;
      this.latestSetAll = 0;
      this.latestSaveAll = 0;
      this.latestSyncAll = 0;
      _.bindAll(this);
    }

    Cache.prototype.clearAllKeysInNS = function() {
      var all, key, oldKeyValPairs, self, thisNS, _i, _len;
      self = this;
      all = Object.keys(self.storage);
      thisNS = all.filter(function(k) {
        return k.indexOf(self.namespace) > -1;
      });
      console.log(thisNS);
      oldKeyValPairs = thisNS.reduce((function(m, k) {
        m[k] = self.storage[k];
        return m;
      }), {});
      for (_i = 0, _len = thisNS.length; _i < _len; _i++) {
        key = thisNS[_i];
        self.storage.removeItem(key);
      }
      return oldKeyValPairs;
    };

    Cache.prototype.setBackend = function(backend) {
      if (_.isFunction(backend)) {
        return this.backend = backend;
      } else {
        throw new TypeError("(Cache)(setBackend): backend is not a function");
      }
    };

    Cache.prototype.setNamespace = function(namespace) {
      if (_.isString(namespace)) {
        return this.namespace = this._dasherize(namespace);
      } else {
        throw new TypeError("(Cache)(setNamespace): namespace is not a string");
      }
    };

    Cache.prototype._ns = function(key) {
      return "" + this.namespace + "." + (this._makeValidKey(key));
    };

    Cache.prototype._makeValidKey = function(key) {
      if (_.isString(key)) {
        return this._dasherize(key);
      } else {
        throw new TypeError("(Cache)(_makeValidKey): key '" + key + "' is not a string");
      }
    };

    Cache.prototype._dasherize = function(string) {
      return string.replace(/_/g, this.separator);
    };

    Cache.prototype.get = function(key) {
      var item;
      key = this._makeValidKey(key);
      if (!this.isObjectExpired()) {
        if (this.cachedObject[key]) {
          return this.compressor.decompress(this.cachedObject[key]);
        }
      }
      item = this.storage.getItem(this._ns(key));
      if (!item) {
        return null;
      }
      return JSON.parse(this.compressor.decompress(item));
    };

    Cache.prototype.set = function(key, value) {
      this.latestSet = new Date().getTime();
      if (value) {
        this.storage.setItem(this._ns(key), this.compressor.compress(JSON.stringify(value)));
      } else {
        this.storage.removeItem(this._ns(key));
      }
      return value;
    };

    Cache.prototype.setAll = function(items) {
      if (_.isObject(items)) {
        return _.each(items, (function(_this) {
          return function(key, item) {
            key = _this._makeValidKey(key);
            return _this.set(key, item);
          };
        })(this));
      } else {
        throw new TypeError("(Cache)(setAll): items is not an object");
      }
    };

    Cache.prototype.append = function(key, item) {
      var arr;
      arr = this.get(key);
      if (_.isArray(arr)) {
        arr.push(item);
        return this.set(key, arr);
      } else if (arr === null) {
        arr = [item];
        return this.set(key, arr);
      } else {
        throw new TypeError('(Cache)(append): array expected, instead: ' + typeof arr);
      }
    };

    Cache.prototype.prepend = function(key, item) {
      var arr;
      arr = this.get(key);
      if (_.isArray(arr)) {
        arr.unshift(item);
        return this.set(key, arr);
      } else if (arr === null) {
        arr = [item];
        return this.set(key, arr);
      } else {
        throw new TypeError('(Cache)(prepend): array expected');
      }
    };

    Cache.prototype.extend = function(key, object) {
      var current;
      if (!_.isObject(object)) {
        throw new TypeError("(Cache)(extend): object argument '" + object + "' is not an object");
      }
      current = this.get(key);
      if (_.isObject(current)) {
        _.extend(current, object);
        return this.set(key, current);
      } else {
        throw new TypeError("(Cache)(extend): current value for key '" + key + "' is not an object");
      }
    };

    Cache.prototype.all = function(isObjectReturned) {
      var arr, keys, nsLength, obj, objKeys;
      isObjectReturned = !!isObjectReturned || false;
      if (isObjectReturned && !this.isObjectExpired()) {
        return this.cachedObject;
      }
      if (!this.isArrayExpired()) {
        return this.cachedArray;
      }
      objKeys = Object.keys(this.storage);
      nsLength = this.namespace.length;
      keys = _.filter(objKeys, (function(_this) {
        return function(key) {
          return (key.substring(0, nsLength)) === _this.namespace;
        };
      })(this));
      if (_.isEmpty(objKeys)) {
        return null;
      }
      if (isObjectReturned) {
        obj = {};
        _.each(keys, (function(_this) {
          return function(key) {
            key = key.substring(nsLength + 1, key.length);
            return obj[key] = _this.get(key);
          };
        })(this));
        return this._cacheObject(obj);
      } else {
        arr = [];
        _.each(keys, (function(_this) {
          return function(key) {
            key = key.substring(nsLength + 1, key.length);
            return arr.push(_this.get(key));
          };
        })(this));
        return this._cacheArray(arr);
      }
    };

    Cache.prototype._cacheArray = function(array) {
      this.cachedArray = array;
      this.cachedArrayTime = new Date().getTime();
      return array;
    };

    Cache.prototype._cacheObject = function(object) {
      this.cachedObject = object;
      this.cachedObjectTime = new Date().getTime();
      return object;
    };

    Cache.prototype.isArrayExpired = function() {
      if (this.cachedArrayTime) {
        return this.cachedArrayTime >= this.latestSet;
      }
      return true;
    };

    Cache.prototype.isObjectExpired = function() {
      if (this.cachedObjectTime) {
        return this.cachedObjectTime >= this.latestSet;
      }
      return true;
    };

    Cache.prototype.isEmpty = function() {
      return Object.keys(this.storage) === null;
    };

    Cache.prototype.data = function() {
      return {
        namespace: this.namespace,
        latestSet: this.latestSet,
        latestSetAll: this.latestSetAll,
        latestSaveAll: this.latestSaveAll,
        latestSyncAll: this.latestSyncAll
      };
    };

    Cache.prototype.syncAll = function() {
      var allItemsFromBackend;
      if (this.backend) {
        allItemsFromBackend = this.backend({
          method: 'syncAll',
          items: this.all(true),
          data: this.data
        });
        if (allItemsFromBackend) {
          this.setAll(allItemsFromBackend);
        }
        return this.latestSyncAll = new Date().getTime();
      } else {
        throw new Error("(Cache)(syncAll): no backend is set");
      }
    };

    Cache.prototype.saveAll = function() {
      if (this.backend) {
        this.backend({
          method: 'saveAll',
          items: this.all(true),
          data: this.data
        });
        return this.latestSaveAll = new Date().getTime();
      } else {
        throw new Error('(Cache)(saveAll): no backend is set');
      }
    };

    return Cache;

  })();
});
