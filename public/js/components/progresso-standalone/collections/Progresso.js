// Generated by CoffeeScript 2.7.0
define(['../models/Resposta', '../models/Badge', '../collections/Badges'], function(RespostaModel, BadgeModel, BadgesColl) {
  var ProgressoManager;
  return ProgressoManager = (function() {
    class ProgressoManager extends Backbone.Collection {
      ['create'](resposta) {
        var res;
        console.log(resposta);
        res = this.add(resposta);
        console.log(this);
        // console.log """

        //     ###################
        //     CREATE
        //     ###################

        // """, res
        // @geral = do @calculaProgressoGeral
        // return unless App.user
        // @badgesConcedidos = new BadgesColl unless @badgesConcedidos
        // @badgesConcedidos.reset @temNovosBadges().models
        return this.saveLocal();
      }

      // @saveServer res
      saveLocal() {
        var local;
        if (!App.local) {
          return;
        }
        ({local} = App);
        console.log(this);
        if (this.length > 0) {
          return local.set("respostas-standalone", this.toJSON());
        } else {
          throw new Error();
        }
      }

      // saveServer: (res)->
      //   return unless App.socket
      //   App.socket.emit "respondeu", res.toJSON(), (data) ->
      //     console.log data
      ['initialize'](options) {
        // @badgesConcedidos = new BadgesColl
        // @badges = new BadgesColl App.badges.toJSON()
        this.bind('add', this.onModelAdded, this);
        this.bind('remove', this.onModelRemoved, this);
        this.bind('change reset', this.onChange, this);
        // @bind 'reset', @onReset, @
        this.atividades = this.getAllAtividades();
        this.casos = this.getAllCasos();
        this.testes = this.getAllTestes();
        return null;
      }

      ['onChange']() {
        var key;
        key = "respostas-standalone";
        console.log('change');
        if (App.local) {
          return App.local.set(key, this.toJSON());
        }
      }

      // throw new Error
      // @badgesConcedidos = @temNovosBadges()

        // 'onReset': () ->
      //   # throw new Error
      //   console.log  "@calculaProgressoGeral reset", arguments
      //   @geral = do @calculaProgressoGeral
      //   @badgesConcedidos = @temNovosBadges(yes)

        // 'setUser': (user)->
      //   @user = new Backbone.Model user
      //   @badgesConcedidos = new BadgesColl @temNovosBadges(yes).models
      //   @atividades = do @getAllAtividades
      //   @casos = do @getAllCasos
      //   @testes = do @getAllTestes
      ['getByAtividadeId'](id) {
        return _.sortBy(this.where({
          atividade: id
        }), 'seqid');
      }

      ['onModelAdded'](model, collection, options) {
        if (this.user) {
          model.set('user', this.user.get('cpf'));
        }
        model.set('modulo', window.modulo._id);
        if (model.seqid === 0) {
          return this.remove(this.filter(function(res) {
            return res.modulo === model.modulo;
          }));
        }
      }

      ['onModelRemoved'](model, collection, options) {}

      resolveCasosBloqueados() {}

      // console.log App.atividades.models.length, App.progresso.length, 'antes'
      // casosBloqueados = App.atividades.models.filter (a)->
      //   return a.get('bloqueado') == true
      // console.log casosBloqueados, 'casosBloqueados'

        // progressoBloqueado = []
      // for c in casosBloqueados
      //   cblo = c.get('_id')
      //   progressosAtiv = App.progresso.models.filter (m)-> 
      //     return m.get('atividade') == cblo
      //   progressoBloqueado = progressoBloqueado.concat progressosAtiv

        // console.log progressoBloqueado, 'progressoBloqueado'
      // App.progresso.remove(progressoBloqueado)

        // if casosBloqueados.length > 0
      //   App.atividades.remove(casosBloqueados)
      //   App.progresso.atividades = App.atividades.toJSON()
      calculaProgressoGeral(callback) {
        var _id, ativConcluida, ativEhDoNucleo, atividade, escore, geral, i, key, len, numAtiv, numAtivConcluido, numAtivConcluidos, numCasos, numCasosConcluidos, numCasosIniciados, numQuestoes, numQuestoesCaso, numQuestoesCasoRespondidas, numQuestoesTeste, numQuestoesTesteRespondidas, numTestes, numTestesConcluidos, numTestesConcluidosNucleo, numTestesIniciados, percAcertoPosTeste, percAcertoPreTeste, percAcertoTestesNucleo, percAtivConcluTotal, percAtivQuestRespTotal, percAtivQuestTotal, percAtivTotal, percCasosConcluTotal, percCasosRespTotal, percCasosTotal, percGeralAcertoCasos, percGeralAcertoTestes, percTestesConcluTotal, percTestesRespTotal, percTestesTotal, porAtividade, posTeste, preTeste, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade;
        this.resolveCasosBloqueados();
        if (!this.models) {
          // console.log "CalculaProgresso #{@conta++}"
          //@models  is  respostas
          return false;
        }
        //console.log @models,@models, 'modelos', App.atividades, @atividades
        posTeste = preTeste = false;
        percTestesTotal = percCasosRespTotal = percTestesRespTotal = percAtivQuestTotal = percAcertoPosTeste = percAcertoPreTeste = 0.0;
        numCasosIniciados = numTestes = numAtiv = numQuestoesCasoRespondidas = numQuestoesTesteRespondidas = numTestesConcluidos = 0.0;
        numQuestoesCaso = numQuestoes = numQuestoesTeste = numAtivConcluido = numCasos = numTestesIniciados = percCasosTotal = 0.0;
        numTestesConcluidosNucleo = numCasosConcluidos = percGeralAcertoCasos = percGeralAcertoTestes = percAtivTotal = 0.0;
        respostasPorAtividade = _.groupBy(this.models, function(item) {
          return item.get('atividade');
        });
// console.log @models
// console.log respostasPorAtividade, 'respostasPorAtividade'
//cicla groupby - para  cada atividade
        for (_id in respostasPorAtividade) {
          respostasDaAtividade = respostasPorAtividade[_id];
          //pega a atividade global pelo id
          atividade = _.findWhere(this.atividades, {_id});
          // console.log 'respostasDaAtividade', respostasDaAtividade
          //pega as questoes da atividade
          questoesDaAtividade = atividade.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          escore = 0.0;
          for (key = i = 0, len = respostasDaAtividade.length; i < len; key = ++i) {
            respAtiv = respostasDaAtividade[key];
            escore += respAtiv.get('escore');
          }
          escore = escore / respostasDaAtividade.length;
          ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
          ativEhDoNucleo = this.ehDoNucleo(atividade);
          //pega o numero de questoes caso/test - +length em questoes total e +1 no numCasos/numTest
          // console.log atividade
          // console.log atividade.tipo
          switch (atividade.tipo) {
            case 'caso':
              numCasosIniciados++;
              if (ativConcluida && ativEhDoNucleo) {
                numQuestoesCasoRespondidas += respostasDaAtividade.length;
                percGeralAcertoCasos += escore;
                numCasosConcluidos++;
              }
              break;
            case 'teste':
              numTestesIniciados++;
              //console.log ativConcluida, ativEhDoNucleo, atividade ,'Ã© teste porq nao entra no if'
              if (ativConcluida && ativEhDoNucleo) {
                numTestesConcluidosNucleo++;
                numQuestoesTesteRespondidas += respostasDaAtividade.length;
                percAcertoTestesNucleo += escore;
                percGeralAcertoTestes += escore;
                numTestesConcluidos++;
                if (atividade.posTeste) {
                  percAcertoPosTeste = escore;
                  posTeste = true;
                } else {
                  percAcertoPreTeste = escore;
                  preTeste = true;
                }
              }
          }
          if (ativConcluida) {
            //se concluida +1 em concluida
            numAtivConcluido++;
          }
        }
        // fim do for respostasPorAtividade
        numAtiv = (this.getAllAtividades()).length;
        numCasos = (this.getAllCasos()).length;
        numTestes = (this.getAllTestes()).length;
        numQuestoesTeste = (this.getQuestAllTestes()).length;
        numQuestoesCaso = (this.getQuestAllCasos()).length;
        numQuestoes = numQuestoesCaso + numQuestoesTeste;
        numAtivConcluidos = numTestesConcluidos + numCasosConcluidos;
        percCasosConcluTotal = this.calcPercentagem(numCasosConcluidos, numCasos);
        percCasosRespTotal = this.calcPercentagem(numQuestoesCasoRespondidas, numQuestoesCaso);
        percTestesConcluTotal = this.calcPercentagem(numTestesConcluidos, numTestes);
        percTestesRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas, numQuestoesTeste);
        percAtivConcluTotal = this.calcPercentagem(numAtivConcluidos, numAtiv);
        percAtivQuestRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas + numQuestoesCasoRespondidas, numQuestoesTeste + numQuestoesCaso);
        if (numTestesConcluidos > 0) {
          percGeralAcertoTestes = percGeralAcertoTestes / numTestesConcluidos;
        }
        if (numTestesConcluidosNucleo > 0) {
          percAcertoTestesNucleo = percAcertoTestesNucleo / numTestesConcluidosNucleo;
        }
        if (numCasosConcluidos > 0) {
          percGeralAcertoCasos = percGeralAcertoCasos / numCasosConcluidos;
        }
        porAtividade = this.getProgressoPorAtividades();
        geral = {percCasosRespTotal, percCasosConcluTotal, percTestesConcluTotal, percTestesRespTotal, percAcertoPosTeste, percAcertoPreTeste, percAtivConcluTotal, percAtivQuestRespTotal, numQuestoesTeste, numAtivConcluido, numCasos, numTestes, posTeste, preTeste, numQuestoesCaso, numTestesIniciados, numCasosIniciados, numTestesConcluidos, numQuestoesCasoRespondidas, numQuestoesCaso, numQuestoesTesteRespondidas, numTestesConcluidosNucleo, numAtiv, numCasosConcluidos, numQuestoes, percGeralAcertoTestes, percGeralAcertoCasos, porAtividade};
        this.geral = geral;
        if (callback) {
          callback();
        }
        return geral;
      }

      calcPercentagem(vparcial, vtotal) {
        var perc;
        if (vparcial === 0) {
          return 0.0;
        }
        return perc = parseFloat(100 * vparcial) / vtotal;
      }

      getAllAtividades() {
        return App.atividades.toJSON();
      }

      getAllCasos() {
        var nuc, self;
        self = this;
        try {
          nuc = self.user.get('profissional');
        } catch (error) {
          nuc = 0;
        }
        return App.casos.toJSON().filter(function(atividade) {
          if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
            return true;
          }
          if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
            return true;
          }
          if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
            return true;
          }
          return false;
        });
      }

      ehDoNucleo(atividade) {
        var nuc, self;
        self = this;
        nuc = self.user.get('profissional');
        if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
          return true;
        }
        if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
          return true;
        }
        if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
          return true;
        }
        return false;
      }

      getQuestAllCasos() {
        var casos, i, key, len, questUmcaso, questsCasos, val;
        casos = this.getAllCasos();
        questsCasos = [];
        for (key = i = 0, len = casos.length; i < len; key = ++i) {
          val = casos[key];
          questUmcaso = val.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          questsCasos = questsCasos.concat(questUmcaso);
        }
        return questsCasos;
      }

      getAllTestes() {
        var nuc, self;
        self = this;
        try {
          nuc = self.user.get('profissional');
        } catch (error) {
          nuc = 0;
        }
        return App.testes.toJSON().filter(function(atividade) {
          // console.log 'atividade.pro', atividade.pro
          if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
            return true;
          }
          if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
            return true;
          }
          if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
            return true;
          }
          return false;
        });
      }

      getQuestAllTestes() {
        var Tests, i, key, len, questUmcaso, questsTests, val;
        Tests = this.getAllTestes();
        questsTests = [];
        for (key = i = 0, len = Tests.length; i < len; key = ++i) {
          val = Tests[key];
          questUmcaso = val.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          questsTests = questsTests.concat(questUmcaso);
        }
        return questsTests;
      }

      getPercAtivTotal(numAtivConcluidos, numAtiv) {
        if (numAtivConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numAtivConcluidos) / numAtiv;
      }

      getPercCasosTotal(numCasosConcluidos, numCasos) {
        if (numCasosConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numCasosConcluidos) / numCasos;
      }

      getPercTestesTotal(numTestesConcluidos, numTeste) {
        if (numTestesConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numTestesConcluidos) / numTeste;
      }

      getProgressoPorAtividades() {
        var _id, ativConcluida, atividade, escore, i, key, len, numQuestoesRespondidas, numQuestoesTotais, percConclusao, porAtiv, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade;
        respostasPorAtividade = _.groupBy(this.models, function(item) {
          return item.get('atividade');
        });
        porAtiv = {};
        for (_id in respostasPorAtividade) {
          respostasDaAtividade = respostasPorAtividade[_id];
          //pega a atividade global pelo id
          atividade = _.findWhere(this.atividades, {_id});
          //if atividade._id is "537b80e241e46f4367000000"

          //console.log 'respostasDaAtividade', respostasDaAtividade
          //pega as questoes da atividade
          questoesDaAtividade = atividade.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          escore = 0.0;
          for (key = i = 0, len = respostasDaAtividade.length; i < len; key = ++i) {
            respAtiv = respostasDaAtividade[key];
            escore += respAtiv.get('escore');
          }
          escore = escore / respostasDaAtividade.length;
          ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
          numQuestoesRespondidas = respostasDaAtividade.length;
          numQuestoesTotais = questoesDaAtividade.length;
          percConclusao = this.calcPercentagem(numQuestoesRespondidas, numQuestoesTotais);
          //pega o numero de questoes caso/test - +length em questoes total e +1 no numCasos/numTest
          //se concluida +1 em concluida
          //numAtivConcluido++ if ativConcluida
          porAtiv[_id] = {escore, ativConcluida, numQuestoesTotais, numQuestoesRespondidas, percConclusao};
        }
        return this.geral.porAtividade = porAtiv;
      }

      temNovosBadges(silent = false) {
        var aConceder, acerto, aprovado, bad, badgesConcedidos, casos, d, i, ids, len, ref, self, tfinal;
        if (!this.badges) {
          return false;
        }
        self = this;
        // console.log @badges
        //numConcedidos = @badgesConcedidos.length
        badgesConcedidos = new BadgesColl();
        if (!silent) {
          badgesConcedidos = this.badgesConcedidos;
        }
        aConceder = new BadgesColl();
        // console.log badgesConcedidos
        this.badges.each(function(badge) {
          var asQueTem, ativ, foiDado, idAtividade, novoBadge, pool, ref, results, rules;
          // console.log badge.name
          //se tem id de atividade
          if (badge.get('idAtiv') === '') {
            ref = self.geral.porAtividade;
            //clica as atividades para ver se cada uma tem badge
            results = [];
            for (idAtividade in ref) {
              ativ = ref[idAtividade];
              // console.log badge.name
              // console.log idAtividade, ativ, 'umaAtiv'
              //verifica se tem badge para a atividade
              asQueTem = badge.get('rules').filter(function(regra) {
                // console.log badge.name
                return regra.test(ativ);
              });
              // console.log 'asQueTem', asQueTem.length, badge.get('rules').length
              //se merece badge
              if (asQueTem.length === badge.get('rules').length) {
                //verifica se jÃ¡ foi dado
                // console.log self.badgesConcedidos
                foiDado = badgesConcedidos.where({
                  _id: badge.get('_id'),
                  idAtiv: idAtividade
                });
                //se nÃ£o foi dado
                if (foiDado.length === 0) {
                  //da
                  rules = badge.get('rules');
                  badge.unset('rules');
                  novoBadge = badge.clone();
                  badge.set('rules', rules);
                  novoBadge.set('idAtiv', idAtividade);
                  // console.log 'novoBadge', novoBadge
                  aConceder.add(novoBadge);
                }
              }
              results.push(null);
            }
            return results;
          } else {
            // console.log self.geral, 'geral'
            pool = self.geral;
            if (!pool) {
              pool = self.calculaProgressoGeral();
            }
            asQueTem = badge.get('rules').filter(function(regra) {
              // console.log badge.name
              return regra.test(pool);
            });
            // console.log asQueTem, 'asQueTem'
            //se merece badge
            if (asQueTem.length === badge.get('rules').length) {
              foiDado = badgesConcedidos.where({
                _id: badge.get('_id')
              });
              // console.log foiDado, 'foiDado'
              //se nÃ£o foi dado
              if (foiDado.length === 0) {
                //da
                // console.log '-----------',badge
                return aConceder.add(badge);
              }
            }
          }
        });
        ref = aConceder.models;
        // console.log 'badgesConcedidos', badgesConcedidos, aConceder
        // console.log arguments
        for (i = 0, len = ref.length; i < len; i++) {
          bad = ref[i];
          if (bad instanceof BadgeModel) {
            // console.log bad
            badgesConcedidos.add(bad);
          }
        }
        if (!silent && aConceder.length > 0) {
          // console.log 'sdkfhasldkfhsalkjfhsad', aConceder
          ids = aConceder.map(function(badge) {
            return badge.get('_id');
          });
          Backbone.history.loadUrl(`comp/badge/concede/${ids.join(',')}`);
          d = self.geral;
          casos = d.percCasosConcluTotal;
          acerto = d.percGeralAcertoCasos;
          tfinal = d.percAcertoPosTeste;
          aprovado = casos >= 70 && acerto >= 70 && tfinal >= 70;
          console.log(casos, acerto, tfinal, aprovado);
        }
        // console.log badgesConcedidos
        return badgesConcedidos;
      }

    };

    ProgressoManager.prototype['model'] = RespostaModel;

    ProgressoManager.prototype['url'] = '';

    // console.log  "@calculaProgressoGeral onModelRemoved"
    // if App.socket and App.socket.connected
    //   App.socket.emit("reiniciou", model.toJSON())
    // @geral = do @calculaProgressoGeral
    // @badgesConcedidos.reset @temNovosBadges(yes).models
    ProgressoManager.prototype.conta = 0;

    ProgressoManager.prototype.geral = {};

    ProgressoManager.prototype.CONTABADGE = 0;

    return ProgressoManager;

  }).call(this);
});

//                                    Quantidades Totais Absolutas

//   numAtiv -----------------------> de Atividades
//   numCasos ----------------------> de Casos
//   numTestes ---------------------> de Testes
//   numQuestoesCaso ---------------> de QuestÃµes de Casos
//   numQuestoesTeste ---------------> de QuestÃµes de Testes

//                                    SomatÃ³rios Atuais

//   numCasosIniciados -------------> de Casos Iniciados ( ? deprecado )
//   numTestesIniciados ------------> de Testes Iniciados ( ? deprecado )
//   numAtivConcluido --------------> de Atividades ConcluÃ­das
//   numCasosConcluidos ------------> de Casos ConcluÃ­dos
//   numTestesConcluidos -----------> de QuestÃµes de Casos Respondidas
//   numQuestoesCasoRespondidas ----> de QuestÃµes de Casos Respondidas
//   numQuestoesTesteRespondidas ----> de QuestÃµes de Teste Respondidas

//                                    Percentuais Relativos Atuais

//   percAtivConcluTotal -----------> de Atividades ConcluÃ­dos do Total Absoluto de Atividades
//   percCasosConcluTotal ----------> de Casos ConcluÃ­dos do Total Absoluto de Casos
//   percTestesConcluTotal ---------> de Testes ConcluÃ­dos do Total
//   percAtivQuestTotal ------------> de QuestÃµes de Atividades ConcluÃ­das do Total de QuestÃµes
//   percCasosRespTotal ------------> de QuestÃµes de Casos Respondidas
//   percTestesRespTotal -----------> de QuestÃµes de Testes Respondidas
//   percGeralAcertoCasos ----------> de Acertos nas Respostas Ã s QuestÃµes dos Casos
//   percGeralAcertoTestes ---------> de Acertos nos Respostas Ã s QuestÃµes dos Testes

//                                    Por Atividade

//   porAtividade ------------------> Lista de Atividades (Casos e Testes)
//                                    {
//                                        < _id da atividade >: {
//                                            ativConcluida: false
//                                            escore: 50.5
//                                            numQuestoes: 4
//                                            numQuestoesRespondidas: 4
//                                            percConclusao: 66.66666666666667
//                                        },
//                                        { ... },
//                                        ...
//                                    }

