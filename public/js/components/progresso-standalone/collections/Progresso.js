// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../models/Resposta', '../models/Badge', '../collections/Badges'], function(RespostaModel, BadgeModel, BadgesColl) {
  var ProgressoManager;
  return ProgressoManager = (function(_super) {
    __extends(ProgressoManager, _super);

    function ProgressoManager() {
      return ProgressoManager.__super__.constructor.apply(this, arguments);
    }

    ProgressoManager.prototype['model'] = RespostaModel;

    ProgressoManager.prototype['url'] = '';

    ProgressoManager.prototype['create'] = function(resposta) {
      var res;
      console.log(resposta);
      res = this.add(resposta);
      console.log(this);
      return this.saveLocal();
    };

    ProgressoManager.prototype.saveLocal = function() {
      var local;
      if (!App.local) {
        return;
      }
      local = App.local;
      console.log(this);
      if (this.length > 0) {
        return local.set("respostas-standalone", this.toJSON());
      } else {
        throw new Error;
      }
    };

    ProgressoManager.prototype['initialize'] = function(options) {
      this.bind('add', this.onModelAdded, this);
      this.bind('remove', this.onModelRemoved, this);
      this.bind('change reset', this.onChange, this);
      this.atividades = this.getAllAtividades();
      this.casos = this.getAllCasos();
      this.testes = this.getAllTestes();
      return null;
    };

    ProgressoManager.prototype['onChange'] = function() {
      var key;
      key = "respostas-standalone";
      console.log('change');
      if (App.local) {
        return App.local.set(key, this.toJSON());
      }
    };

    ProgressoManager.prototype['getByAtividadeId'] = function(id) {
      return _.sortBy(this.where({
        atividade: id
      }), 'seqid');
    };

    ProgressoManager.prototype['onModelAdded'] = function(model, collection, options) {
      if (this.user) {
        model.set('user', this.user.get('cpf'));
      }
      model.set('modulo', window.modulo._id);
      if (model.seqid === 0) {
        return this.remove(this.filter(function(res) {
          return res.modulo === model.modulo;
        }));
      }
    };

    ProgressoManager.prototype['onModelRemoved'] = function(model, collection, options) {};

    ProgressoManager.prototype.conta = 0;

    ProgressoManager.prototype.resolveCasosBloqueados = function() {};

    ProgressoManager.prototype.calculaProgressoGeral = function(callback) {
      var ativConcluida, ativEhDoNucleo, atividade, escore, geral, key, numAtiv, numAtivConcluido, numAtivConcluidos, numCasos, numCasosConcluidos, numCasosIniciados, numQuestoes, numQuestoesCaso, numQuestoesCasoRespondidas, numQuestoesTeste, numQuestoesTesteRespondidas, numTestes, numTestesConcluidos, numTestesConcluidosNucleo, numTestesIniciados, percAcertoPosTeste, percAcertoPreTeste, percAcertoTestesNucleo, percAtivConcluTotal, percAtivQuestRespTotal, percAtivQuestTotal, percAtivTotal, percCasosConcluTotal, percCasosRespTotal, percCasosTotal, percGeralAcertoCasos, percGeralAcertoTestes, percTestesConcluTotal, percTestesRespTotal, percTestesTotal, porAtividade, posTeste, preTeste, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade, _i, _id, _len;
      this.resolveCasosBloqueados();
      if (!this.models) {
        return false;
      }
      posTeste = preTeste = false;
      percTestesTotal = percCasosRespTotal = percTestesRespTotal = percAtivQuestTotal = percAcertoPosTeste = percAcertoPreTeste = 0.0;
      numCasosIniciados = numTestes = numAtiv = numQuestoesCasoRespondidas = numQuestoesTesteRespondidas = numTestesConcluidos = 0.0;
      numQuestoesCaso = numQuestoes = numQuestoesTeste = numAtivConcluido = numCasos = numTestesIniciados = percCasosTotal = 0.0;
      numTestesConcluidosNucleo = numCasosConcluidos = percGeralAcertoCasos = percGeralAcertoTestes = percAtivTotal = 0.0;
      respostasPorAtividade = _.groupBy(this.models, function(item) {
        return item.get('atividade');
      });
      for (_id in respostasPorAtividade) {
        respostasDaAtividade = respostasPorAtividade[_id];
        atividade = _.findWhere(this.atividades, {
          _id: _id
        });
        questoesDaAtividade = atividade.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        escore = 0.0;
        for (key = _i = 0, _len = respostasDaAtividade.length; _i < _len; key = ++_i) {
          respAtiv = respostasDaAtividade[key];
          escore += respAtiv.get('escore');
        }
        escore = escore / respostasDaAtividade.length;
        ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
        ativEhDoNucleo = this.ehDoNucleo(atividade);
        switch (atividade.tipo) {
          case 'caso':
            numCasosIniciados++;
            if (ativConcluida && ativEhDoNucleo) {
              numQuestoesCasoRespondidas += respostasDaAtividade.length;
              percGeralAcertoCasos += escore;
              numCasosConcluidos++;
            }
            break;
          case 'teste':
            numTestesIniciados++;
            if (ativConcluida && ativEhDoNucleo) {
              numTestesConcluidosNucleo++;
              numQuestoesTesteRespondidas += respostasDaAtividade.length;
              percAcertoTestesNucleo += escore;
              percGeralAcertoTestes += escore;
              numTestesConcluidos++;
              if (atividade.posTeste) {
                percAcertoPosTeste = escore;
                posTeste = true;
              } else {
                percAcertoPreTeste = escore;
                preTeste = true;
              }
            }
        }
        if (ativConcluida) {
          numAtivConcluido++;
        }
      }
      numAtiv = (this.getAllAtividades()).length;
      numCasos = (this.getAllCasos()).length;
      numTestes = (this.getAllTestes()).length;
      numQuestoesTeste = (this.getQuestAllTestes()).length;
      numQuestoesCaso = (this.getQuestAllCasos()).length;
      numQuestoes = numQuestoesCaso + numQuestoesTeste;
      numAtivConcluidos = numTestesConcluidos + numCasosConcluidos;
      percCasosConcluTotal = this.calcPercentagem(numCasosConcluidos, numCasos);
      percCasosRespTotal = this.calcPercentagem(numQuestoesCasoRespondidas, numQuestoesCaso);
      percTestesConcluTotal = this.calcPercentagem(numTestesConcluidos, numTestes);
      percTestesRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas, numQuestoesTeste);
      percAtivConcluTotal = this.calcPercentagem(numAtivConcluidos, numAtiv);
      percAtivQuestRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas + numQuestoesCasoRespondidas, numQuestoesTeste + numQuestoesCaso);
      if (numTestesConcluidos > 0) {
        percGeralAcertoTestes = percGeralAcertoTestes / numTestesConcluidos;
      }
      if (numTestesConcluidosNucleo > 0) {
        percAcertoTestesNucleo = percAcertoTestesNucleo / numTestesConcluidosNucleo;
      }
      if (numCasosConcluidos > 0) {
        percGeralAcertoCasos = percGeralAcertoCasos / numCasosConcluidos;
      }
      porAtividade = this.getProgressoPorAtividades();
      geral = {
        percCasosRespTotal: percCasosRespTotal,
        percCasosConcluTotal: percCasosConcluTotal,
        percTestesConcluTotal: percTestesConcluTotal,
        percTestesRespTotal: percTestesRespTotal,
        percAcertoPosTeste: percAcertoPosTeste,
        percAcertoPreTeste: percAcertoPreTeste,
        percAtivConcluTotal: percAtivConcluTotal,
        percAtivQuestRespTotal: percAtivQuestRespTotal,
        numQuestoesTeste: numQuestoesTeste,
        numAtivConcluido: numAtivConcluido,
        numCasos: numCasos,
        numTestes: numTestes,
        posTeste: posTeste,
        preTeste: preTeste,
        numQuestoesCaso: numQuestoesCaso,
        numTestesIniciados: numTestesIniciados,
        numCasosIniciados: numCasosIniciados,
        numTestesConcluidos: numTestesConcluidos,
        numQuestoesCasoRespondidas: numQuestoesCasoRespondidas,
        numQuestoesCaso: numQuestoesCaso,
        numQuestoesTesteRespondidas: numQuestoesTesteRespondidas,
        numTestesConcluidosNucleo: numTestesConcluidosNucleo,
        numAtiv: numAtiv,
        numCasosConcluidos: numCasosConcluidos,
        numQuestoes: numQuestoes,
        percGeralAcertoTestes: percGeralAcertoTestes,
        percGeralAcertoCasos: percGeralAcertoCasos,
        porAtividade: porAtividade
      };
      this.geral = geral;
      if (callback) {
        callback();
      }
      return geral;
    };

    ProgressoManager.prototype.calcPercentagem = function(vparcial, vtotal) {
      var perc;
      if (vparcial === 0) {
        return 0.0;
      }
      return perc = parseFloat(100 * vparcial) / vtotal;
    };

    ProgressoManager.prototype.getAllAtividades = function() {
      return App.atividades.toJSON();
    };

    ProgressoManager.prototype.getAllCasos = function() {
      var nuc, self;
      self = this;
      try {
        nuc = self.user.get('profissional');
      } catch (_error) {
        nuc = 0;
      }
      return App.casos.toJSON().filter(function(atividade) {
        if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
          return true;
        }
        if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
          return true;
        }
        if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
          return true;
        }
        return false;
      });
    };

    ProgressoManager.prototype.ehDoNucleo = function(atividade) {
      var nuc, self;
      self = this;
      nuc = self.user.get('profissional');
      if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
        return true;
      }
      if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
        return true;
      }
      if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
        return true;
      }
      return false;
    };

    ProgressoManager.prototype.getQuestAllCasos = function() {
      var casos, key, questUmcaso, questsCasos, val, _i, _len;
      casos = this.getAllCasos();
      questsCasos = [];
      for (key = _i = 0, _len = casos.length; _i < _len; key = ++_i) {
        val = casos[key];
        questUmcaso = val.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        questsCasos = questsCasos.concat(questUmcaso);
      }
      return questsCasos;
    };

    ProgressoManager.prototype.getAllTestes = function() {
      var nuc, self;
      self = this;
      try {
        nuc = self.user.get('profissional');
      } catch (_error) {
        nuc = 0;
      }
      return App.testes.toJSON().filter(function(atividade) {
        if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
          return true;
        }
        if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
          return true;
        }
        if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
          return true;
        }
        return false;
      });
    };

    ProgressoManager.prototype.getQuestAllTestes = function() {
      var Tests, key, questUmcaso, questsTests, val, _i, _len;
      Tests = this.getAllTestes();
      questsTests = [];
      for (key = _i = 0, _len = Tests.length; _i < _len; key = ++_i) {
        val = Tests[key];
        questUmcaso = val.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        questsTests = questsTests.concat(questUmcaso);
      }
      return questsTests;
    };

    ProgressoManager.prototype.getPercAtivTotal = function(numAtivConcluidos, numAtiv) {
      if (numAtivConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numAtivConcluidos) / numAtiv;
    };

    ProgressoManager.prototype.getPercCasosTotal = function(numCasosConcluidos, numCasos) {
      if (numCasosConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numCasosConcluidos) / numCasos;
    };

    ProgressoManager.prototype.getPercTestesTotal = function(numTestesConcluidos, numTeste) {
      if (numTestesConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numTestesConcluidos) / numTeste;
    };

    ProgressoManager.prototype.getProgressoPorAtividades = function() {
      var ativConcluida, atividade, escore, key, numQuestoesRespondidas, numQuestoesTotais, percConclusao, porAtiv, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade, _i, _id, _len;
      respostasPorAtividade = _.groupBy(this.models, function(item) {
        return item.get('atividade');
      });
      porAtiv = {};
      for (_id in respostasPorAtividade) {
        respostasDaAtividade = respostasPorAtividade[_id];
        atividade = _.findWhere(this.atividades, {
          _id: _id
        });
        questoesDaAtividade = atividade.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        escore = 0.0;
        for (key = _i = 0, _len = respostasDaAtividade.length; _i < _len; key = ++_i) {
          respAtiv = respostasDaAtividade[key];
          escore += respAtiv.get('escore');
        }
        escore = escore / respostasDaAtividade.length;
        ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
        numQuestoesRespondidas = respostasDaAtividade.length;
        numQuestoesTotais = questoesDaAtividade.length;
        percConclusao = this.calcPercentagem(numQuestoesRespondidas, numQuestoesTotais);
        porAtiv[_id] = {
          escore: escore,
          ativConcluida: ativConcluida,
          numQuestoesTotais: numQuestoesTotais,
          numQuestoesRespondidas: numQuestoesRespondidas,
          percConclusao: percConclusao
        };
      }
      return this.geral.porAtividade = porAtiv;
    };

    ProgressoManager.prototype.geral = {};

    ProgressoManager.prototype.CONTABADGE = 0;

    ProgressoManager.prototype.temNovosBadges = function(silent) {
      var aConceder, acerto, aprovado, bad, badgesConcedidos, casos, d, ids, self, tfinal, _i, _len, _ref;
      if (silent == null) {
        silent = false;
      }
      if (!this.badges) {
        return false;
      }
      self = this;
      badgesConcedidos = new BadgesColl();
      if (!silent) {
        badgesConcedidos = this.badgesConcedidos;
      }
      aConceder = new BadgesColl();
      this.badges.each(function(badge) {
        var asQueTem, ativ, foiDado, idAtividade, novoBadge, pool, rules, _ref, _results;
        if (badge.get('idAtiv') === '') {
          _ref = self.geral.porAtividade;
          _results = [];
          for (idAtividade in _ref) {
            ativ = _ref[idAtividade];
            asQueTem = badge.get('rules').filter(function(regra) {
              return regra.test(ativ);
            });
            if (asQueTem.length === badge.get('rules').length) {
              foiDado = badgesConcedidos.where({
                _id: badge.get('_id'),
                idAtiv: idAtividade
              });
              if (foiDado.length === 0) {
                rules = badge.get('rules');
                badge.unset('rules');
                novoBadge = badge.clone();
                badge.set('rules', rules);
                novoBadge.set('idAtiv', idAtividade);
                aConceder.add(novoBadge);
              }
            }
            _results.push(null);
          }
          return _results;
        } else {
          pool = self.geral;
          if (!pool) {
            pool = self.calculaProgressoGeral();
          }
          asQueTem = badge.get('rules').filter(function(regra) {
            return regra.test(pool);
          });
          if (asQueTem.length === badge.get('rules').length) {
            foiDado = badgesConcedidos.where({
              _id: badge.get('_id')
            });
            if (foiDado.length === 0) {
              return aConceder.add(badge);
            }
          }
        }
      });
      _ref = aConceder.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bad = _ref[_i];
        if (bad instanceof BadgeModel) {
          badgesConcedidos.add(bad);
        }
      }
      if (!silent && aConceder.length > 0) {
        ids = aConceder.map(function(badge) {
          return badge.get('_id');
        });
        Backbone.history.loadUrl("comp/badge/concede/" + (ids.join(',')));
        d = self.geral;
        casos = d.percCasosConcluTotal;
        acerto = d.percGeralAcertoCasos;
        tfinal = d.percAcertoPosTeste;
        aprovado = casos >= 70 && acerto >= 70 && tfinal >= 70;
        console.log(casos, acerto, tfinal, aprovado);
      }
      return badgesConcedidos;
    };

    return ProgressoManager;

  })(Backbone.Collection);
});
