// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../models/Paciente', '../collections/SlidesColl', './SlidesCollView', './IntroboxView', './PacienteView', 'utils'], function(PacienteModel, SlidesColl, SlidesCollView, IntroboxView, PacienteView, utils) {
  var Caso;
  Caso = (function(_super) {
    __extends(Caso, _super);

    function Caso() {
      return Caso.__super__.constructor.apply(this, arguments);
    }

    Caso.prototype.className = 'caso-main container';

    Caso.prototype.initialize = function() {};

    Caso.prototype.getRespostasDeste = function() {
      var respostas, _ref;
      console.log("'caso' -> " + (this.model.get('_id')));
      if (!(App.user && ((_ref = App.user) != null ? _ref.progresso : void 0))) {
        return null;
      }
      respostas = App.user.progresso.getByAtividadeId(this.model.get('_id'));
      if (respostas.length > 0) {
        this.model.set({
          respostas: respostas
        });
        this.assinalaMarcadas();
        return this.trigger('novasRespostas');
      }
    };

    Caso.prototype.template = '#caso-main';

    Caso.prototype.ui = {
      estResp: '.caso #estadoResposta',
      confirmaReset: '.caso #estadoResposta #confirmaRecomeca'
    };

    Caso.prototype.events = {
      'click @ui.estResp #btnRecomeca': 'confirmaRecomeca',
      'click @ui.estResp #btnContinua': 'vaiPraQuestaoDaVez'
    };

    Caso.prototype.confirmaRecomeca = function() {
      var self;
      self = this;
      console.log(this.ui.confirmaReset);
      this.ui.confirmaReset.modal({
        keyboard: false
      });
      return this.ui.confirmaReset.find('#delete').on('click', function() {
        var respDest, resposta, _i, _len;
        self.ui.confirmaReset.modal('hide');
        respDest = App.user.progresso.getByAtividadeId(self.model.get('_id'));
        for (_i = 0, _len = respDest.length; _i < _len; _i++) {
          resposta = respDest[_i];
          resposta.destroy();
        }
        App.user.progresso.calculaProgressoGeral();
        App.user.progresso.trigger('change');
        self.model.unset('respostas');
        self.rodapeReg.currentView.model.unset('respostas');
        App.layoutInicial.contents.currentView.render();
        self.rodapeReg.currentView.render();
        $('.modal-backdrop').removeClass('in').addClass('out').one('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd', function() {
          $('body').removeClass('modal-open');
          return $('.modal-backdrop').remove();
        });
        return true;
      });
    };

    Caso.prototype.vaiPraQuestaoDaVez = function() {
      return $('body').animate({
        scrollTop: $("section.slide.daVez").offset().top - 85
      }, 1000);
    };

    Caso.prototype.onRender = function() {
      var handlerAtualizaProgresso, slidesView, _this;
      this.paciente = new PacienteModel(this.model.get('paciente'));
      this.allSlides = new SlidesColl(this.model.get('slides'), this.paciente, this.model);
      this.addRegions({
        introReg: '.caso #introducao',
        pacienteReg: '.caso #pacienteTopo',
        slidesReg: '.caso #slidesLista'
      });
      this.pacienteReg.show(new PacienteView({
        model: this.paciente
      }));
      this.introReg.show(new IntroboxView({
        model: this.model
      }));
      slidesView = new SlidesCollView({
        collection: new SlidesColl(this.model.get('slides').slice(1), this.paciente, this.model)
      });
      this.slidesReg.show(slidesView);
      _this = this;
      handlerAtualizaProgresso = function() {
        this.getRespostasDeste();
        return this.rodapeReg.currentView.render();
      };
      this.listenTo(App.user.progresso, 'fetched', handlerAtualizaProgresso);
      this.listenTo(App.user.progresso, 'change', handlerAtualizaProgresso);
      return this.getRespostasDeste();
    };

    Caso.prototype['assinalaMarcadas'] = function() {
      var casoId, mediaG, questoes, respostas, self, slides, soma, texto;
      self = this;
      if (!this.slidesReg) {
        setTimeout(function() {
          return self.assinalaMarcadas;
        }, 300);
        return null;
      }
      casoId = this.model.get('_id');
      slides = this.slidesReg.currentView.children;
      respostas = this.model.get('respostas');
      if (!slides) {
        return null;
      }
      questoes = slides.filter(function(view) {
        return view.model.get('tipo').match(/questao.*/ig);
      });
      soma = respostas.reduce(function(memo, resp) {
        return memo + resp.get('escore');
      }, 0);
      mediaG = soma / respostas.length;
      texto = '';
      this.ui.estResp.find('.mensagem').empty();
      if (respostas.length === questoes.length) {
        this.ui.estResp.find('#btnContinua').hide();
        this.ui.estResp.find('#btnRecomeca').removeClass('btn-xs').addClass('btn-sm');
        texto = "Você já respondeu todas as " + questoes.length + " questões deste caso.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        texto = "Sua média de acertos final foi de " + (mediaG.toFixed(2).replace('.', ',')) + "%.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
      } else {
        texto = "Você já respondeu " + respostas.length + " das " + questoes.length + " questões deste caso.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        texto = "Sua média de acertos até agora é de " + (mediaG.toFixed(2).replace('.', ',')) + "%.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
      }
      this.ui.estResp.removeClass('hide').show();
      return respostas.forEach(function(resposta) {
        var e, marca, marcadas, opcs, quest, seqid, _i, _len;
        seqid = resposta.get('seqid');
        quest = questoes[seqid];
        opcs = quest.$el.find('.opcoes');
        marcadas = resposta.get('marcadas');
        for (_i = 0, _len = marcadas.length; _i < _len; _i++) {
          marca = marcadas[_i];
          e = opcs.find("[data-originalidx=\"" + marca + "\"]:input");
          e.attr('checked', true);
          e.parent().removeClass('unchecked').addClass('checked');
        }
        quest.silent = true;
        return quest.ui.btnResp.click();
      });
    };

    return Caso;

  })(Marionette.LayoutView);
  return Caso;
});
