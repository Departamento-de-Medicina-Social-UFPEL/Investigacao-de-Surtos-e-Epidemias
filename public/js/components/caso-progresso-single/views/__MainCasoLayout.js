// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../models/Paciente', '../collections/SlidesColl', './SlidesColl', './Introbox', './Paciente', 'utils'], function(PacienteModel, SlidesColl, SlidesCollView, IntroboxView, PacienteView, utils) {
  var CasoView;
  CasoView = (function(_super) {
    __extends(CasoView, _super);

    function CasoView() {
      return CasoView.__super__.constructor.apply(this, arguments);
    }

    CasoView.prototype.className = 'caso-main container';

    CasoView.prototype.initialize = function() {
      var status, _ref;
      status = {
        'status': 'attended',
        'percentage': 0,
        'LTIvalue': 0
      };
      if (!window.unasus) {
        return;
      }
      if (!((_ref = unasus.pack) != null ? _ref.getStatus() : void 0)) {
        return unasus.pack.setStatus(status);
      }
    };

    CasoView.prototype.template = '#caso-progresso-single-main';

    CasoView.prototype.ui = {
      estResp: '.caso #estadoResposta',
      confirmaReset: '.caso #estadoResposta #confirmaRecomeca'
    };

    CasoView.prototype.events = {
      'click @ui.estResp #btnRecomeca': 'confirmaRecomeca',
      'click @ui.estResp #btnContinua': 'vaiPraQuestaoDaVez'
    };

    CasoView.prototype.vaiPraQuestaoDaVez = function() {
      var page;
      page = $('html, body');
      page.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove", function() {
        page.stop();
        return page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
      });
      return page.animate({
        scrollTop: $("section.slide.daVez").offset().top - 85
      }, 2000, function() {
        return page.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove");
      });
    };

    CasoView.prototype.confirmaRecomeca = function() {
      var self, status;
      self = this;
      if (typeof unasus !== "undefined" && unasus !== null ? unasus.pack : void 0) {
        status = {
          'status': 'attended',
          'percentage': 0,
          'LTIvalue': 0
        };
        unasus.pack.setStatus(status);
      }
      this.ui.confirmaReset.modal({
        keyboard: false
      });
      return this.ui.confirmaReset.find('#delete').on('click', function() {
        var page, respDest, resposta, _i, _len;
        respDest = App.progresso.getByAtividadeId(self.model.get('_id'));
        for (_i = 0, _len = respDest.length; _i < _len; _i++) {
          resposta = respDest[_i];
          resposta.destroy();
        }
        App.progresso.calculaProgressoGeral();
        App.progresso.trigger('change');
        page = $('html, body');
        page.removeClass('modal-open');
        return Backbone.history.loadUrl(Backbone.history.fragment);
      });
    };

    CasoView.prototype.onRender = function() {
      var handlerAtualizaProgresso, slides, slidesView, _this;
      this.paciente = new PacienteModel(this.model.get('paciente'));
      this.allSlides = new SlidesColl(this.model.get('slides'), this.paciente, this.model);
      this.addRegions({
        introReg: '.caso #introducao',
        pacienteReg: '.caso #pacienteTopo',
        slidesReg: '.caso #slidesLista'
      });
      if (this.model.get('paciente')) {
        this.pacienteReg.show(new PacienteView({
          model: this.paciente
        }));
      }
      this.introReg.show(new IntroboxView({
        model: this.model
      }));
      slides = this.model.get('slides');
      if (slides[0].tipo === 'intro') {
        slides = slides.slice(1);
      }
      slidesView = new SlidesCollView({
        collection: new SlidesColl(slides, this.paciente, this.model)
      });
      this.slidesReg.show(slidesView);
      _this = this;
      handlerAtualizaProgresso = function() {
        return this.getRespostasDeste();
      };
      this.listenTo(App.progresso, 'fetched change', handlerAtualizaProgresso);
      setTimeout(function() {
        return $.material.init();
      }, 10);
      this.ajustaHeader();
      return this.getRespostasDeste();
    };

    CasoView.prototype.ajustaHeader = function() {
      var cor, e, etiqueta, m, o, pro, style, tag;
      pro = this.model.get('pro');
      e = pro[0], m = pro[1], o = pro[2];
      cor = (function() {
        switch (true) {
          case e && m:
            return 'linear-gradient(90deg, #0091D6 10px, #378A33 27px)';
          case e:
            return '#0091D6';
          case m:
            return '#378A33';
          case o:
            return '#DB160F';
        }
      })();
      console.log(pro, cor, cor.length);
      etiqueta = $('.navbar-brand .pro-tag');
      if (etiqueta.length === 0) {
        tag = "" + (e ? 'E ' : '') + (m ? 'M ' : '') + (o ? 'O' : '');
        style = {
          'background': cor,
          'padding-left': '5px',
          'padding-right': '5px',
          'margin-right': '5px',
          'padding-bottom': '1px',
          'font-weight': 'bold',
          'border-radius': '4px'
        };
        tag = $('<span></span>').addClass('pro-tag').html(tag.trim()).css(style);
        if (cor.length === 7) {
          tag.addClass('single-child');
        }
        return $('.navbar-brand').prepend(tag);
      }
    };

    CasoView.prototype.getRespostasDeste = function() {
      var respostas;
      respostas = App.progresso.getByAtividadeId(this.model.get('_id'));
      console.log(respostas);
      if (respostas.length > 0) {
        this.model.set({
          respostas: respostas
        });
        this.assinalaMarcadas();
        return this.trigger('novasRespostas');
      }
    };

    CasoView.prototype['assinalaMarcadas'] = function() {
      var casoId, mediaG, persist, questoes, respostas, self, slides, soma, texto;
      self = this;
      if (!this.slidesReg) {
        setTimeout(function() {
          return self.assinalaMarcadas;
        }, 100);
        return null;
      }
      casoId = this.model.get('_id');
      slides = this.slidesReg.currentView.children;
      respostas = this.model.get('respostas');
      if (!slides) {
        return null;
      }
      questoes = slides.filter(function(view) {
        return view.model.get('tipo').match(/questao.*/ig);
      });
      soma = respostas.reduce(function(memo, resp) {
        return memo + resp.get('escore');
      }, 0);
      mediaG = soma / respostas.length;
      texto = '';
      this.ui.estResp.find('.mensagem').empty();
      persist = {
        'status': 'attempted',
        'percentage': 0,
        'LTIvalue': 0
      };
      if (respostas.length === questoes.length) {
        this.ui.estResp.find('#btnContinua').hide();
        this.ui.estResp.find('#btnRecomeca').removeClass('btn-xs').addClass('btn-sm');
        texto = "Você já respondeu todas as " + questoes.length + " questões deste caso.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        texto = "Sua média de acertos final foi de " + (mediaG.toFixed(2).replace('.', ',')) + "%.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        persist.status = mediaG >= 70 ? 'passed' : 'failed';
        persist.percentage = 100;
      } else {
        persist.status = 'attempted';
        persist.percentage = parseInt((respostas.length / questoes.length) * 100);
        texto = "Você já respondeu " + respostas.length + " das " + questoes.length + " questões deste caso.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
        texto = "Sua média de acertos até agora é de " + (mediaG.toFixed(2).replace('.', ',')) + "%.";
        this.ui.estResp.find('.mensagem').append($('<p></p>').text(texto));
      }
      if (typeof unasus !== "undefined" && unasus !== null ? unasus.pack : void 0) {
        persist.LTIvalue = mediaG / 100;
        unasus.pack.setStatus(persist);
      }
      this.ui.estResp.removeClass('hide').show();
      return respostas.forEach(function(resposta) {
        var e, marca, marcadas, opcs, quest, seqid, _i, _len;
        seqid = resposta.get('seqid');
        quest = questoes[seqid];
        opcs = quest.$el.find('.opcoes');
        marcadas = resposta.get('marcadas');
        for (_i = 0, _len = marcadas.length; _i < _len; _i++) {
          marca = marcadas[_i];
          e = opcs.find("[data-originalidx=\"" + marca + "\"]:input");
          e.attr('checked', true);
          e.parent().removeClass('unchecked').addClass('checked');
        }
        quest.silent = true;
        quest.tocado();
        return quest.ui.btnResp.click();
      });
    };

    return CasoView;

  })(Marionette.LayoutView);
  return CasoView;
});
