// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../models/Monitoramento'], function(Monitoramento) {
  var Monitoramentos;
  return Monitoramentos = (function(_super) {
    __extends(Monitoramentos, _super);

    function Monitoramentos() {
      return Monitoramentos.__super__.constructor.apply(this, arguments);
    }

    Monitoramentos.prototype['model'] = Monitoramento;

    Monitoramentos.prototype['url'] = '';

    Monitoramentos.prototype['initialize'] = function(options) {};

    Monitoramentos.prototype['addAmostra'] = function(a) {
      var dados, jaexiste, l, self;
      l = this.get(a.id_local);
      dados = l.get('dados');
      self = this;
      dados.forEach(function(d) {
        var dt_fim_a, dt_fim_d, dt_ini_a, dt_ini_d;
        if (l.get('tipo') === 'diario') {
          if (a.periodoInicio === d.periodoInicio && (a.id !== d.id || !a.id)) {
            throw "Já existem dados na base para o dia informado!";
          }
        } else {
          dt_ini_a = new Date(self.getDateInternational(a.periodoInicio));
          dt_fim_a = new Date(self.getDateInternational(a.periodoFim));
          dt_ini_d = new Date(self.getDateInternational(d.periodoInicio));
          dt_fim_d = new Date(self.getDateInternational(d.periodoFim));
          if (dt_ini_a >= dt_ini_d && dt_ini_a <= dt_fim_d && (a.id !== d.id || !a.id)) {
            console.log(dt_ini_a, 'data entrando');
            console.log(dt_ini_d, ' data ja estva ', dt_fim_d);
            console.log(' a d ids ', a.id, d.id, !a.id);
            throw "A data do início do período está superposta a um período inserido anteriormente!";
          }
          if (dt_fim_a >= dt_ini_d && dt_fim_a <= dt_fim_d && (a.id !== d.id || !a.id)) {
            throw "A data de fim do período está superposta a um período inserido anteriormente!";
          }
          if (dt_fim_a <= dt_ini_d && dt_fim_a >= dt_fim_d && (a.id !== d.id || !a.id)) {
            throw "O periodo da amostra esta contendo uma outra amostra já inserida!";
          }
        }
      });
      if (!a.id) {
        a['id'] = a.id_local + '_' + (a.periodoInicio.split('/').join('_'));
      }
      jaexiste = false;
      dados = dados.map((function(_this) {
        return function(d) {
          if (d.id === a.id) {
            jaexiste = true;
            return a;
          } else {
            return d;
          }
        };
      })(this));
      if (!jaexiste) {
        dados.push(a);
      }
      l.set('dados', dados);
      return this.update(l);
    };

    Monitoramentos.prototype['create'] = function(l) {
      l.dados = [];
      if (!l.tipo) {
        l['tipo'] = 'dia';
      }
      console.log(l, 'moni', l['tipo']);
      this.add(l);
      this.saveLocal();
      this.saveServer(l);
      return this.get(l.id);
    };

    Monitoramentos.prototype['update'] = function(l) {
      this.models = this.models.map((function(_this) {
        return function(m) {
          if (l.get('id') === m.get('id')) {
            m = l;
          }
          return m;
        };
      })(this));
      console.log('update', l.get('dados'));
      this.saveLocal();
      return this.saveServer(l.toJSON());
    };

    Monitoramentos.prototype['excluir'] = function(id) {
      var local;
      local = this.remove(id);
      this.removeServer(id);
      return this.saveLocal();
    };

    Monitoramentos.prototype.saveLocal = function() {
      var local, user;
      if (!App.local) {
        return;
      }
      local = App.local, user = App.user;
      return local.set("monitoramento-" + user.cpf, this.toJSON());
    };

    Monitoramentos.prototype.removeServer = function(id) {
      if (!App.socket) {
        return;
      }
      return App.socket.emit("desmonitorou", id, function(data) {
        return console.log(data, 'removeu?');
      });
    };

    Monitoramentos.prototype.saveServer = function(res) {
      if (!App.socket) {
        return;
      }
      return App.socket.emit("monitorou", res, function(data) {
        return console.log(data);
      });
    };

    Monitoramentos.prototype.getDateInternational = function(strDate) {
      var c;
      strDate = strDate.split('/');
      c = strDate[0];
      strDate[0] = strDate[1];
      strDate[1] = c;
      return strDate.join('/');
    };

    return Monitoramentos;

  })(Backbone.Collection);
});
