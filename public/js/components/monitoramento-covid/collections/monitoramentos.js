// Generated by CoffeeScript 2.7.0
define(['../models/Monitoramento'], function(Monitoramento) {
  var Monitoramentos;
  return Monitoramentos = (function() {
    class Monitoramentos extends Backbone.Collection {
      ['initialize'](options) {}

      //   @bind 'add', @onModelAdded, @
      //   @bind 'remove', @onModelRemoved, @
      //   @bind 'change reset', @onChange, @
      //   @bind 'reset', @onReset, @
      //   null
      // onModelAdded:()->
      // onModelRemoved:()->
      // onChange:()->
      // onReset:()->
      ['addAmostra'](a) {
        var dados, jaexiste, l;
        l = this.get(a.id_local);
        dados = l.get('dados');
        dados.forEach(function(d) {
          var dt_fim_a, dt_fim_d, dt_ini_a, dt_ini_d;
          if (l.tipo === 'dia') {
            if (a.periodoInicio === d.periodoInicio) {
              throw "J치 existe dados na base para o dia informado!";
            }
          } else {
            dt_ini_a = new Date(a.periodoInicio);
            dt_fim_a = new Date(a.periodoFim);
            dt_ini_d = new Date(a.periodoInicio);
            dt_fim_d = new Date(a.periodoFim);
            if (dt_ini_a >= dt_ini_d && dt_ini_a <= dt_fim_d) {
              throw "A data de inicio da amostra esta coberto por outra amostra j치 inserida!";
            }
            if (dt_fim_a >= dt_ini_d && dt_fim_a <= dt_fim_d) {
              throw "A data de fim da amostra esta coberto por outra amostra j치 inserida!";
            }
            if (dt_fim_a <= dt_ini_d && dt_fim_a >= dt_fim_d) {
              throw "Operiodo da amostra esta contendo uma outra amostra j치 inserida!";
            }
          }
        });
        if (!a.id) {
          a['id'] = a.id_local + '_' + (a.periodoInicio.split('/').join('_'));
        }
        jaexiste = false;
        dados = dados.map((d) => {
          if (d.id === a.id) {
            jaexiste = true;
            return a;
          } else {
            return d;
          }
        });
        if (!jaexiste) {
          dados.push(a);
        }
        l.set('dados', dados);
        return this.update(l);
      }

      ['create'](l) {
        l.dados = [];
        if (!l.tipo) {
          l['tipo'] = 'dia';
        }
        console.log(l, 'moni', l['tipo']);
        this.add(l);
        this.saveLocal();
        //@saveServer res
        return this.get(l.id);
      }

      ['update'](l) {
        this.models = this.models.map((m) => {
          if (l.get('id') === m.get('id')) {
            m = l;
          }
          return m;
        });
        console.log('update', l.get('dados'));
        return this.saveLocal();
      }

      ['excluir'](id) {
        var local;
        local = this.remove(id);
        return this.saveLocal();
      }

      saveLocal() {
        var local, user;
        if (!App.local) {
          return;
        }
        ({local, user} = App);
        return local.set(`monitoramento-${user.cpf}`, this.toJSON());
      }

      saveServer(res) {
        if (!App.socket) {
          return;
        }
        return App.socket.emit("monitorou", res.toJSON(), function(data) {
          return console.log(data);
        });
      }

    };

    Monitoramentos.prototype['model'] = Monitoramento;

    Monitoramentos.prototype['url'] = '';

    return Monitoramentos;

  }).call(this);
});
