// Generated by CoffeeScript 1.8.0
var getDadosMediaContatoLocal, getDadosMotivosContatoDescartadoDecimoQuartoDiaLocal, getDadosMotivosContatoDescartadoSegundoDiaLocal, getDadosNrMonitoramentosLocal, getDadosNrMotivosEncerramentoLocal, getDadosSituacaoMonitoramentoLocal, getDadosTiposRelacaoContatoLocal, getPorcentagem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['./MonitoramentoItemView'], function(MonitoramentoItemView) {
  var LocalView;
  LocalView = (function(_super) {
    __extends(LocalView, _super);

    function LocalView() {
      return LocalView.__super__.constructor.apply(this, arguments);
    }

    LocalView.prototype.childView = MonitoramentoItemView;

    LocalView.prototype.childViewContainer = '.amostras';

    LocalView.prototype.initialize = function() {
      var self;
      console.log(this.model, 'modelo local');
      self = this;
      return this.getCollectionDados();
    };

    LocalView.prototype.className = ' container';

    LocalView.prototype.template = '#monitoramento-covid-local';

    LocalView.prototype.ui = {
      'btnGraficos': '.btn-graficos',
      'amostras': '.amostras',
      'corpoGraficos': '.graficos-locais',
      'up': '.glyphicon-chevron-up',
      'down': '.glyphicon-chevron-down'
    };

    LocalView.prototype.events = {
      'click @ui.btnGraficos': 'graficos'
    };

    LocalView.prototype.modelEvents = {
      'change': 'modelChanged'
    };

    LocalView.prototype.modelChanged = function() {
      return this.getCollectionDados();
    };

    LocalView.prototype.getCollectionDados = function() {
      var self;
      self = this;
      this.collection = new Backbone.Collection(this.model.get('dados').map(function(d) {
        d['tipo'] = self.model.get('tipo');
        return d;
      }));
      this.collection.comparator = function(i) {
        return new Date(self.getDateInternational(i.get('periodoInicio')));
      };
      return this.collection.sort();
    };

    LocalView.prototype.graficos = function() {
      var dia, dia2, modelo;
      if (this.$el.find('.icon-grafico-local.glyphicon-chevron-up:visible').length > 0) {
        this.ui.corpoGraficos.show();
        this.$el.find('.icon-grafico-local').addClass('glyphicon-chevron-down').removeClass('glyphicon-chevron-up');
      } else {
        this.$el.find('.icon-grafico-local').addClass('glyphicon-chevron-up').removeClass('glyphicon-chevron-down');
        this.ui.corpoGraficos.hide();
        return;
      }
      modelo = this.model.attributes;
      this.getGraficoBarras('media-contatos', getDadosMediaContatoLocal(modelo));
      this.getGraficoSobreposto('situacao', getDadosSituacaoMonitoramentoLocal(modelo));
      this.getGraficoSobreposto('relacao', getDadosTiposRelacaoContatoLocal(modelo));
      this.getGraficoSobreposto('motivos-encerramento', getDadosNrMotivosEncerramentoLocal(modelo));
      dia = getDadosMotivosContatoDescartadoSegundoDiaLocal(modelo);
      this.getGraficoSobreposto('motivos-contato-descartado-segundo-dia', dia);
      dia2 = getDadosMotivosContatoDescartadoDecimoQuartoDiaLocal(modelo);
      this.getGraficoSobreposto('motivos-contato-descartado-decimo-quarto-dia', getDadosMotivosContatoDescartadoDecimoQuartoDiaLocal(modelo));
      return this.getGraficoSobreposto('vezes-monitoradas', getDadosNrMonitoramentosLocal(modelo));
    };

    LocalView.prototype.getGraficoSobreposto = function(elemento, options) {
      if (!options.stacking) {
        options['stacking'] = 'percent';
      }
      if (!options.tooltip) {
        options['tooltip'] = {
          pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>'
        };
      }
      return Highcharts.chart(elemento, {
        chart: {
          type: 'column'
        },
        styleMode: true,
        title: {
          text: options.titulo
        },
        xAxis: {
          categories: options.categorias
        },
        yAxis: {
          min: 0,
          title: {
            text: options.tituloy
          }
        },
        tooltip: options.tooltip,
        plotOptions: {
          column: {
            stacking: options.stacking
          }
        },
        series: options.series
      });
    };

    LocalView.prototype.getGraficoArtico = function(elemento, options) {
      return Highcharts.chart(elemento, {
        chart: {
          type: 'column',
          inverted: true,
          polar: true
        },
        styleMode: true,
        title: {
          text: options.titulo
        },
        tooltip: {
          outside: true
        },
        pane: {
          size: '85%',
          innerSize: '20%',
          endAngle: 270
        },
        xAxis: {
          tickInterval: 1,
          labels: {
            align: 'right',
            useHTML: true,
            allowOverlap: true,
            step: 1,
            y: 3,
            style: {
              fontSize: '13px'
            }
          },
          lineWidth: 0,
          categories: ['Perda de seguimento <span class="f16"><span id="flag" class="flag no">' + '</span></span>', 'Não encontrado na ligação <span class="f16"><span id="flag" class="flag us">' + '</span></span>', 'Recusa <span class="f16"><span id="flag" class="flag de">' + '</span></span>', 'Problemas com a equipe de monitoramento <span class="f16"><span id="flag" class="flag ca">' + '</span></span>', 'Contato descartado, suspeita de covid-19 <span class="f16"><span id="flag" class="flag at">' + '</span></span>', 'Confirmado para covid-19 <span class="f16"><span id="flag" class="flag at">' + '</span></span>']
        },
        yAxis: {
          crosshair: {
            enabled: true,
            color: '#333'
          },
          lineWidth: 0,
          tickInterval: 25,
          reversedStacks: false,
          endOnTick: true,
          showLastLabel: true
        },
        plotOptions: {
          column: {
            stacking: 'normal',
            borderWidth: 0,
            pointPadding: 0,
            groupPadding: 0.15
          }
        },
        series: options.series
      });
    };

    LocalView.prototype.getGraficoLinhas = function(elemento, options) {
      return Highcharts.chart(elemento, {
        chart: {
          type: 'line'
        },
        styleMode: true,
        title: {
          text: options.titulo
        },
        subtitle: {
          text: ''
        },
        xAxis: {
          categories: options.categories
        },
        yAxis: {
          title: {
            text: options.tituloy
          }
        },
        plotOptions: {
          line: {
            dataLabels: {
              enabled: true
            },
            enableMouseTracking: false
          }
        },
        series: options.series
      });
    };

    LocalView.prototype.getGraficoPizza = function(elemento, options) {
      return Highcharts.chart(elemento, {
        chart: {
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false,
          type: 'pie'
        },
        styleMode: true,
        title: {
          text: options.titulo
        },
        tooltip: {
          pointFormat: '{series.name}: <b>{point.value:.1f}%</b>'
        },
        accessibility: {
          point: {
            valueSuffix: '%'
          }
        },
        plotOptions: {
          pie: {
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
              enabled: false
            },
            showInLegend: true
          }
        },
        series: options.series
      });
    };

    LocalView.prototype.getGraficoBarras = function(elemento, options) {
      return Highcharts.chart(elemento, {
        chart: {
          type: 'column'
        },
        title: {
          text: options.titulo
        },
        subtitle: {
          text: ''
        },
        styleMode: true,
        xAxis: {
          categories: options.categorias,
          crosshair: true
        },
        yAxis: {
          min: 0,
          title: {
            text: options.tituloy
          }
        },
        tooltip: {
          headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
          pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' + '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
          footerFormat: '</table>',
          shared: true,
          useHTML: true
        },
        plotOptions: {
          column: {
            pointPadding: 0.2,
            borderWidth: 0
          }
        },
        series: options.series
      });
    };

    LocalView.prototype.getDateInternational = function(strDate) {
      var c;
      strDate = strDate.split('/');
      c = strDate[0];
      strDate[0] = strDate[1];
      strDate[1] = c;
      return strDate.join('/');
    };

    LocalView.prototype.onRender = function() {
      var self;
      self = this;
      if (this.collection.length === 0) {
        return this.ui.amostras.append('<li class="list-group-item"><h2><small>Você não tem Periodos em Avaliação a serem exibidos. Clique em "Inserir Dados"</small></h2></li>');
      }
    };

    return LocalView;

  })(Marionette.CompositeView);
  return LocalView;
});

getPorcentagem = function(v, total) {
  if (!v) {
    return 0;
  }
  if (!total) {
    return 0;
  }
  return parseFloat((parseFloat(v) * 100 / total).toFixed(2));
};

getDadosSituacaoMonitoramentoLocal = function(modelo) {
  var andamento, encerrado, naoIniciado, options, situacaoIgnorados;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  naoIniciado = [];
  andamento = [];
  encerrado = [];
  situacaoIgnorados = [];
  options['titulo'] = 'Situação do Monitoramento';
  options['tituloy'] = '% Todos os Contatos';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    var i;
    i = d.nrIgnoradosSituacao ? d.nrIgnoradosSituacao : 0;
    naoIniciado.push(parseFloat(d.nrNaoIniciados));
    andamento.push(parseFloat(d.nrEmAndamento));
    encerrado.push(parseFloat(d.nrEncerrados));
    return situacaoIgnorados.push(parseFloat(i));
  });
  options['series'] = [
    {
      name: "Não iniciado",
      data: naoIniciado,
      color: '#73e5da'
    }, {
      name: "Em andamento",
      data: andamento,
      color: '#8ed685'
    }, {
      name: "Encerrado",
      data: encerrado,
      color: '#1f8ab5'
    }, {
      name: "Ignorado",
      data: situacaoIgnorados,
      color: '#b3b3b3'
    }
  ];
  console.log(options, 'options situacao');
  return options;
};

getDadosTiposRelacaoContatoLocal = function(modelo) {
  var domiciliar, escolar, evento, familiar, laboral, options, outros, relacaoIgnorados;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  domiciliar = [];
  familiar = [];
  escolar = [];
  laboral = [];
  evento = [];
  outros = [];
  relacaoIgnorados = [];
  options['titulo'] = 'Tipo de Relação com o Caso';
  options['tituloy'] = '% Todos os Contatos';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    domiciliar.push(parseFloat(d.nrDomiciliar));
    familiar.push(parseFloat(d.nrFamiliar));
    escolar.push(parseFloat(d.nrEscolar));
    laboral.push(parseFloat(d.nrLaboral));
    evento.push(parseFloat(d.nrEventoSocial));
    outros.push(parseFloat(d.nrRelacaoOutros));
    return relacaoIgnorados.push(parseFloat((d.nrRelacaoIgnorados ? d.nrRelacaoIgnorados : 0)));
  });
  options['series'] = [
    {
      name: "Domiciliar",
      data: domiciliar,
      color: '#8ED685'
    }, {
      name: "Familiar",
      data: familiar,
      color: '#51A892'
    }, {
      name: "Escolar",
      data: escolar,
      color: '#c1f0a2'
    }, {
      name: "Laboral",
      data: laboral,
      color: '#1F8AB5'
    }, {
      name: "Evento Social",
      data: evento,
      color: '#73E5DA'
    }, {
      name: "Outro",
      data: outros,
      color: '#5C77BC'
    }, {
      name: "Ignorado",
      data: relacaoIgnorados,
      color: '#b3b3b3'
    }
  ];
  console.log(options, 'options relacao');
  return options;
};

getDadosNrMonitoramentosLocal = function(modelo) {
  var moniIgnorados, options, quatroouseis, seteoumais, tresoumenos;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  tresoumenos = [];
  quatroouseis = [];
  seteoumais = [];
  moniIgnorados = [];
  options['titulo'] = 'Número de Comunicações com Cada Contato';
  options['tituloy'] = '% Contatos Descartados';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    tresoumenos.push(parseInt(d.nrMoniZeroOuTres));
    quatroouseis.push(parseInt(d.nrMoniQuatroOuSeis));
    seteoumais.push(parseInt(d.nrMoniSeisOuMais));
    return moniIgnorados.push(parseInt((d.nrMoniIgnorados ? d.nrMoniIgnorados : 0)));
  });
  options['series'] = [
    {
      name: "3 vezes ou menos",
      data: tresoumenos,
      color: '#73e5da'
    }, {
      name: "4 a 6 vezes",
      data: quatroouseis,
      color: '#1F8AB5'
    }, {
      name: "7 vezes ou mais",
      data: seteoumais,
      color: '#8ed685'
    }, {
      name: "Ignorado",
      data: moniIgnorados,
      color: '#b3b3b3'
    }
  ];
  return options;
};

getDadosNrMotivosEncerramentoLocal = function(modelo) {
  var completo, confirmado, descartado, ignorado, incompleto, naoEncontradoLigacao, options, perdaSegmento, problemasEquipe, recusa, suspeita;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  perdaSegmento = [];
  naoEncontradoLigacao = [];
  recusa = [];
  problemasEquipe = [];
  descartado = [];
  suspeita = [];
  confirmado = [];
  completo = [];
  incompleto = [];
  ignorado = [];
  options['titulo'] = 'Motivo de Encerramento';
  options['tituloy'] = '% Contatos Encerrados';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    perdaSegmento.push(parseInt(d.nrPerdaSegmento));
    naoEncontradoLigacao.push(parseInt(d.naoEncontradoLigacao));
    recusa.push(parseInt(d.nrRecusa));
    problemasEquipe.push(parseInt(d.nrProblemasEquipe));
    incompleto.push(parseInt(d.nrPerdaSegmento) + parseInt(d.naoEncontradoLigacao) + parseInt(d.nrRecusa) + parseInt(d.nrProblemasEquipe));
    suspeita.push(parseInt(d.nrSuspeita));
    ignorado.push(parseInt(d.nrMotivoIgnorados ? d.nrMotivoIgnorados : 0));
    descartado.push(parseInt(d.nrDescartado));
    confirmado.push(parseInt(d.nrConfirmado));
    return completo.push(parseInt(d.nrDescartado) + parseInt(d.nrSuspeita) + parseInt(d.nrConfirmado));
  });
  options['series'] = [
    {
      name: "Monitoramento incompleto",
      data: incompleto,
      stack: 'status',
      color: '#1d588f'
    }, {
      name: "Monitoramento completo",
      data: completo,
      stack: 'status',
      color: '#599d66'
    }, {
      name: "Ignorado",
      data: ignorado,
      stack: 'status',
      color: '#b3b3b3'
    }, {
      name: "Perda de seguimento",
      data: perdaSegmento,
      stack: 'tipo',
      color: '#73e5da'
    }, {
      name: "Não encontrado na ligação",
      data: naoEncontradoLigacao,
      stack: 'tipo',
      color: '#1f8ab5'
    }, {
      name: "Recusa",
      data: recusa,
      stack: 'tipo',
      color: '#5c77bc'
    }, {
      name: "Problemas na equipe",
      data: problemasEquipe,
      stack: 'tipo',
      color: '#aeb8dc'
    }, {
      name: "Descartado",
      data: descartado,
      stack: 'tipo',
      color: '#a3cea5'
    }, {
      name: "Suspeita de covid-19",
      data: suspeita,
      stack: 'tipo',
      color: '#c1f0a2'
    }, {
      name: "Confirmado para covid-19",
      data: confirmado,
      stack: 'tipo',
      color: '#8ed685'
    }, {
      name: "Ignorado",
      data: ignorado,
      stack: 'tipo',
      color: '#b3b3b3',
      showInLegend: false
    }
  ];
  return options;
};

getDadosMotivosContatoDescartadoSegundoDiaLocal = function(modelo) {
  var ignoradosegundo, monitoradonaosegundodia, monitoradosegundodia, options;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  monitoradosegundodia = [];
  monitoradonaosegundodia = [];
  ignoradosegundo = [];
  options['titulo'] = 'Início do Monitoramento até o 2º dia';
  options['tituloy'] = '% Contatos Descartados';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    var i, nao;
    i = parseInt(d.nrMonitoradosIgnoradosSegundo ? d.nrMonitoradosIgnoradosSegundo : 0);
    nao = parseInt(d.nrNaoMoniDoisPrimeiros ? d.nrNaoMoniDoisPrimeiros : 0);
    monitoradosegundodia.push(parseInt(d.nrMoniDoisPrimeiros));
    monitoradonaosegundodia.push(nao);
    return ignoradosegundo.push(i);
  });
  options['series'] = [
    {
      name: "Iniciado até o 2º dia",
      data: monitoradosegundodia,
      color: '#8ed685'
    }, {
      name: "Não iniciado até o 2º dia",
      data: monitoradonaosegundodia,
      color: '#1f8ab5'
    }, {
      name: "Ignorado",
      data: ignoradosegundo,
      color: '#b3b3b3'
    }
  ];
  return options;
};

getDadosMotivosContatoDescartadoDecimoQuartoDiaLocal = function(modelo) {
  var ignoradosegundo, monitoradodecimoquarto, monitoradonaodecimoquarto, options;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  monitoradodecimoquarto = [];
  monitoradonaodecimoquarto = [];
  ignoradosegundo = [];
  options['titulo'] = 'Monitoramento de contatos no 14º dia';
  options['tituloy'] = '% Contatos Descartados';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    var i, nao;
    i = parseInt(d.nrMoniIgnorados ? d.nrMoniIgnorados : 0);
    nao = parseInt(d.nrNaoMonitoradosDecimoQuato ? d.nrNaoMonitoradosDecimoQuato : 0);
    monitoradodecimoquarto.push(parseInt(d.nrMonitoradosDecimoQuato));
    monitoradonaodecimoquarto.push(nao);
    return ignoradosegundo.push(i);
  });
  options['series'] = [
    {
      name: "Monitorado no 14º dia",
      data: monitoradodecimoquarto,
      color: '#8ed685'
    }, {
      name: "Não monitorado no 14º dia",
      data: monitoradodecimoquarto,
      color: '#1f8ab5'
    }, {
      name: "Ignorado",
      data: ignoradosegundo,
      color: '#b3b3b3'
    }
  ];
  return options;
};

getDadosMediaContatoLocal = function(modelo) {
  var media, options;
  options = {
    dados: modelo.dados,
    tipo: modelo.tipo
  };
  media = [];
  options['titulo'] = 'Média de Contatos por Caso';
  options['tituloy'] = 'Média de Contatos por Caso';
  options['categorias'] = options.dados.map(function(d) {
    var fim;
    fim = options.tipo !== 'diario' ? ' a ' + d.periodoFim : '';
    return d.periodoInicio + fim;
  });
  options.dados.forEach(function(d) {
    return media.push(parseFloat(d.nrMonitorados) / parseInt(d.nrRegistrados));
  });
  options['series'] = [
    {
      name: "Média de contatos",
      data: media
    }
  ];
  return options;
};
