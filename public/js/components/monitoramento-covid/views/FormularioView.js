// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

define(['../collections/Monitoramentos', '../models/Monitoramento'], function(Monitoramentos, Monitoramento) {
  var FormularioView;
  FormularioView = (function() {
    class FormularioView extends Marionette.CompositeView {
      constructor() {
        super(...arguments);
        this.zeraNegativos = this.zeraNegativos.bind(this);
      }

      initialize() {
        var id, l, local, user;
        ({user, local} = App);
        id = this.model.get('id_local');
        l = App.monitoramentos.get(id);
        /*       console.log @model,'model'
        console.log l, 'monitoramento', id
        console.log App.monitoramentos, 'monitoramentos' */
        this.model.set('local', l.get('local') + ' (' + l.get('municipio') + '/' + l.get('uf') + ')');
        this.model.set('tipo', l.get('tipo'));
        if (!this.model.get('id')) {
          this.model.set('id', '');
        }
        this.local = l;
        $.datepicker.regional["pt-BR"] = {
          closeText: "Fechar",
          prevText: "Anterior",
          nextText: "Próximo",
          currentText: "Hoje",
          monthNames: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
          monthNamesShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
          dayNames: ["Domingo", "Segunda-feira", "Terça-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "Sabado"],
          dayNamesShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
          dayNamesMin: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
          weekHeader: "Sm",
          dateFormat: "dd/mm/yy",
          firstDay: 0,
          isRTL: false,
          showMonthAfterYear: false,
          yearSuffix: ""
        };
        return $.datepicker.setDefaults($.datepicker.regional["pt-BR"]);
      }

      zeraNegativos(e) {
        boundMethodCheck(this, FormularioView);
        if ($(e.target).val() < 0) {
          return $(e.target).val(0);
        }
      }

      setIgnoradosSituacao() {
        var andamento, encerrados, iniciados, monitorados, r;
        monitorados = this.ui.inputNrMonitorados.val() ? this.ui.inputNrMonitorados.val() : 0;
        iniciados = this.ui.inputNrNaoIniciados.val() ? this.ui.inputNrNaoIniciados.val() : 0;
        andamento = this.ui.inputNrEmAndamento.val() ? this.ui.inputNrEmAndamento.val() : 0;
        encerrados = this.ui.inputNrEncerrados.val() ? this.ui.inputNrEncerrados.val() : 0;
        r = monitorados - iniciados - andamento - encerrados;
        this.ui.inputIgnoradosSituacao.val(r);
        return r;
      }

      setIgnoradosRelacao() {
        var domiciliar, escolar, evento, familiar, laboral, monitorados, outros, r;
        monitorados = this.ui.inputNrMonitorados.val() ? this.ui.inputNrMonitorados.val() : 0;
        domiciliar = this.ui.inputNrDomiciliar.val() ? this.ui.inputNrDomiciliar.val() : 0;
        familiar = this.ui.inputNrFamiliar.val() ? this.ui.inputNrFamiliar.val() : 0;
        escolar = this.ui.inputNrEscolar.val() ? this.ui.inputNrEscolar.val() : 0;
        laboral = this.ui.inputNrLaboral.val() ? this.ui.inputNrLaboral.val() : 0;
        evento = this.ui.inputNrEventoSocial.val() ? this.ui.inputNrEventoSocial.val() : 0;
        outros = this.ui.inputNrRelacaoOutros.val() ? this.ui.inputNrRelacaoOutros.val() : 0;
        r = monitorados - domiciliar - familiar - escolar - laboral - evento - outros;
        this.ui.inputNrRelacaoIgnorados.val(r);
        return r;
      }

      setIgnoradosMotivosEncerramento() {
        var confirmado, descartado, monitorados, naoEncontradoLigacao, perda, problemasEquipe, r, recusa, suspeita;
        monitorados = this.ui.inputNrEncerrados.val() ? this.ui.inputNrEncerrados.val() : 0;
        perda = this.ui.inputNrPerdaSegmento.val() ? this.ui.inputNrPerdaSegmento.val() : 0;
        naoEncontradoLigacao = this.ui.inputNaoEncontradoLigacao.val() ? this.ui.inputNaoEncontradoLigacao.val() : 0;
        recusa = this.ui.inputNrRecusa.val() ? this.ui.inputNrRecusa.val() : 0;
        problemasEquipe = this.ui.inputNrProblemasEquipe.val() ? this.ui.inputNrProblemasEquipe.val() : 0;
        descartado = this.ui.inputNrDescartado.val() ? this.ui.inputNrDescartado.val() : 0;
        suspeita = this.ui.inputNrSuspeita.val() ? this.ui.inputNrSuspeita.val() : 0;
        confirmado = this.ui.inputNrConfirmado.val() ? this.ui.inputNrConfirmado.val() : 0;
        r = monitorados - perda - naoEncontradoLigacao - recusa - problemasEquipe - descartado - suspeita - confirmado;
        this.ui.inputNrMotivoIgnorados.val(r);
        return r;
      }

      setIgnoradosMonitorados() {
        var monitorados, naoprimeiro, primeiro, r;
        monitorados = this.ui.inputNrDescartado.val() ? this.ui.inputNrDescartado.val() : 0;
        primeiro = this.ui.inputNrMoniDoisPrimeiros.val() ? this.ui.inputNrMoniDoisPrimeiros.val() : 0;
        naoprimeiro = this.ui.inputNrNaoMoniDoisPrimeiros.val() ? this.ui.inputNrNaoMoniDoisPrimeiros.val() : 0;
        r = monitorados - primeiro - naoprimeiro;
        this.ui.inputNrMonitoradosIgnoradosSegundo.val(r);
        return r;
      }

      setIgnoradosMonitoradosDecimoQuarto() {
        var monitorados, naoquatorze, quatorze, r;
        monitorados = this.ui.inputNrDescartado.val() ? this.ui.inputNrDescartado.val() : 0;
        quatorze = this.ui.inputNrMonitoradosDecimoQuato.val() ? this.ui.inputNrMonitoradosDecimoQuato.val() : 0;
        naoquatorze = this.ui.inputNrNaoMonitoradosDecimoQuato.val() ? this.ui.inputNrNaoMonitoradosDecimoQuato.val() : 0;
        r = monitorados - quatorze - naoquatorze;
        this.ui.inputNrMonitoradosIgnorados.val(r);
        return r;
      }

      setIgnoradosVezes() {
        var monitorados, quatroSeis, r, seisMais, tres;
        monitorados = this.ui.inputNrDescartado.val() ? this.ui.inputNrDescartado.val() : 0;
        tres = this.ui.inputNrMoniZeroOuTres.val() ? this.ui.inputNrMoniZeroOuTres.val() : 0;
        quatroSeis = this.ui.inputNrMoniQuatroOuSeis.val() ? this.ui.inputNrMoniQuatroOuSeis.val() : 0;
        seisMais = this.ui.inputNrMoniSeisOuMais.val() ? this.ui.inputNrMoniSeisOuMais.val() : 0;
        r = monitorados - tres - quatroSeis - seisMais;
        this.ui.inputNrMonitoradosVezesIgnorados.val(r);
        return r;
      }

      removeErro(e) {
        return $(e.target).parent().removeClass('has-error');
      }

      getDados() {
        var dados;
        dados = {
          "nrMonitorados": this.ui.inputNrMonitorados.val(),
          "nrRegistrados": this.ui.inputNrRegistrados.val(),
          "nrNaoIniciados": this.ui.inputNrNaoIniciados.val(),
          "nrEmAndamento": this.ui.inputNrEmAndamento.val(),
          "nrEncerrados": this.ui.inputNrEncerrados.val(),
          "nrIgnoradosSituacao": this.ui.inputIgnoradosSituacao.val(),
          "nrDomiciliar": this.ui.inputNrDomiciliar.val(),
          "nrFamiliar": this.ui.inputNrFamiliar.val(),
          "nrEscolar": this.ui.inputNrEscolar.val(),
          "nrLaboral": this.ui.inputNrLaboral.val(),
          "nrEventoSocial": this.ui.inputNrEventoSocial.val(),
          "nrRelacaoOutros": this.ui.inputNrRelacaoOutros.val(),
          "nrRelacaoIgnorados": this.ui.inputNrRelacaoIgnorados.val(),
          "nrPerdaSegmento": this.ui.inputNrPerdaSegmento.val(),
          "naoEncontradoLigacao": this.ui.inputNaoEncontradoLigacao.val(),
          "nrRecusa": this.ui.inputNrRecusa.val(),
          "nrProblemasEquipe": this.ui.inputNrProblemasEquipe.val(),
          "nrDescartado": this.ui.inputNrDescartado.val(),
          "nrSuspeita": this.ui.inputNrSuspeita.val(),
          "nrConfirmado": this.ui.inputNrConfirmado.val(),
          "nrMotivoIgnorados": this.ui.inputNrMotivoIgnorados.val(),
          "nrMoniDoisPrimeiros": this.ui.inputNrMoniDoisPrimeiros.val(),
          "nrNaoMoniDoisPrimeiros": this.ui.inputNrNaoMoniDoisPrimeiros.val(),
          "nrMonitoradosIgnoradosSegundo": this.ui.inputNrMonitoradosIgnoradosSegundo.val(),
          "nrMonitoradosDecimoQuato": this.ui.inputNrMonitoradosDecimoQuato.val(),
          "nrNaoMonitoradosDecimoQuato": this.ui.inputNrNaoMonitoradosDecimoQuato.val(),
          "nrMonitoradosIgnorados": this.ui.inputNrMonitoradosIgnorados.val(),
          "nrMoniZeroOuTres": this.ui.inputNrMoniZeroOuTres.val(),
          "nrMoniQuatroOuSeis": this.ui.inputNrMoniQuatroOuSeis.val(),
          "nrMoniSeisOuMais": this.ui.inputNrMoniSeisOuMais.val(),
          "nrMoniIgnorados": this.ui.inputNrMonitoradosVezesIgnorados.val()
        };
        return dados;
      }

      salvar() {
        var camposErros, dados, e, err, id_local, msgErros, totalDescartadoDecimoQuarto, totalMotivos, totalRelacao, totalSituacoes, v;
        dados = this.getDados();
        if (this.model.get('tipo') !== 'diario') {
          dados["periodoFim"] = this.ui.inputPeriodoFim.val();
        }
        dados["periodoInicio"] = this.ui.inputPeriodoInicio.val();
        err = false;
        camposErros = [];
        msgErros = [];
        msgErros = this.validateDatePeriodos(dados, msgErros);
        console.log(dados, 'dados');
        for (v in dados) {
          if (!dados[v]) {
            err = true;
            camposErros.push('#input' + v.slice(0, 1).toUpperCase() + v.slice(1));
          }
          if (parseInt(dados[v]) > parseInt(dados['nrMonitorados']) && ['periodoFim', 'periodoInicio'].indexOf(v) === -1) {
            err = true;
            camposErros.push('#input' + v.slice(0, 1).toUpperCase() + v.slice(1));
            msgErros.push('Nenhum dos valores pode ultrapassar o numero de monitorados!');
            console.log(v, 'nenhum', parseInt(dados[v]), parseInt(dados['nrMonitorados']), parseInt(dados[v]) > parseInt(dados['nrMonitorados']));
          }
          if (parseInt(dados[v]) < 0 && ['periodoFim', 'periodoInicio'].indexOf(v) === -1) {
            err = true;
            camposErros.push('#input' + v.slice(0, 1).toUpperCase() + v.slice(1));
            msgErros.push('Nenhum dos valores pode ser negativo!');
          }
        }
        totalSituacoes = parseInt(dados.nrNaoIniciados) + parseInt(dados.nrEmAndamento) + parseInt(dados.nrEncerrados) + parseInt(dados.nrIgnoradosSituacao);
        //console.log dados, totalSituacoes , parseInt(dados.nrMonitorados), 'teste'
        if (totalSituacoes !== parseInt(dados.nrMonitorados)) {
          err = true;
          camposErros.push('#inputIgnoradosSituacao');
          msgErros.push('Em Situação do Monitoramento a soma não pode exceder o total de contatos.');
        }
        totalRelacao = parseInt(dados.nrDomiciliar) + parseInt(dados.nrFamiliar) + parseInt(dados.nrEscolar) + parseInt(dados.nrLaboral) + parseInt(dados.nrEventoSocial) + parseInt(dados.nrRelacaoOutros) + parseInt(dados.nrRelacaoIgnorados);
        if (totalRelacao !== parseInt(dados.nrMonitorados)) {
          err = true;
          camposErros.push('#inputNrRelacaoIgnorados');
          msgErros.push('Em Tipo de Relação com o Caso a soma não pode exceder o total de contatos.');
        }
        totalMotivos = parseInt(dados.nrPerdaSegmento) + parseInt(dados.naoEncontradoLigacao) + parseInt(dados.nrRecusa) + parseInt(dados.nrProblemasEquipe) + parseInt(dados.nrDescartado) + parseInt(dados.nrSuspeita) + parseInt(dados.nrConfirmado) + parseInt(dados.nrMotivoIgnorados);
        if (totalMotivos !== parseInt(dados.nrEncerrados)) {
          err = true;
          camposErros.push('#inputNrMotivoIgnorados');
          msgErros.push('Em Motivo de Encerramento a soma não pode exceder os contatos encerrados.');
        }
        if (parseInt(dados.nrMoniDoisPrimeiros) + parseInt(dados.nrNaoMoniDoisPrimeiros) + parseInt(dados.nrMonitoradosIgnoradosSegundo) !== parseInt(dados.nrDescartado)) {
          err = true;
          camposErros.push('#inputNrMonitoradosIgnoradosSegundo');
          msgErros.push('Em Início do Monitoramento até o 2º dia a soma não pode exceder os contatos descartados.');
        }
        totalDescartadoDecimoQuarto = parseInt(dados.nrMonitoradosDecimoQuato) + parseInt(dados.nrNaoMonitoradosDecimoQuato) + parseInt(dados.nrMonitoradosIgnorados);
        //console.log totalDescartadoDecimoQuarto, parseInt(dados.nrDescartado), dados.nrMonitoradosDecimoQuato, parseInt(dados.nrNaoMonitoradosDecimoQuato), dados.nrMonitoradosIgnorados 
        if (totalDescartadoDecimoQuarto !== parseInt(dados.nrDescartado)) {
          err = true;
          camposErros.push('#inputNrMonitoradosIgnorados');
          msgErros.push('Em Monitoramento dos Contatos no 14º dia a soma não pode exceder os contatos descartados.');
        }
        if (parseInt(dados.nrMoniZeroOuTres) + parseInt(dados.nrMoniQuatroOuSeis) + parseInt(dados.nrMoniSeisOuMais) + parseInt(dados.nrMoniIgnorados) !== parseInt(dados.nrDescartado)) {
          err = true;
          camposErros.push('#inputNrMonitoradosVezesIgnorados');
          msgErros.push('Em Número de Comunicações com Cada Contato a soma não pode exceder os contatos descartados.');
        }
        if (err) {
          camposErros.forEach(function(c) {
            return $(c).parent().addClass('has-error');
          });
          $(camposErros[0]).focus();
          msgErros.push('Verifique campos sem preenchimento!');
          this.exibeMensagens(msgErros);
          return;
        }
        dados["user"] = App.user.cpf;
        dados["tipo"] = 'covid';
        dados["id_local"] = this.model.get('id_local');
        dados["local"] = this.model.get('local');
        
        //console.log err, camposErros, 'campoerros', msgErros
        if (msgErros.length > 0) {
          this.exibeMensagens(msgErros);
          return;
        }
        dados['ano'] = dados.periodoInicio.split('/')[2];
        if (this.model.get('id')) {
          dados['id'] = this.model.get('id');
        }
        try {
          App.monitoramentos.addAmostra(dados);
          id_local = this.model.get('id_local');
          if (id_local) {
            return App.appRouter.navigate('#comp/monitoramento-covid/local/' + this.model.get('id_local'), {
              'trigger': true
            });
          } else {
            return App.appRouter.navigate('#comp/monitoramento-covid/', {
              'trigger': true
            });
          }
        } catch (error) {
          e = error;
          this.exibeMensagens([e]);
          this.ui.inputPeriodoInicio.parent().addClass('has-error');
          this.ui.inputPeriodoInicio.focus();
        }
      }

      limpar() {
        return this.$el.find('input[type=number]').val('');
      }

      exibeMensagens(msgs) {
        var text;
        this.ui.mensagens.empty();
        if (msgs.length) {
          text = "";
          msgs.forEach(function(m) {
            return text += "<li>" + m + "</li>";
          });
          return this.ui.mensagens.append("<div class='alert alert-danger'><ul>" + text + "</ul></div>");
        }
      }

      preenche() {
        var id, padrao;
        padrao = '';
        //console.log @model.attributes, 'dados'
        id = this.model.get('id');
        this.ui.inputLocal.val(id ? this.model.get('local') : 'teste local');
        this.ui.inputPeriodoInicio.val(id ? this.model.get('periodoInicio') : '');
        this.ui.inputPeriodoFim.val(id ? this.model.get('periodoFim') : '');
        this.ui.inputNrMonitorados.val(id ? this.model.get('nrMonitorados') : padrao);
        this.ui.inputNrRegistrados.val(id ? this.model.get('nrRegistrados') : padrao);
        this.ui.inputNrNaoIniciados.val(id ? this.model.get('nrNaoIniciados') : padrao);
        this.ui.inputNrEmAndamento.val(id ? this.model.get('nrEmAndamento') : padrao);
        this.ui.inputNrEncerrados.val(id ? this.model.get('nrEncerrados') : padrao);
        this.ui.inputIgnoradosSituacao.val(id ? this.model.get("nrIgnoradosSituacao") : padrao);
        this.ui.inputNrDomiciliar.val(id ? this.model.get('nrDomiciliar') : padrao);
        this.ui.inputNrFamiliar.val(id ? this.model.get('nrFamiliar') : padrao);
        this.ui.inputNrEscolar.val(id ? this.model.get('nrEscolar') : padrao);
        this.ui.inputNrLaboral.val(id ? this.model.get('nrLaboral') : padrao);
        this.ui.inputNrEventoSocial.val(id ? this.model.get('nrEventoSocial') : padrao);
        this.ui.inputNrRelacaoOutros.val(id ? this.model.get('nrRelacaoOutros') : padrao);
        this.ui.inputNrRelacaoIgnorados.val(id ? this.model.get("nrRelacaoIgnorados") : padrao);
        this.ui.inputNrPerdaSegmento.val(id ? this.model.get('nrPerdaSegmento') : padrao);
        this.ui.inputNaoEncontradoLigacao.val(id ? this.model.get('naoEncontradoLigacao') : padrao);
        this.ui.inputNrRecusa.val(id ? this.model.get('nrRecusa') : padrao);
        this.ui.inputNrProblemasEquipe.val(id ? this.model.get('nrProblemasEquipe') : padrao);
        this.ui.inputNrDescartado.val(id ? this.model.get('nrDescartado') : padrao);
        this.ui.inputNrSuspeita.val(id ? this.model.get('nrSuspeita') : padrao);
        this.ui.inputNrConfirmado.val(id ? this.model.get('nrConfirmado') : padrao);
        this.ui.inputNrMotivoIgnorados.val(id ? this.model.get("nrMotivoIgnorados") : padrao);
        this.ui.inputNrMoniDoisPrimeiros.val(id ? this.model.get('nrMoniDoisPrimeiros') : padrao);
        this.ui.inputNrNaoMoniDoisPrimeiros.val(id ? this.model.get('nrNaoMoniDoisPrimeiros') : padrao);
        this.ui.inputNrMonitoradosDecimoQuato.val(id ? this.model.get('nrMonitoradosDecimoQuato') : padrao);
        this.ui.inputNrNaoMonitoradosDecimoQuato.val(id ? this.model.get('nrNaoMonitoradosDecimoQuato') : padrao);
        this.ui.inputNrMonitoradosIgnoradosSegundo.val(id ? this.model.get("nrMonitoradosIgnoradosSegundo") : padrao);
        this.ui.inputNrMonitoradosIgnorados.val(id ? this.model.get("nrMonitoradosIgnorados") : padrao);
        this.ui.inputNrMoniZeroOuTres.val(id ? this.model.get('nrMoniZeroOuTres') : padrao);
        this.ui.inputNrMoniQuatroOuSeis.val(id ? this.model.get('nrMoniQuatroOuSeis') : padrao);
        this.ui.inputNrMoniSeisOuMais.val(id ? this.model.get('nrMoniSeisOuMais') : padrao);
        return this.ui.inputNrMonitoradosVezesIgnorados.val(id ? this.model.get("nrMoniIgnorados") : padrao);
      }

      validateDatePeriodos(dados, msgErros) {
        var dias, dt_fim, dt_ini, f, i, intervalo;
        if (!dados.periodoInicio) {
          msgErros;
        }
        i = dados.periodoInicio.split('/');
        dt_ini = new Date(i[1] + '/' + i[0] + '/' + i[2]);
        if (this.model.get('tipo') !== 'diario') {
          if (!dados.periodoFim) {
            return msgErros;
          }
          f = dados.periodoFim.split('/');
          dt_fim = new Date(f[1] + '/' + f[0] + '/' + f[2]);
          if (dt_ini > dt_fim) {
            msgErros.push('A data de início do periodo não pode ser maior que a data de fim!');
          }
          intervalo = (dt_fim - dt_ini) / 1000 / 60 / 60 / 24;
          if (this.model.get('tipo') === 'semanal' && intervalo < 6) {
            msgErros.push('Você selecionou periodicidade de avaliação semanal, assim o período informado deve ser de 7 dias!');
          }
          if (this.model.get('tipo') === 'mensal') {
            dias = this.diasNoMes(i[1], i[2]);
            //console.log dias, 'dias', intervalo, dt_ini.getMonth(),i[2]
            if ((intervalo < 30 && dias === 31) || (intervalo < 29 && dias === 30) || (intervalo < 28 && dias === 29) || (intervalo < 27 && dias === 28)) {
              msgErros.push('Você configurou o local para periodos mensais, o periodo informado deve ter no mínimo um mês!');
            }
            if ((intervalo > 30 && dias === 31) || (intervalo > 29 && dias === 30) || (intervalo > 28 && dias === 29) || (intervalo > 27 && dias === 28)) {
              msgErros.push('Você configurou o local para periodos mensais, o periodo informado deve ter no máximo um mês!');
            }
          }
        }
        return msgErros;
      }

      diasNoMes(mes, ano) {
        var data;
        //console.log mes, ano, '<= mes/ano'
        data = new Date(ano, mes, 0);
        return data.getDate();
      }

      getDateInternational(strDate) {
        var c;
        strDate = strDate.split('/');
        c = strDate[0];
        strDate[0] = strDate[1];
        strDate[1] = c;
        return strDate.join('/');
      }

      getNextDate() {
        var d, dataStart, df, pi;
        dataStart = this.ui.inputPeriodoInicio.val();
        if (!dataStart) {
          pi = this.getLastDateInicio();
          df = false;
          if (pi) {
            d = new Date(this.getDateInternational(pi));
            df = new Date(this.getDateInternational(pi));
            switch (this.local.get('tipo')) {
              case 'mensal':
                d.setMonth(d.getMonth() + 1);
                break;
              case 'semanal':
                d.setDate(d.getDate() + 7);
                break;
              case 'diario':
                d.setDate(d.getDate() + 1);
            }
          } else {
            d = new Date();
            if (this.local.get('tipo') !== 'diario') {
              df = new Date();
            }
          }
        } else {
          pi = (new Date(this.getDateInternational(dataStart))).toLocaleDateString();
          d = new Date(this.getDateInternational(pi));
          df = new Date(this.getDateInternational(pi));
        }
        switch (this.local.get('tipo')) {
          case 'mensal':
            df.setTime(d.getTime());
            df.setMonth(d.getMonth() + 1);
            //console.log df.getMonth(), 'mes'
            df.setDate(d.getDate() - 1);
            break;
          case 'semanal':
            if (pi) {
              df.setTime(d.getTime());
              df.setDate(d.getDate() + 6);
            } else {
              df.setTime(d.getTime());
              d.setDate(d.getDate() - 6);
            }
        }
        if (!dataStart) {
          this.ui.inputPeriodoInicio.val(d.toLocaleDateString());
        }
        if (df) {
          return this.ui.inputPeriodoFim.val(df.toLocaleDateString());
        }
      }

      getLastDateInicio() {
        var dados, maior, self;
        dados = this.local.get('dados');
        if (dados.length === 0) {
          return '';
        } else {
          maior = new Date(0);
        }
        self = this;
        dados.forEach(function(d) {
          var d_date;
          d_date = new Date(self.getDateInternational(d.periodoInicio));
          if (d_date.getTime() > maior.getTime()) {
            return maior = d_date;
          }
        });
        return maior.toLocaleDateString();
      }

      onRender() {
        this.ui.dtInicio.datepicker();
        this.ui.dtFim.datepicker();
        this.preenche();
        if (!this.model.get('periodoInicio')) {
          return this.getNextDate();
        }
      }

    };

    FormularioView.prototype.className = 'container';

    FormularioView.prototype.template = '#monitoramento-covid-formulario';

    FormularioView.prototype.ui = {
      'dtInicio': "#inputPeriodoInicio",
      'dtFim': "#inputPeriodoFim",
      'btnClear': ".btn-clear",
      'btnSave': ".btn-save",
      "inputLocal": "#inputLocal",
      "inputPeriodoInicio": "#inputPeriodoInicio",
      "inputPeriodoFim": "#inputPeriodoFim",
      "inputNrMonitorados": "#inputNrMonitorados",
      "inputNrRegistrados": "#inputNrRegistrados",
      "inputNrNaoIniciados": "#inputNrNaoIniciados",
      "inputNrEmAndamento": "#inputNrEmAndamento",
      "inputNrEncerrados": "#inputNrEncerrados",
      "inputIgnoradosSituacao": "#inputIgnoradosSituacao",
      "inputNrDomiciliar": "#inputNrDomiciliar",
      "inputNrFamiliar": "#inputNrFamiliar",
      "inputNrEscolar": "#inputNrEscolar",
      "inputNrLaboral": "#inputNrLaboral",
      "inputNrEventoSocial": "#inputNrEventoSocial",
      "inputNrRelacaoOutros": "#inputNrRelacaoOutros",
      "inputNrRelacaoIgnorados": "#inputNrRelacaoIgnorados",
      "inputNrPerdaSegmento": "#inputNrPerdaSegmento",
      "inputNaoEncontradoLigacao": "#inputNaoEncontradoLigacao",
      "inputNrRecusa": "#inputNrRecusa",
      "inputNrProblemasEquipe": "#inputNrProblemasEquipe",
      "inputNrDescartado": "#inputNrDescartado",
      "inputNrSuspeita": "#inputNrSuspeita",
      "inputNrConfirmado": "#inputNrConfirmado",
      "inputNrMotivoIgnorados": "#inputNrMotivoIgnorados",
      "inputNrMoniDoisPrimeiros": "#inputNrMoniDoisPrimeiros",
      "inputNrNaoMoniDoisPrimeiros": "#inputNrNaoMoniDoisPrimeiros",
      "inputNrMonitoradosIgnoradosSegundo": "#inputNrMonitoradosIgnoradosSegundo",
      "inputNrMonitoradosDecimoQuato": "#inputNrMonitoradosDecimoQuato",
      "inputNrNaoMonitoradosDecimoQuato": "#inputNrNaoMonitoradosDecimoQuato",
      "inputNrMonitoradosIgnorados": "#inputNrMonitoradosIgnorados",
      "inputNrMoniZeroOuTres": "#inputNrMoniZeroOuTres",
      "inputNrMoniQuatroOuSeis": "#inputNrMoniQuatroOuSeis",
      "inputNrMoniSeisOuMais": "#inputNrMoniSeisOuMais",
      "inputNrMonitoradosVezesIgnorados": "#inputNrMonitoradosVezesIgnorados",
      "mensagens": ".mensagens",
      'entradasNumericas': 'input[type=number]'
    };

    FormularioView.prototype.events = {
      'click .btn-clear': "limpar",
      'click .btn-save': "salvar",
      'change input': 'removeErro',
      'change @ui.inputNrMonitorados, @ui.inputNrNaoIniciados, @ui.inputNrEmAndamento, @ui.inputNrEncerrados': 'setIgnoradosSituacao',
      'change @ui.inputNrMonitorados, @ui.inputNrLaboral, @ui.inputNrEventoSocial, @ui.inputNrRelacaoOutros,@ui.inputNrDomiciliar, @ui.inputNrFamiliar, @ui.inputNrEscolar': 'setIgnoradosRelacao',
      'change @ui.inputNrEncerrados, @ui.inputNrPerdaSegmento, @ui.inputNaoEncontradoLigacao, @ui.inputNrRecusa,@ui.inputNrProblemasEquipe, @ui.inputNrDescartado, @ui.inputNrSuspeita, @ui.inputNrConfirmado': 'setIgnoradosMotivosEncerramento',
      'change @ui.inputNrDescartado, @ui.inputNrMoniDoisPrimeiros, @ui.inputNrNaoMoniDoisPrimeiros': 'setIgnoradosMonitorados',
      'change @ui.inputNrDescartado, @ui.inputNrMonitoradosDecimoQuato, @ui.inputNrNaoMonitoradosDecimoQuato': 'setIgnoradosMonitoradosDecimoQuarto',
      'change @ui.inputNrDescartado, @ui.inputNrMonitorados, @ui.inputNrMoniZeroOuTres, @ui.inputNrMoniQuatroOuSeis, @ui.inputNrMoniSeisOuMais': 'setIgnoradosVezes',
      'change @ui.inputPeriodoInicio': 'getNextDate',
      'change @ui.entradasNumericas': 'zeraNegativos'
    };

    return FormularioView;

  }).call(this);
  return FormularioView;
});
