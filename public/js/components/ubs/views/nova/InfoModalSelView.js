// Generated by CoffeeScript 2.7.0
define(['marionette', 'async!//maps.googleapis.com/maps/api/js?language=pt-BR&sensor=false&key=AIzaSyBsUYEmrzqWefMa5lVRbWhajEaT82T-qpw'], function(Marionette) {
  var InfoModalView;
  InfoModalView = (function() {
    class InfoModalView extends Marionette.ItemView {
      ['susto'](evt) {
        return console.log(evt);
      }

      ['onRender']() {
        var Geocoder, address, bairro, d, logra, municipio, num, rua, self;
        self = this;
        console.log('InfoModalView::render Done');
        this.$el.on('hidden.bs.modal', function(evt) {
          var frag;
          frag = Backbone.history.fragment;
          frag = frag.substring(0, frag.lastIndexOf('/'));
          console.log(frag);
          App.appRouter.navigate(frag);
          return $(evt.currentTarget).remove();
        });
        Geocoder = new google.maps.Geocoder();
        d = this.model;
        num = d.get('numero');
        num = _.isNaN(parseInt(num)) ? '' : `,${num}`;
        rua = d.get('logradouro');
        bairro = d.get('bairro');
        logra = `${rua}${num}`;
        municipio = d.get('municipio');
        address = `${logra}, ${d.get('municipio')}, ${d.get('uf')}, Brasil`;
        console.log(address);
        return Geocoder.geocode({address}, function(res, status) {
          var center, contentString, coords, geocode, infowindow, latLong, len, map, mapEl, mapOptions, marker, parts, staticMarker, u, zoom;
          if (status === google.maps.GeocoderStatus.OK) {
            geocode = res[0];
            console.log(geocode);
            parts = geocode.address_components;
            len = parts.length;
            u = 17 / 5;
            zoom = Math.ceil(len * u);
            if (zoom > 17) {
              zoom = 17;
            }
            console.log(len, zoom);
            mapOptions = {
              'zoom': zoom,
              'center': geocode.geometry.location,
              'disableDoubleClickZoom': false,
              'disableDefaultUI': true,
              'scaleControl': false,
              'zoomControl': true,
              'zoomControlOptions': {
                style: 1,
                position: 8
              },
              'panControl': true,
              'panControlOptions': {
                style: 1,
                position: 8
              }
            };
            // 'mapTypeControl': true
            mapEl = self.ui.map[0];
            map = new google.maps.Map(mapEl, mapOptions);
            latLong = res[0].geometry.location;
            staticMarker = {
              'position': latLong,
              'icon': {
                'path': google.maps.SymbolPath.CIRCLE,
                'strokeColor': '#5264AE',
                'strokeOpacity': 0.4,
                'fillColor': 'hsla(0,0%,0%,0)',
                'scale': 16
              },
              'map': map,
              'draggable': true,
              'title': d.get('nome')
            };
            marker = new google.maps.Marker(staticMarker);
            coords = latLong.toUrlValue();
            contentString = latLong.toUrlValue();
            infowindow = new google.maps.InfoWindow({
              content: contentString
            });
            google.maps.event.addListener(marker, "click", function() {
              infowindow.open(map, marker);
            });
            center = map.getCenter();
            console.log(map.setCenter(latLong));
            self.centerMap = function() {
              clearTimeout(window._tempLos);
              return window._tempLos = setTimeout(function(map, pos) {
                return map.setCenter(pos);
              }, 500, map, center);
            };
            google.maps.event.addDomListener(window, 'resize', self.centerMap);
            self.centerMap();
            google.maps.event.addListenerOnce(map, 'idle', function() {
              return "Mapa Carregado";
            });
            return window.map = self.ui.map;
          }
        });
      }

    };

    InfoModalView.prototype['className'] = 'modal fade';

    InfoModalView.prototype['template'] = '#ubs-nova-modal-info';

    InfoModalView.prototype['ui'] = {
      'map': '#ubs-map-box'
    };

    InfoModalView.prototype['events'] = {
      'click .btn-primary': 'susto'
    };

    return InfoModalView;

  }).call(this);
  return InfoModalView;
});
