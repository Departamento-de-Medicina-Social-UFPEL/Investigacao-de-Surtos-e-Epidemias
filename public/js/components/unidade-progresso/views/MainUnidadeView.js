// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['./selecaoItemView', 'marionette'], function(ItemView, Marionette) {
  var MainUnidadeLayout;
  return MainUnidadeLayout = (function(_super) {
    __extends(MainUnidadeLayout, _super);

    function MainUnidadeLayout() {
      return MainUnidadeLayout.__super__.constructor.apply(this, arguments);
    }

    MainUnidadeLayout.prototype.template = '#unidade-progresso-main';

    MainUnidadeLayout.prototype.childView = ItemView;

    MainUnidadeLayout.prototype.childViewContainer = '.listaCasos';

    MainUnidadeLayout.prototype.className = 'container-fluid selecao-main unidade-main';

    MainUnidadeLayout.prototype.events = {
      'click .gotoFinalUnidade': 'gotoFinalUnidade',
      'click .gotoInicialUnidade': 'gotoInicialUnidade',
      'click .gotoVideo': 'gotoVideo'
    };

    MainUnidadeLayout.prototype.gotoInicialUnidade = function(e) {
      var inicialDaPro, u, _id;
      u = $(e.target).data('unidade');
      this.gotoHome();
      inicialDaPro = (App.testes.filter(function(d) {
        return /inicial/img.test(d.get('titulo')) && d.get('unidade') === u;
      }))[0];
      if (!inicialDaPro) {
        Backbone.history.navigate("comp/listatestes", {
          trigger: true
        });
      }
      _id = inicialDaPro.get('_id');
      return Backbone.history.navigate("comp/teste-progresso/" + _id, {
        trigger: true
      });
    };

    MainUnidadeLayout.prototype.gotoFinalUnidade = function(e) {
      var inicialDaPro, u, _id;
      u = $(e.target).data('unidade');
      this.gotoHome();
      inicialDaPro = (App.testes.filter(function(d) {
        return /final/img.test(d.get('titulo')) && d.get('unidade') === u;
      }))[0];
      console.log('inicialPro', inicialDaPro, u);
      if (!inicialDaPro) {
        Backbone.history.navigate("comp/listatestes", {
          trigger: true
        });
      }
      _id = inicialDaPro.get('_id');
      return Backbone.history.navigate("comp/teste-progresso/" + _id, {
        trigger: true
      });
    };

    MainUnidadeLayout.prototype.gotoHome = function() {
      if (!App.user) {
        return Backbone.history.navigate('#comp/home', {
          trigger: true
        });
      }
    };

    MainUnidadeLayout.prototype.gotoVideo = function() {
      return Backbone.history.navigate('comp/video-player/' + this.model.get('img_video_apresentacao') + '/' + this.model.get('unidade'), {
        trigger: true
      });
    };

    MainUnidadeLayout.prototype.initialize = function() {
      var nuc, nucs;
      console.log(this.model, 'modelo unidade');
      if (!this.model.get('unidade')) {
        this.model.set('unidade', false);
      }
      if (!this.model.get('img_video_apresentacao')) {
        this.model.set('img_video_apresentacao', "");
      }
      if (!this.model.get('cor')) {
        this.model.set('corFonte', '#' + window.modulo.corPadrao);
        this.model.set('corIntro', 'eee');
        this.model.set('corElementos', window.modulo.corPadrao);
      } else {
        this.model.set('corFonte', 'white');
        this.model.set('corIntro', this.model.get('cor'));
        this.model.set('corElementos', this.model.get('cor'));
      }
      nuc = App.progresso.user.get('profissional');
      nucs = {
        '1': 1,
        '2': 0,
        '3': 2
      };
      this.model.set('nr_casos', this.collection.length);
      this.model.set('nr_atividades', this.model.get('atividades') ? this.model.get('atividades').length : 0);
      this.collection.comparator = function(at1, at2) {
        var isPro1, isPro2, nNucs1, nNucs2, pro1, pro2;
        pro1 = at1.get('pro');
        isPro1 = pro1[nucs[nuc]];
        nNucs1 = pro1.reduce(function(m, i) {
          if (i) {
            return m + 1;
          } else {
            return m;
          }
        });
        pro2 = at2.get('pro');
        isPro2 = at2.get('pro')[nucs[nuc]];
        nNucs2 = pro2.reduce(function(m, i) {
          if (i) {
            return m + 1;
          } else {
            return m;
          }
        });
        if (isPro1 && isPro2) {
          if (nNucs1 < nNucs2) {
            return -1;
          } else if (nNucs1 > nNucs2) {
            return 1;
          }
          return 0;
        } else if (isPro1) {
          return -1;
        } else if (isPro2) {
          return 1;
        }
        return 0;
      };
      return this.collection.sort();
    };

    MainUnidadeLayout.prototype.onRender = function() {
      return console.log(this.model.attributes.categories, 'modelo do render');
    };

    return MainUnidadeLayout;

  })(Marionette.CompositeView);
});
