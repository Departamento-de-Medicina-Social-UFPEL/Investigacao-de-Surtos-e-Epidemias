// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['backbone.modal', 'utils', 'uf_municipios'], function(ModalView, utils, Uf) {
  var Modal;
  return Modal = (function(_super) {
    __extends(Modal, _super);

    function Modal() {
      return Modal.__super__.constructor.apply(this, arguments);
    }

    Modal.prototype.initialize = function(cpf) {
      if (App.user) {
        this.cpf = App.user.cpf;
      } else {
        this.cpf = cpf;
      }
      return console.log(this.cpf, 'cpf');
    };

    Modal.prototype.template = _.template($('#enquetes-encerramento_oferta').html());

    Modal.prototype.submitEl = '.submit-form';

    Modal.prototype.cancelEl = '.close-modal';

    Modal.prototype.onRender = function() {
      var b;
      b = $('body');
      if (!b.is(':visible')) {
        b.fadeIn();
      }
      setTimeout((function() {
        return window.$.material.init();
      }), 10);
      this.$el.find('#inputCpf').val(this.cpf);
      if (this.cpf) {
        this.$el.find('#inputCpf').attr('disabled', true);
      }
      return this.marcaRespostas();
    };

    Modal.prototype.marcaRespostas = function() {
      var enquete, self;
      self = this;
      if (App.user.enquetes) {
        if (App.user.enquetes[App.moduloId]) {
          enquete = App.user.enquetes[App.moduloId].encerramento;
          if (enquete) {
            self.$el.find('input[name=optionRadios11][value=' + enquete['pergunta11'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios12][value=' + enquete['pergunta12'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios13][value=' + enquete['pergunta13'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios14][value=' + enquete['pergunta14'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios15][value=' + enquete['pergunta15'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios16][value=' + enquete['pergunta16'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios17][value=' + enquete['pergunta17'] + ']').prop('checked', true);
            self.$el.find('input[name=optionRadios18][value=' + enquete['pergunta18'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox21][value=' + enquete['pergunta21'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox22][value=' + enquete['pergunta22'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox23][value=' + enquete['pergunta23'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox24][value=' + enquete['pergunta24'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox25][value=' + enquete['pergunta25'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox26][value=' + enquete['pergunta26'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox27][value=' + enquete['pergunta27'] + ']').prop('checked', true);
            self.$el.find('input[name=optioncheckbox28][value=' + enquete['pergunta28'] + ']').prop('checked', true);
            return self.$el.find('input[name=optionRadios3][value=' + enquete['pergunta3'] + ']').prop('checked', true);
          }
        }
      }
    };

    Modal.prototype.onDestroy = function() {
      $('body').removeAttr('style').css({
        display: 'block'
      });
      $('body').css({
        'overflow': 'auto'
      });
      if (App.user) {
        if (!App.user.enquetes) {
          App.user['enquetes'] = {};
        }
        if (!App.user.enquetes[App.moduloId]) {
          App.user.enquetes[App.moduloId] = {};
        }
        if (!App.user.enquetes[App.moduloId].encerramento) {
          App.user.enquetes[App.moduloId].encerramento = {
            'naodesejoresponder': true
          };
          App.execute('storeUserEnquete', {
            cpf: App.user.cpf,
            modulo: App.moduloId,
            encerramento: App.user.enquetes[App.moduloId].encerramento
          }, function(resposta) {
            return console.log('nao desejo responder salvo server', resposta);
          });
        }
        App.execute('storeUserEnquete', App.user, function(resposta) {
          return window.location.href = 'https://dms.ufpel.edu.br/p2k';
        });
      }
      return window.location.href = 'https://dms.ufpel.edu.br/p2k';
    };

    Modal.prototype.beforeSubmit = function(ev) {
      var validUser;
      console.log('submit-form');
      this.hadFocus = this.$el.find('a.btn.submit-form');
      this.$el.find('.btn').attr('disabled', true);
      this.$el.find('input').attr('disabled', true);
      this.$el.find('select').attr('disabled', true);
      validUser = this.validaForm(false);
      if (validUser) {
        this.salvaUser(validUser);
      } else {
        this.$el.find('.btn').removeAttr('disabled');
        this.$el.find('input').removeAttr('disabled');
        this.$el.find('select').removeAttr('disabled');
      }
      return false;
    };

    Modal.prototype.events = {
      'click #fechar-enquete-encerramento': 'destroy'
    };

    Modal.prototype.exibeErro = function(mensagemErro) {
      this.$el.find('.alert').addClass('alert-danger');
      this.$el.find('.alert').empty();
      this.$el.find('.alert').append(mensagemErro);
      return this.$el.find('.alert').show();
    };

    Modal.prototype.limpaError = function(evt) {
      this.$el.find('.alert').removeClass('alert-warning alert-success').hide();
      $('.has-error').removeClass('has-error');
      $('.has-success').removeClass('has-success');
      return $('.has-warning').removeClass('has-warning');
    };

    Modal.prototype.concorda = function(evt) {
      var chk, el;
      el = $(evt.target);
      chk = el.attr('checked');
      if (chk === 'checked') {
        return el.removeAttr('checked');
      }
      return el.attr('checked', 'checked');
    };

    Modal.prototype.validaForm = function(silent) {
      var campoProblema, enquete, marcacoesPergunta2, mensagemErro, self;
      if (silent == null) {
        silent = true;
      }
      self = this;
      campoProblema = [];
      mensagemErro = '';
      if (self.$el.find('input[name=inputCpf]').val().trim().length !== 11) {
        campoProblema.push(self.$el.find('input[name=inputCpf]'));
        self.$el.find('input[name=inputCpf]').parent().parent().addClass('has-error');
        mensagemErro += 'CPF inválido.<br>';
      }
      if (!self.$el.find('input[name=optionRadios11]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios11]'));
        self.$el.find('input[name=optionRadios11]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.1 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios12]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios12]'));
        self.$el.find('input[name=optionRadios12]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.2 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios13]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios13]'));
        self.$el.find('input[name=optionRadios13]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.3 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios14]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios14]'));
        self.$el.find('input[name=optionRadios14]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.4 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios15]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios15]'));
        self.$el.find('input[name=optionRadios15]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.5 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios16]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios16]'));
        self.$el.find('input[name=optionRadios16]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.6 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios17]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios17]'));
        self.$el.find('input[name=optionRadios17]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.7 não foi respondida.<br>';
      }
      if (!self.$el.find('input[name=optionRadios18]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios18]'));
        self.$el.find('input[name=optionRadios18]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 1.8 não foi respondida.<br>';
      }
      marcacoesPergunta2 = 0;
      if (!self.$el.find('input[name=optioncheckbox21]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox22]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox23]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox24]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox25]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox26]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox27]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (!self.$el.find('input[name=optioncheckbox28]:checked').val()) {
        marcacoesPergunta2++;
      }
      if (marcacoesPergunta2 > 5) {
        campoProblema.push(self.$el.find('input[name=optionRadios28]'));
        self.$el.find('input[name=optionRadios21]').parent().parent().addClass('has-error');
        mensagemErro += 'Para pergunta 2 são necessárias pelo menos 3 marcações.<br>';
      }
      if (!self.$el.find('input[name=optionRadios3]:checked').val()) {
        campoProblema.push(self.$el.find('input[name=optionRadios3]'));
        self.$el.find('input[name=optionRadios3]').parent().parent().addClass('has-error');
        mensagemErro += 'A pergunta 3 não foi respondida.<br>';
      }
      if (campoProblema.length > 0) {
        this.$el.find('input').attr('disabled', false);
        this.$el.find('select').attr('disabled', false);
        this.exibeErro(mensagemErro);
        if (this.hadFocus.is('a.btn.submit-form')) {
          campoProblema[0].focus();
        }
        return false;
      } else {
        enquete = {
          'pergunta11': self.$el.find('input[name=optionRadios11]:checked').val(),
          'pergunta12': self.$el.find('input[name=optionRadios12]:checked').val(),
          'pergunta13': self.$el.find('input[name=optionRadios13]:checked').val(),
          'pergunta14': self.$el.find('input[name=optionRadios14]:checked').val(),
          'pergunta15': self.$el.find('input[name=optionRadios15]:checked').val(),
          'pergunta16': self.$el.find('input[name=optionRadios16]:checked').val(),
          'pergunta17': self.$el.find('input[name=optionRadios17]:checked').val(),
          'pergunta18': self.$el.find('input[name=optionRadios18]:checked').val(),
          'pergunta21': self.$el.find('input[name=optioncheckbox21]:checked').val(),
          'pergunta22': self.$el.find('input[name=optioncheckbox22]:checked').val(),
          'pergunta23': self.$el.find('input[name=optioncheckbox23]:checked').val(),
          'pergunta24': self.$el.find('input[name=optioncheckbox24]:checked').val(),
          'pergunta25': self.$el.find('input[name=optioncheckbox25]:checked').val(),
          'pergunta26': self.$el.find('input[name=optioncheckbox26]:checked').val(),
          'pergunta27': self.$el.find('input[name=optioncheckbox27]:checked').val(),
          'pergunta28': self.$el.find('input[name=optioncheckbox28]:checked').val(),
          'pergunta3': self.$el.find('input[name=optionRadios3]:checked').val()
        };
      }
      return {
        'cpf': self.$el.find('input[name=inputCpf]').val().trim(),
        'encerramento': enquete,
        'modulo': App.moduloId
      };
    };

    Modal.prototype.salvaUser = function(user) {
      var destroyCallback, self;
      self = this;
      self.$el.find('input').attr('disabled', true);
      self.$el.find('select').attr('disabled', true);
      self.$el.find('.alert').removeClass('alert-danger').addClass('alert-success').empty();
      destroyCallback = function() {
        if (App.modals.currentView) {
          setTimeout((function() {
            return App.modals.destroyAll();
          }), 1);
        }
        if (!App.main.currentView) {
          return Backbone.history.navigate('#comp/home', {
            trigger: true
          });
        }
      };
      self.$el.find('.alert').html('<h3>Enquete salva neste navegador</h3>');
      self.$el.find('.btn').attr('disabled', true);
      return App.execute('storeUserEnquete', user, function(resposta) {
        var erro;
        if (resposta.ok) {
          $('.dropdown-componentes').find('ul.dropdown-menu li').show();
          self.$el.find('.alert').html('<h3>Respostas da enquete salvas no servidor</h3>');
          self.$el.find('.alert').show();
          self.$el.find('.btn').hide();
          return setTimeout(destroyCallback(), 1000);
        } else {
          self.$el.find('.alert').removeClass('alert-success').addClass('alert-danger').empty();
          erro = '<h3>' + resposta.msg + '</h3>';
          self.$el.find('.btn').attr('disabled', false);
          self.$el.find('.alert').html(erro);
          return self.$el.find('.alert').show();
        }
      });
    };

    return Modal;

  })(Backbone.Modal);
});
