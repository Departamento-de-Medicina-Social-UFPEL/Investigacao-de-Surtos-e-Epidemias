// Generated by CoffeeScript 2.7.0
define(['../models/Resposta', '../models/Badge', '../collections/Badges'], function(RespostaModel, BadgeModel, BadgesColl) {
  var ProgressoManager;
  return ProgressoManager = (function() {
    class ProgressoManager extends Backbone.Collection {
      ['create'](resposta) {
        var res;
        res = this.add(resposta);
        this.geral = this.calculaProgressoGeral();
        if (!App.user) {
          return;
        }
        if (!this.badgesConcedidos) {
          this.badgesConcedidos = new BadgesColl();
        }
        this.badgesConcedidos.reset(this.temNovosBadges().models);
        this.saveLocal();
        return this.saveServer(res);
      }

      saveLocal() {
        var local, user;
        if (!App.local) {
          return;
        }
        ({local, user} = App);
        if (this.length > 0) {
          return local.set(`respostas-${user.cpf}`, this.toJSON());
        } else {
          throw new Error();
        }
      }

      saveServer(res) {
        if (!App.socket) {
          return;
        }
        return App.socket.emit("respondeu", res.toJSON(), function(data) {
          console.log("emit respondeu res  -> ", res.toJSON());
          console.log("emit respondeu data -> ", data);
          if (data.modulo === "63758ed55ebc0215731f6c36") { // Modulo de Investigação de surtos e pandemias.
            return App.execute('dashboard.calcProgresso', function(percent) {
              return console.log('novo progresso = ' + percent + '%');
            });
          }
        });
      }

      ['initialize'](options) {
        this.badgesConcedidos = new BadgesColl();
        this.badges = new BadgesColl(App.badges.toJSON());
        this.bind('add', this.onModelAdded, this);
        this.bind('remove', this.onModelRemoved, this);
        this.bind('change reset', this.onChange, this);
        this.bind('reset', this.onReset, this);
        return null;
      }

      ['onChange']() {
        var key;
        key = `respostas-${App.user.cpf}`;
        if (App.local) {
          App.local.set(key, this.toJSON());
        }
        if (App.progressoLateral) {
          if (App.progressoLateral.currentView) {
            return App.progressoLateral.currentView.render();
          }
        }
      }

      // throw new Error
      // @badgesConcedidos = @temNovosBadges()
      ['onReset']() {
        // throw new Error
        // console.log  "@calculaProgressoGeral reset", arguments
        this.geral = this.calculaProgressoGeral();
        return this.badgesConcedidos = this.temNovosBadges(true);
      }

      //aqui disparar render pagina inicial
      ['setUser'](user) {
        this.user = new Backbone.Model(user);
        this.badgesConcedidos = new BadgesColl(this.temNovosBadges(true).models);
        this.atividades = this.getAllAtividades();
        this.casos = this.getAllCasosByNucleo();
        return this.testes = this.getAllTestesByNucleo();
      }

      ['getByAtividadeId'](id) {
        return _.sortBy(this.where({
          atividade: id
        }), 'seqid');
      }

      ['onModelAdded'](model, collection, options) {
        if (this.user) {
          model.set('user', this.user.get('cpf'));
        }
        return model.set('modulo', window.modulo._id);
      }

      ['onModelRemoved'](model, collection, options) {
        // console.log  "@calculaProgressoGeral onModelRemoved"
        if (App.socket && App.socket.connected) {
          App.socket.emit("reiniciou", model.toJSON());
        }
        this.geral = this.calculaProgressoGeral();
        return this.badgesConcedidos.reset(this.temNovosBadges(true).models);
      }

      calculaProgressoGeral(callback) {
        var _id, ativConcluida, ativEhDoNucleo, atividade, atividadesPorUnidade, escore, geral, i, initialUnit, j, k, key, len, len1, len2, numAtiv, numAtivConcluido, numAtivConcluidos, numCasos, numCasosConcluidos, numCasosConcluidosNucleo, numCasosConcluidosNucleoEnfermagem, numCasosConcluidosNucleoInterdisciplinar, numCasosConcluidosNucleoMedicina, numCasosConcluidosNucleoOdontologia, numCasosIniciados, numCasosNucleo, numCasosNucleoEnfermagem, numCasosNucleoInterdisciplinar, numCasosNucleoMedicina, numCasosNucleoOdontologia, numCasosUnidade, numQuestoes, numQuestoesCaso, numQuestoesCasoRespondidas, numQuestoesTeste, numQuestoesTesteNucleoEnfermagem, numQuestoesTesteNucleoInterdisciplinar, numQuestoesTesteNucleoMedicina, numQuestoesTesteNucleoOdontologia, numQuestoesTesteRespondidas, numQuestoesTesteRespondidasNucleoEnfermagem, numQuestoesTesteRespondidasNucleoInterdisciplinar, numQuestoesTesteRespondidasNucleoMedicina, numQuestoesTesteRespondidasNucleoOdontologia, numQuestoesTesteUnidade, numTestes, numTestesConcluidos, numTestesConcluidosNucleo, numTestesConcluidosNucleoEnfermagem, numTestesConcluidosNucleoInterdisciplinar, numTestesConcluidosNucleoMedicina, numTestesConcluidosNucleoOdontologia, numTestesIniciados, percAcertoPosTeste, percAcertoPosTesteEnfermagem, percAcertoPosTesteInterdisciplinar, percAcertoPosTesteMedicina, percAcertoPosTesteOdontologia, percAcertoPreTeste, percAcertoPreTesteEnfermagem, percAcertoPreTesteInterdisciplinar, percAcertoPreTesteMedicina, percAcertoPreTesteOdontologia, percAcertoTestesNucleo, percAcertoTestesNucleoEnfermagem, percAcertoTestesNucleoInterdisciplinar, percAcertoTestesNucleoMedicina, percAcertoTestesNucleoOdontologia, percAtivConcluTotal, percAtivQuestRespTotal, percAtivQuestTotal, percAtivTotal, percCasosConcluNucleo, percCasosConcluNucleoEnfermagem, percCasosConcluNucleoInterdisciplinar, percCasosConcluNucleoMedicina, percCasosConcluNucleoOdontologia, percCasosConcluTotal, percCasosRespTotal, percCasosTotal, percGeralAcertoCasos, percGeralAcertoCasosNucleo, percGeralAcertoCasosNucleoEnfermagem, percGeralAcertoCasosNucleoInterdisciplinar, percGeralAcertoCasosNucleoMedicina, percGeralAcertoCasosNucleoOdontologia, percGeralAcertoTestes, percPosTesteUnidade, percTestesConcluTotal, percTestesRespTotal, percTestesTotal, porAtividade, posTeste, posTesteEnfermagem, posTesteInterdisciplinar, posTesteMedicina, posTesteOdontologia, posTesteUnidade, preTeste, preTesteEnfermagem, preTesteInterdisciplinar, preTesteMedicina, preTesteOdontologia, preTesteUnidade, profissional, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade, self, u, unidade, unidades;
        // console.log "CalculaProgresso #{@conta++}"
        //@models  is  respostas
        // @resolveCasosBloqueados()
        self = this;
        if (!this.elegivel) {
          this.elegivel = {
            medicina: "",
            enfermagem: "",
            odontologia: "",
            interdisciplinar: ''
          };
        } else {
          if (!this.elegivel.medicina) {
            this.elegivel.medicina = "";
          }
          if (!this.elegivel.enfermagem) {
            this.elegivel.enfermagem = "";
          }
          if (!this.elegivel.odontologia) {
            this.elegivel.odontologia = "";
          }
          if (!this.elegivel.interdisciplinar) {
            this.elegivel.interdisciplinar = "";
          }
        }
        profissional = self.user.get('profissional');
        if (!this.models) {
          return false;
        }
        //console.log @models,@models, 'modelos', App.atividades, @atividades
        respostasPorAtividade = _.groupBy(this.models, function(item) {
          return item.get('atividade');
        });
        atividadesPorUnidade = _.groupBy(this.getAllAtividades(), function(item) {
          return item.unidade;
        });
        unidades = _.where(window.modulo.components, {
          folder: 'unidade-progresso'
        }).map(function(c) {
          return c.unidade;
        });
        unidades = unidades.filter(function(u) {
          if (u) {
            return true;
          } else {
            return false;
          }
        });
        //console.log unidades, 'unidades', atividadesPorUnidade, 'atividadesPorUnidade', respostasPorAtividade, 'respostasPorAtividade'
        initialUnit = [];
        for (i = 0, len = unidades.length; i < len; i++) {
          u = unidades[i];
          initialUnit.push({});
        }
        unidade = {};
        preTesteUnidade = posTesteUnidade = percPosTesteUnidade = numTestesConcluidos = numCasosUnidade = numCasosIniciados = percGeralAcertoCasos = numCasosConcluidos = numTestesIniciados = numQuestoesTesteUnidade = numQuestoesTesteRespondidas = {};
        for (j = 0, len1 = unidades.length; j < len1; j++) {
          u = unidades[j];
          unidade[u] = {
            preTesteUnidade: false,
            posTesteUnidade: false,
            numCasosConcluidos: 0.0,
            percPosTesteUnidade: 0.0,
            numCasosIniciados: 0.0,
            numTestesIniciados: 0.0,
            numTestesConcluidos: 0.0,
            numQuestoesTesteRespondidas: 0.0,
            numQuestoesTesteUnidade: 0.0,
            percGeralAcertoCasos: 0.0,
            percAcertoTestes: 0.0,
            percCasosConcluUnidade: 0.0,
            percAcertoPreTeste: 0.0,
            percAcertoPosTeste: 0.0
          };
        }
        //console.log 'unidadessssssss',u, unidade[u]
        // console.log @models
        // console.log respostasPorAtividade, 'respostasPorAtividade'
        //cicla groupby - para  cada atividade
        posTeste = preTeste = false;
        posTesteEnfermagem = preTesteEnfermagem = false;
        posTesteMedicina = preTesteMedicina = false;
        posTesteOdontologia = preTesteOdontologia = false;
        posTesteInterdisciplinar = preTesteInterdisciplinar = false;
        percTestesTotal = percCasosRespTotal = percTestesRespTotal = percAtivQuestTotal = percAcertoPosTeste = percAcertoPreTeste = 0.0;
        numCasosIniciados = numTestes = numAtiv = numQuestoesCasoRespondidas = numQuestoesTesteRespondidas = numTestesConcluidos = 0.0;
        numQuestoesCaso = numQuestoes = numQuestoesTeste = numAtivConcluido = numCasos = numCasosNucleo = numTestesIniciados = percCasosTotal = 0.0;
        numTestesConcluidosNucleo = numCasosConcluidos = numCasosConcluidosNucleo = percGeralAcertoCasos = percGeralAcertoCasosNucleo = percGeralAcertoTestes = percAtivTotal = 0.0;
        percAcertoTestesNucleoEnfermagem = percAcertoTestesNucleoMedicina = percAcertoTestesNucleoOdontologia = percGeralAcertoCasosNucleoEnfermagem = percGeralAcertoCasosNucleoMedicina = percGeralAcertoCasosNucleoOdontologia = percGeralAcertoCasosNucleoInterdisciplinar = 0.0;
        percCasosConcluNucleoEnfermagem = percCasosConcluNucleoMedicina = percCasosConcluNucleoOdontologia = percCasosConcluNucleoInterdisciplinar = 0.0;
        numCasosConcluidosNucleoEnfermagem = numCasosConcluidosNucleoMedicina = numCasosConcluidosNucleoOdontologia = numCasosConcluidosNucleoInterdisciplinar = 0.0;
        numCasosNucleoEnfermagem = numCasosNucleoMedicina = numCasosNucleoOdontologia = numCasosNucleoInterdisciplinar = 0.0;
        numTestesConcluidosNucleoEnfermagem = numTestesConcluidosNucleoMedicina = numTestesConcluidosNucleoOdontologia = numTestesConcluidosNucleoInterdisciplinar = 0.0;
        numQuestoesTesteRespondidasNucleoEnfermagem = numQuestoesTesteRespondidasNucleoMedicina = numQuestoesTesteRespondidasNucleoOdontologia = numQuestoesTesteRespondidasNucleoInterdisciplinar = 0.0;
        numQuestoesTesteNucleoEnfermagem = numQuestoesTesteNucleoMedicina = numQuestoesTesteNucleoOdontologia = numQuestoesTesteNucleoInterdisciplinar = 0.0;
        percAcertoPosTesteEnfermagem = percAcertoPosTesteMedicina = percAcertoPosTesteOdontologia = percAcertoPosTesteInterdisciplinar = 0.0;
        percAcertoPreTesteEnfermagem = percAcertoPreTesteMedicina = percAcertoPreTesteOdontologia = percAcertoPreTesteInterdisciplinar = 0.0;
        for (_id in respostasPorAtividade) {
          respostasDaAtividade = respostasPorAtividade[_id];
          //pega a atividade global pelo id
          atividade = _.findWhere(this.atividades, {_id});
          if (!atividade) {
            continue;
          }
          //pega as questoes da atividade
          questoesDaAtividade = atividade.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          escore = 0.0;
          for (key = k = 0, len2 = respostasDaAtividade.length; k < len2; key = ++k) {
            respAtiv = respostasDaAtividade[key];
            escore += respAtiv.get('escore');
          }
          if (respostasDaAtividade.length > 0) {
            escore = escore / respostasDaAtividade.length;
          } else {
            escore = 0;
          }
          ativConcluida = questoesDaAtividade.length <= respostasDaAtividade.length && escore >= 70.00;
          //if ['6081742341e46f51549e042a','6082ccff41e46f7a6cd06fb3', '60eb810e41e46f582d9acd4e'].indexOf(atividade._id) > -1
          //''  console.log questoesDaAtividade.length , respostasDaAtividade.length , escore >= 70.00, escore , 'atividade concluida?', atividade._id
          ativEhDoNucleo = this.ehDoNucleo(atividade, profissional);
          //console.log atividade, ativConcluida, 'respostasDaAtividade', respostasDaAtividade, atividade.unidade
          //pega o numero de questoes caso/test - +leng th em questoes total e +1 no numCasos/numTest
          // console.log atividade
          // console.log atividade.tipo
          switch (atividade.tipo) {
            case 'saibamais':
              numCasosIniciados++;
              if (atividade.unidade) {
                unidade[atividade.unidade].numCasosIniciados++;
              }
              if (ativConcluida) {
                numQuestoesCasoRespondidas += respostasDaAtividade.length;
                percGeralAcertoCasos += escore;
                numCasosConcluidos++;
                if (ativEhDoNucleo) {
                  percGeralAcertoCasosNucleo += escore;
                  numCasosConcluidosNucleo++;
                }
                //adicionado para calcular nucleos separadamente
                if (self.ehDoNucleoByNucleo(atividade, 1)) {
                  percGeralAcertoCasosNucleoEnfermagem += escore;
                  numCasosConcluidosNucleoEnfermagem++;
                }
                if (self.ehDoNucleoByNucleo(atividade, 2)) {
                  percGeralAcertoCasosNucleoMedicina += escore;
                  numCasosConcluidosNucleoMedicina++;
                }
                if (self.ehDoNucleoByNucleo(atividade, 3)) {
                  percGeralAcertoCasosNucleoOdontologia += escore;
                  numCasosConcluidosNucleoOdontologia++;
                }
                if (atividade.unidade) {
                  unidade[atividade.unidade].percGeralAcertoCasos += escore;
                  unidade[atividade.unidade].numCasosConcluidos++;
                }
              }
              break;
            case 'caso':
              numCasosIniciados++;
              if (atividade.unidade) {
                unidade[atividade.unidade].numCasosIniciados++;
              }
              if (ativConcluida) {
                numQuestoesCasoRespondidas += respostasDaAtividade.length;
                percGeralAcertoCasos += escore;
                numCasosConcluidos++;
                if (ativEhDoNucleo) {
                  percGeralAcertoCasosNucleo += escore;
                  numCasosConcluidosNucleo++;
                }
                //adicionado para calcular nucleos separadamente
                if (self.ehDoNucleoByNucleo(atividade, 1)) {
                  percGeralAcertoCasosNucleoEnfermagem += escore;
                  numCasosConcluidosNucleoEnfermagem++;
                }
                if (self.ehDoNucleoByNucleo(atividade, 2)) {
                  percGeralAcertoCasosNucleoMedicina += escore;
                  numCasosConcluidosNucleoMedicina++;
                }
                if (self.ehDoNucleoByNucleo(atividade, 3)) {
                  percGeralAcertoCasosNucleoOdontologia += escore;
                  numCasosConcluidosNucleoOdontologia++;
                }
                if (atividade.unidade) {
                  unidade[atividade.unidade].percGeralAcertoCasos += escore;
                  unidade[atividade.unidade].numCasosConcluidos++;
                }
              }
              break;
            //console.log 'eeeeeeeeeeeeee', unidade[atividade.unidade].percGeralAcertoCasos,unidade[atividade.unidade].numCasosConcluidos, escore
            case 'teste':
              numTestesIniciados++;
              numQuestoesTesteNucleoInterdisciplinar += respostasDaAtividade.length;
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                numQuestoesTesteNucleoEnfermagem += questoesDaAtividade.length;
                numQuestoesTesteRespondidasNucleoEnfermagem += respostasDaAtividade.length;
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                numQuestoesTesteNucleoMedicina += questoesDaAtividade.length;
                numQuestoesTesteRespondidasNucleoMedicina += respostasDaAtividade.length;
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                numQuestoesTesteNucleoOdontologia += questoesDaAtividade.length;
                numQuestoesTesteRespondidasNucleoOdontologia += respostasDaAtividade.length;
              }
              if (atividade.unidade) {
                console.log(atividade, unidade);
                unidade[atividade.unidade].numTestesIniciados++;
                unidade[atividade.unidade].numQuestoesTesteUnidade += questoesDaAtividade.length;
                unidade[atividade.unidade].numQuestoesTesteRespondidas += respostasDaAtividade.length;
              }
              if (ativConcluida) {
                numTestesConcluidos++;
                numTestesConcluidosNucleoInterdisciplinar++;
              }
              percGeralAcertoTestes += escore;
              numQuestoesTesteRespondidas += respostasDaAtividade.length;
              numQuestoesTesteRespondidasNucleoInterdisciplinar += respostasDaAtividade.length;
              if (ativEhDoNucleo) {
                percAcertoTestesNucleo = escore;
                numTestesConcluidosNucleo++;
                if (atividade.posTeste) {
                  percAcertoPosTeste = escore;
                  if (ativConcluida) {
                    posTeste = true;
                    posTesteInterdisciplinar = true;
                  }
                } else {
                  percAcertoPreTeste = escore;
                  if (ativConcluida) {
                    preTeste = true;
                    preTesteInterdisciplinar = true;
                  }
                }
              }
              if (atividade.posTeste) {
                percAcertoPosTesteInterdisciplinar = escore;
                if (self.ehDoNucleoByNucleo(atividade, 1)) {
                  percAcertoPosTesteEnfermagem = escore;
                  if (ativConcluida) {
                    posTesteEnfermagem = true;
                  }
                }
                if (self.ehDoNucleoByNucleo(atividade, 2)) {
                  percAcertoPosTesteMedicina = escore;
                  if (ativConcluida) {
                    posTesteMedicina = true;
                  }
                }
                if (self.ehDoNucleoByNucleo(atividade, 3)) {
                  percAcertoPosTesteOdontologia = escore;
                  if (ativConcluida) {
                    posTesteOdontologia = true;
                  }
                }
                if (atividade.unidade) {
                  unidade[atividade.unidade].percAcertoPosTeste = escore;
                  if (ativConcluida) {
                    unidade[atividade.unidade].posTesteUnidade = true;
                    unidade[atividade.unidade].numTestesConcluidos++;
                  }
                }
              } else {
                percAcertoPreTesteInterdisciplinar = escore;
                if (self.ehDoNucleoByNucleo(atividade, 1)) {
                  percAcertoPreTesteEnfermagem = escore;
                  if (ativConcluida) {
                    preTesteEnfermagem = true;
                  }
                }
                if (self.ehDoNucleoByNucleo(atividade, 2)) {
                  percAcertoPreTesteMedicina = escore;
                  if (ativConcluida) {
                    preTesteMedicina = true;
                  }
                }
                if (self.ehDoNucleoByNucleo(atividade, 3)) {
                  percAcertoPreTesteOdontologia = escore;
                  if (ativConcluida) {
                    preTesteOdontologia = true;
                  }
                }
                if (atividade.unidade) {
                  unidade[atividade.unidade].percAcertoPreTeste = escore;
                  if (ativConcluida) {
                    unidade[atividade.unidade].preTeste = true;
                  }
                }
              }
              //adicionado para calcular nucleos separadamente
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                percAcertoTestesNucleoEnfermagem += escore;
                if (ativConcluida) {
                  numTestesConcluidosNucleoEnfermagem++;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                percAcertoTestesNucleoMedicina += escore;
                if (ativConcluida) {
                  numTestesConcluidosNucleoMedicina++;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                percAcertoTestesNucleoOdontologia += escore;
                if (ativConcluida) {
                  numTestesConcluidosNucleoOdontologia++;
                }
              }
              if (atividade.unidade) {
                unidade[atividade.unidade].percAcertoTestes += escore;
                if (ativConcluida) {
                  unidade[atividade.unidade].numTestesConcluidos++;
                  unidade[atividade.unidade].numTestesConcluidos++;
                }
              }
          }
          if (ativConcluida) {
            //se concluida +1 em concluida
            numAtivConcluido++;
          }
        }
        // fim do for respostasPorAtividade
        numAtiv = (this.getAllAtividades()).length;
        numCasos = (this.getAllCasosByNucleo()).length;
        numCasosNucleo = (this.getAllCasosByNucleo(profissional)).length;
        //numCasosNucleo = (@getAllCasosByNucleo()).filter((c)-> self.ehDoNucleo(c, profissional)).length
        numCasosNucleoEnfermagem = (this.getAllCasosByNucleo()).filter(function(c) {
          return self.ehDoNucleoByNucleo(c, 1);
        }).length;
        numCasosNucleoMedicina = (this.getAllCasosByNucleo()).filter(function(c) {
          return self.ehDoNucleoByNucleo(c, 2);
        }).length;
        numCasosNucleoOdontologia = (this.getAllCasosByNucleo()).filter(function(c) {
          return self.ehDoNucleoByNucleo(c, 3);
        }).length;
        //console.log profissional, numCasosNucleo,numCasosConcluidosNucleo, numCasosNucleoEnfermagem, numCasosConcluidosNucleoEnfermagem, 'casos percent'
        unidades.forEach(function(u) {
          var uni;
          uni = atividadesPorUnidade[u];
          if (!uni) {
            return;
          }
          return unidade[u].numCasosUnidade = uni.filter(function(c) {
            return c.tipo === 'caso' || c.tipo === 'saibamais';
          }).length;
        });
        numTestes = (this.getAllTestesByNucleo()).length;
        numQuestoesTeste = (this.getQuestAllTestes()).length;
        numQuestoesCaso = (this.getQuestAllCasos()).length;
        numQuestoes = numQuestoesCaso + numQuestoesTeste;
        numAtivConcluidos = numTestesConcluidos + numCasosConcluidos;
        percCasosConcluTotal = this.calcPercentagem(numCasosConcluidos, numCasos);
        percCasosConcluNucleo = this.calcPercentagem(numCasosConcluidosNucleo, numCasosNucleo);
        //progresso nucleos
        percCasosConcluNucleoEnfermagem = this.calcPercentagem(numCasosConcluidosNucleoEnfermagem, numCasosNucleoEnfermagem);
        percCasosConcluNucleoMedicina = this.calcPercentagem(numCasosConcluidosNucleoMedicina, numCasosNucleoMedicina);
        percCasosConcluNucleoOdontologia = this.calcPercentagem(numCasosConcluidosNucleoOdontologia, numCasosNucleoOdontologia);
        percCasosConcluNucleoInterdisciplinar = this.calcPercentagem(numCasosConcluidos, numCasos);
        self = this;
        // console.log(numCasosConcluidosNucleoOdontologia , numCasosNucleoOdontologia, 'teste')
        percCasosRespTotal = this.calcPercentagem(numQuestoesCasoRespondidas, numQuestoesCaso);
        percTestesConcluTotal = this.calcPercentagem(numTestesConcluidos, numTestes);
        percTestesRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas, numQuestoesTeste);
        percAtivConcluTotal = this.calcPercentagem(numAtivConcluidos, numAtiv);
        percAtivQuestRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas + numQuestoesCasoRespondidas, numQuestoesTeste + numQuestoesCaso);
        if (numCasosConcluidosNucleo > 0) {
          percGeralAcertoCasosNucleo = percGeralAcertoCasosNucleo / numCasosConcluidosNucleo;
        }
        if (numCasosConcluidosNucleoEnfermagem > 0) {
          //progresso nucleos
          percGeralAcertoCasosNucleoEnfermagem = percGeralAcertoCasosNucleoEnfermagem / numCasosConcluidosNucleoEnfermagem;
        }
        if (numCasosConcluidosNucleoMedicina > 0) {
          percGeralAcertoCasosNucleoMedicina = percGeralAcertoCasosNucleoMedicina / numCasosConcluidosNucleoMedicina;
        }
        if (numCasosConcluidosNucleoOdontologia > 0) {
          percGeralAcertoCasosNucleoOdontologia = percGeralAcertoCasosNucleoOdontologia / numCasosConcluidosNucleoOdontologia;
        }
        if (numCasosConcluidos > 0) {
          percGeralAcertoCasosNucleoInterdisciplinar = percGeralAcertoCasos / numCasosConcluidos;
        }
        if (numTestesConcluidos > 0) {
          percGeralAcertoTestes = percGeralAcertoTestes / numTestesConcluidos;
        }
        if (numTestesConcluidosNucleo > 0) {
          percAcertoTestesNucleo = percAcertoTestesNucleo / numTestesConcluidosNucleo;
        }
        if (numTestesConcluidosNucleoEnfermagem > 0) {
          percAcertoTestesNucleoEnfermagem = percAcertoTestesNucleoEnfermagem / numTestesConcluidosNucleoEnfermagem;
        }
        if (numTestesConcluidosNucleoMedicina > 0) {
          percAcertoTestesNucleoMedicina = percAcertoTestesNucleoMedicina / numTestesConcluidosNucleoMedicina;
        }
        if (numTestesConcluidosNucleoOdontologia > 0) {
          percAcertoTestesNucleoOdontologia = percAcertoTestesNucleoOdontologia / numTestesConcluidosNucleoOdontologia;
        }
        percAcertoTestesNucleoInterdisciplinar = percGeralAcertoTestes;
        if (numCasosConcluidos > 0) {
          percGeralAcertoCasos = percGeralAcertoCasos / numCasosConcluidos;
        }
        porAtividade = this.getProgressoPorAtividades();
        preTesteInterdisciplinar = preTeste;
        geral = {
          percCasosRespTotal,
          percCasosConcluTotal,
          percTestesConcluTotal,
          percTestesRespTotal,
          percAtivConcluTotal,
          percAtivQuestRespTotal,
          numQuestoesTeste,
          numAtivConcluido,
          numCasos,
          numTestes,
          numQuestoesTesteRespondidasNucleoEnfermagem,
          numQuestoesTesteRespondidasNucleoMedicina,
          numQuestoesTesteRespondidasNucleoOdontologia,
          numQuestoesTesteRespondidasNucleoInterdisciplinar,
          numQuestoesTesteNucleoEnfermagem,
          numQuestoesTesteNucleoMedicina,
          numQuestoesTesteNucleoOdontologia,
          numQuestoesTesteNucleoInterdisciplinar,
          percAcertoPosTeste,
          percAcertoPreTeste,
          percAcertoPosTesteEnfermagem,
          percAcertoPreTesteEnfermagem,
          percAcertoPosTesteMedicina,
          percAcertoPreTesteMedicina,
          percAcertoPosTesteOdontologia,
          percAcertoPreTesteOdontologia,
          percAcertoPosTesteInterdisciplinar,
          percAcertoPreTesteInterdisciplinar,
          posTeste,
          preTeste,
          posTesteEnfermagem,
          preTesteEnfermagem,
          posTesteMedicina,
          preTesteMedicina,
          posTesteOdontologia,
          preTesteOdontologia,
          posTesteInterdisciplinar,
          preTesteInterdisciplinar,
          percGeralAcertoTestes,
          percAcertoTestesNucleoEnfermagem,
          percAcertoTestesNucleoMedicina,
          percAcertoTestesNucleoOdontologia,
          percAcertoTestesNucleoInterdisciplinar,
          percGeralAcertoCasosNucleoEnfermagem,
          percGeralAcertoCasosNucleoMedicina,
          percGeralAcertoCasosNucleoOdontologia,
          percGeralAcertoCasosNucleoInterdisciplinar,
          percCasosConcluNucleoEnfermagem,
          percCasosConcluNucleoMedicina,
          percCasosConcluNucleoOdontologia,
          percCasosConcluNucleoInterdisciplinar,
          numQuestoesCaso,
          numTestesIniciados,
          numCasosIniciados,
          numTestesConcluidos,
          numQuestoesCasoRespondidas,
          numQuestoesCaso,
          numQuestoesTesteRespondidas,
          numTestesConcluidosNucleo,
          numAtiv,
          numCasosConcluidos,
          numQuestoes,
          percCasosConcluNucleo,
          numCasosConcluidosNucleo,
          percGeralAcertoCasosNucleo,
          numCasosNucleo,
          percGeralAcertoCasos,
          porAtividade,
          unidade: unidade
        };
        //console.log unidades, 'unidades'#
        if (unidades.length > 0) {
          unidades.forEach(function(u) {
            //console.log 'unidade', u
            return geral.unidade[u] = {
              numCasosUnidade: unidade[u].numCasosUnidade,
              numCasosConcluidos: unidade[u].numCasosConcluidos ? unidade[u].numCasosConcluidos : 0,
              numCasosIniciados: unidade[u].numCasosIniciados ? unidade[u].numCasosIniciados : 0,
              numTestesIniciados: unidade[u].numTestesIniciados ? unidade[u].numTestesIniciados : 0,
              posTesteUnidade: unidade[u].posTesteUnidade ? unidade[u].posTesteUnidade : false,
              preTesteUnidade: unidade[u].preTesteUnidade ? unidade[u].preTesteUnidade : false,
              numTestesConcluidos: unidade[u].numTestesConcluidos ? unidade[u].numTestesConcluidos : 0,
              numQuestoesTesteRespondidas: unidade[u].numQuestoesTesteRespondidas ? unidade[u].numQuestoesTesteRespondidas : 0,
              numQuestoesTesteUnidade: unidade[u].numQuestoesTesteUnidade ? unidade[u].numQuestoesTesteUnidade : 0,
              percCasosConclu: self.calcPercentagem(unidade[u].numCasosConcluidos, unidade[u].numCasosUnidade),
              percGeralAcertoCasos: self.calcPercentagem(unidade[u].percGeralAcertoCasos, unidade[u].numCasosConcluidos),
              percAcertoTestes: unidade[u].percAcertoTestes > 0 ? unidade[u].percAcertoTestes / unidade[u].numTestesConcluidos : 0.0,
              percAcertoPreTeste: unidade[u].percAcertoPreTeste ? unidade[u].percAcertoPreTeste : 0,
              percAcertoPosTeste: unidade[u].percAcertoPosTeste ? unidade[u].percAcertoPosTeste : 0
            };
          });
        }
        this.geral = geral;
        if (callback) {
          callback();
        }
        return geral;
      }

      calcPercentagem(vparcial, vtotal) {
        var perc;
        if (vparcial === 0) {
          return 0.0;
        }
        return perc = parseFloat(100 * vparcial) / vtotal;
      }

      getAllAtividades() {
        return App.atividades.toJSON();
      }

      getAllCasosByNucleo(nuc) {
        var self;
        if (!nuc) {
          return App.casos.toJSON();
        }
        self = this;
        nuc = self.user.get('profissional');
        return App.casos.toJSON().filter(function(atividade) {
          return self.ehDoNucleo(atividade, nuc);
        });
      }

      ehDoNucleo(atividade, nuc) {
        var self;
        self = this;
        nuc = parseInt(nuc);
        // nuc = self.user.get('profissional')
        if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
          return true;
        }
        if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
          return true;
        }
        if (atividade.pro[2] && (nuc === '3' || nuc === 3)) {
          return true;
        }
        if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
          return true;
        }
        return false;
      }

      ehDoNucleoByNucleo(atividade, nuc) {
        var self;
        self = this;
        if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
          return true;
        }
        if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
          return true;
        }
        if (atividade.pro[2] && (nuc === '3' || nuc === 3)) {
          return true;
        }
        if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
          return true;
        }
        return false;
      }

      getQuestAllCasos() {
        var casos, i, key, len, questUmcaso, questsCasos, val;
        casos = this.getAllCasosByNucleo();
        questsCasos = [];
        for (key = i = 0, len = casos.length; i < len; key = ++i) {
          val = casos[key];
          questUmcaso = val.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          questsCasos = questsCasos.concat(questUmcaso);
        }
        return questsCasos;
      }

      getAllTestesByNucleo(nuc) {
        var self;
        self = this;
        if (!nuc) {
          return App.testes.toJSON();
        }
        return App.testes.toJSON().filter(function(atividade) {
          return self.ehDoNucleo(atividade);
        });
      }

      getQuestAllTestes(nuc) {
        var Tests, i, key, len, questUmcaso, questsTests, val;
        Tests = this.getAllTestesByNucleo(nuc);
        questsTests = [];
        for (key = i = 0, len = Tests.length; i < len; key = ++i) {
          val = Tests[key];
          questUmcaso = val.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          questsTests = questsTests.concat(questUmcaso);
        }
        return questsTests;
      }

      getPercAtivTotal(numAtivConcluidos, numAtiv) {
        if (numAtivConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numAtivConcluidos) / numAtiv;
      }

      getPercCasosTotal(numCasosConcluidos, numCasos) {
        if (numCasosConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numCasosConcluidos) / numCasos;
      }

      getPercTestesTotal(numTestesConcluidos, numTeste) {
        if (numTestesConcluidos === 0) {
          return 0.0;
        }
        return parseFloat(100 * numTestesConcluidos) / numTeste;
      }

      getProgressoPorAtividades() {
        var _id, ativConcluida, atividade, escore, i, key, len, numQuestoesRespondidas, numQuestoesTotais, percConclusao, porAtiv, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade;
        respostasPorAtividade = _.groupBy(this.models, function(item) {
          return item.get('atividade');
        });
        porAtiv = {};
        for (_id in respostasPorAtividade) {
          respostasDaAtividade = respostasPorAtividade[_id];
          //pega a atividade global pelo id
          atividade = _.findWhere(this.atividades, {_id});
          //if atividade._id is "537b80e241e46f4367000000"
          if (!atividade) {
            continue;
          }
          //console.log 'respostasDaAtividade', respostasDaAtividade
          //pega as questoes da atividade
          questoesDaAtividade = atividade.slides.filter(function(slide) {
            return /quest/img.test(slide.tipo);
          });
          escore = 0.0;
          for (key = i = 0, len = respostasDaAtividade.length; i < len; key = ++i) {
            respAtiv = respostasDaAtividade[key];
            escore += respAtiv.get('escore');
          }
          escore = escore / respostasDaAtividade.length;
          ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
          numQuestoesRespondidas = respostasDaAtividade.length;
          numQuestoesTotais = questoesDaAtividade.length;
          percConclusao = this.calcPercentagem(numQuestoesRespondidas, numQuestoesTotais);
          //pega o numero de questoes caso/test - +length em questoes total e +1 no numCasos/numTest
          //se concluida +1 em concluida
          //numAtivConcluido++ if ativConcluida
          porAtiv[_id] = {
            escore,
            ativConcluida,
            numQuestoesTotais,
            tipo: atividade.tipo,
            numQuestoesRespondidas,
            percConclusao
          };
        }
        return this.geral.porAtividade = porAtiv;
      }

      temNovosBadges(silent = false) {
        var aConceder, bad, badgesConcedidos, i, ids, len, ref, self;
        self = this;
        // console.log @badges
        //numConcedidos = @badgesConcedidos.length
        badgesConcedidos = new BadgesColl();
        if (!silent) {
          badgesConcedidos = this.badgesConcedidos;
        }
        aConceder = new BadgesColl();
        // console.log badgesConcedidos
        this.badges.each(function(badge) {
          var asQueTem, ativ, foiDado, idAtividade, novoBadge, pool, ref, results, rules;
          // console.log badge.name
          //se tem id de atividade
          if (badge.get('idAtiv') === '') {
            ref = self.geral.porAtividade;
            //clica as atividades para ver se cada uma tem badge
            results = [];
            for (idAtividade in ref) {
              ativ = ref[idAtividade];
              // console.log badge.name
              // console.log idAtividade, ativ, 'umaAtiv'
              //verifica se tem badge para a atividade
              asQueTem = badge.get('rules').filter(function(regra) {
                //console.log ativ, 'ativ'
                return regra.test(ativ);
              });
              // console.log 'asQueTem', asQueTem.length, badge.get('rules').length
              //se merece badge
              if (asQueTem.length === badge.get('rules').length) {
                //verifica se já foi dado
                // console.log self.badgesConcedidos
                foiDado = badgesConcedidos.where({
                  _id: badge.get('_id'),
                  idAtiv: idAtividade
                });
                //se não foi dado
                if (foiDado.length === 0) {
                  //da
                  rules = badge.get('rules');
                  badge.unset('rules');
                  novoBadge = badge.clone();
                  badge.set('rules', rules);
                  novoBadge.set('idAtiv', idAtividade);
                  // console.log 'novoBadge', novoBadge
                  aConceder.add(novoBadge);
                }
              }
              results.push(null);
            }
            return results;
          } else {
            // console.log self.geral, 'geral'
            pool = self.geral;
            if (!pool) {
              pool = self.calculaProgressoGeral();
            }
            asQueTem = badge.get('rules').filter(function(regra) {
              // console.log badge.name
              return regra.test(pool);
            });
            // console.log asQueTem, 'asQueTem'
            //se merece badge
            if (asQueTem.length === badge.get('rules').length) {
              foiDado = badgesConcedidos.where({
                _id: badge.get('_id')
              });
              // console.log foiDado, 'foiDado'
              //se não foi dado
              if (foiDado.length === 0) {
                //da
                // console.log '-----------',badge
                return aConceder.add(badge);
              }
            }
          }
        });
        ref = aConceder.models;
        // console.log 'badgesConcedidos', badgesConcedidos, aConceder
        // console.log arguments
        for (i = 0, len = ref.length; i < len; i++) {
          bad = ref[i];
          if (bad instanceof BadgeModel) {
            // console.log bad
            badgesConcedidos.add(bad);
          }
        }
        if (!silent && aConceder.length > 0) {
          // console.log 'sdkfhasldkfhsalkjfhsad', aConceder
          ids = aConceder.map(function(badge) {
            return badge.get('_id');
          });
          Backbone.history.loadUrl(`comp/badge/concede/${ids.join(',')}`);
          if (App.masterElegivelCert()) {
            App.main.once('show', function() {
              return App.appRouter.navigate("comp/home/elegivel-certificacao", {
                trigger: true
              });
            });
          }
        }
        // console.log badgesConcedidos
        return badgesConcedidos;
      }

    };

    ProgressoManager.prototype['model'] = RespostaModel;

    ProgressoManager.prototype['url'] = '';

    ProgressoManager.prototype.conta = 0;

    ProgressoManager.prototype.geral = {};

    ProgressoManager.prototype.CONTABADGE = 0;

    return ProgressoManager;

  }).call(this);
});
