// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../models/Resposta', '../models/Badge', '../collections/Badges'], function(RespostaModel, BadgeModel, BadgesColl) {
  var ProgressoManager;
  return ProgressoManager = (function(_super) {
    __extends(ProgressoManager, _super);

    function ProgressoManager() {
      return ProgressoManager.__super__.constructor.apply(this, arguments);
    }

    ProgressoManager.prototype['model'] = RespostaModel;

    ProgressoManager.prototype['url'] = '';

    ProgressoManager.prototype['create'] = function(resposta) {
      var res;
      res = this.add(resposta);
      this.geral = this.calculaProgressoGeral();
      if (!App.user) {
        return;
      }
      if (!this.badgesConcedidos) {
        this.badgesConcedidos = new BadgesColl;
      }
      this.badgesConcedidos.reset(this.temNovosBadges().models);
      this.saveLocal();
      return this.saveServer(res);
    };

    ProgressoManager.prototype.saveLocal = function() {
      var local, user;
      if (!App.local) {
        return;
      }
      local = App.local, user = App.user;
      if (this.length > 0) {
        return local.set("respostas-" + user.cpf, this.toJSON());
      } else {
        throw new Error;
      }
    };

    ProgressoManager.prototype.saveServer = function(res) {
      if (!App.socket) {
        return;
      }
      return App.socket.emit("respondeu", res.toJSON(), function(data) {
        console.log("emit respondeu res  -> ", res.toJSON());
        console.log("emit respondeu data -> ", data);
        if (data.modulo === "63758ed55ebc0215731f6c36") {
          return App.execute('dashboard.calcProgresso', function(percent) {
            return console.log('novo progresso = ' + percent + '%');
          });
        }
      });
    };

    ProgressoManager.prototype['initialize'] = function(options) {
      this.badgesConcedidos = new BadgesColl;
      this.badges = new BadgesColl(App.badges.toJSON());
      this.bind('add', this.onModelAdded, this);
      this.bind('remove', this.onModelRemoved, this);
      this.bind('change reset', this.onChange, this);
      this.bind('reset', this.onReset, this);
      return null;
    };

    ProgressoManager.prototype['onChange'] = function() {
      var key;
      key = "respostas-" + App.user.cpf;
      if (App.local) {
        App.local.set(key, this.toJSON());
      }
      if (App.progressoLateral) {
        if (App.progressoLateral.currentView) {
          return App.progressoLateral.currentView.render();
        }
      }
    };

    ProgressoManager.prototype['onReset'] = function() {
      this.geral = this.calculaProgressoGeral();
      return this.badgesConcedidos = this.temNovosBadges(true);
    };

    ProgressoManager.prototype['setUser'] = function(user) {
      this.user = new Backbone.Model(user);
      this.badgesConcedidos = new BadgesColl(this.temNovosBadges(true).models);
      this.atividades = this.getAllAtividades();
      this.casos = this.getAllCasosByNucleo();
      return this.testes = this.getAllTestesByNucleo();
    };

    ProgressoManager.prototype['getByAtividadeId'] = function(id) {
      return _.sortBy(this.where({
        atividade: id
      }), 'seqid');
    };

    ProgressoManager.prototype['onModelAdded'] = function(model, collection, options) {
      if (this.user) {
        model.set('user', this.user.get('cpf'));
      }
      return model.set('modulo', window.modulo._id);
    };

    ProgressoManager.prototype['onModelRemoved'] = function(model, collection, options) {
      if (App.socket && App.socket.connected) {
        App.socket.emit("reiniciou", model.toJSON());
      }
      this.geral = this.calculaProgressoGeral();
      return this.badgesConcedidos.reset(this.temNovosBadges(true).models);
    };

    ProgressoManager.prototype.conta = 0;

    ProgressoManager.prototype.calculaProgressoGeral = function(callback) {
      var ativConcluida, ativEhDoNucleo, atividade, atividadesPorUnidade, escore, geral, initialUnit, key, numAtiv, numAtivConcluido, numAtivConcluidos, numCasos, numCasosConcluidos, numCasosConcluidosNucleo, numCasosConcluidosNucleoEnfermagem, numCasosConcluidosNucleoInterdisciplinar, numCasosConcluidosNucleoMedicina, numCasosConcluidosNucleoOdontologia, numCasosIniciados, numCasosNucleo, numCasosNucleoEnfermagem, numCasosNucleoInterdisciplinar, numCasosNucleoMedicina, numCasosNucleoOdontologia, numCasosUnidade, numQuestoes, numQuestoesCaso, numQuestoesCasoRespondidas, numQuestoesTeste, numQuestoesTesteNucleoEnfermagem, numQuestoesTesteNucleoInterdisciplinar, numQuestoesTesteNucleoMedicina, numQuestoesTesteNucleoOdontologia, numQuestoesTesteRespondidas, numQuestoesTesteRespondidasNucleoEnfermagem, numQuestoesTesteRespondidasNucleoInterdisciplinar, numQuestoesTesteRespondidasNucleoMedicina, numQuestoesTesteRespondidasNucleoOdontologia, numQuestoesTesteUnidade, numTestes, numTestesConcluidos, numTestesConcluidosNucleo, numTestesConcluidosNucleoEnfermagem, numTestesConcluidosNucleoInterdisciplinar, numTestesConcluidosNucleoMedicina, numTestesConcluidosNucleoOdontologia, numTestesIniciados, percAcertoPosTeste, percAcertoPosTesteEnfermagem, percAcertoPosTesteInterdisciplinar, percAcertoPosTesteMedicina, percAcertoPosTesteOdontologia, percAcertoPreTeste, percAcertoPreTesteEnfermagem, percAcertoPreTesteInterdisciplinar, percAcertoPreTesteMedicina, percAcertoPreTesteOdontologia, percAcertoTestesNucleo, percAcertoTestesNucleoEnfermagem, percAcertoTestesNucleoInterdisciplinar, percAcertoTestesNucleoMedicina, percAcertoTestesNucleoOdontologia, percAtivConcluTotal, percAtivQuestRespTotal, percAtivQuestTotal, percAtivTotal, percCasosConcluNucleo, percCasosConcluNucleoEnfermagem, percCasosConcluNucleoInterdisciplinar, percCasosConcluNucleoMedicina, percCasosConcluNucleoOdontologia, percCasosConcluTotal, percCasosRespTotal, percCasosTotal, percGeralAcertoCasos, percGeralAcertoCasosNucleo, percGeralAcertoCasosNucleoEnfermagem, percGeralAcertoCasosNucleoInterdisciplinar, percGeralAcertoCasosNucleoMedicina, percGeralAcertoCasosNucleoOdontologia, percGeralAcertoTestes, percPosTesteUnidade, percTestesConcluTotal, percTestesRespTotal, percTestesTotal, porAtividade, posTeste, posTesteEnfermagem, posTesteInterdisciplinar, posTesteMedicina, posTesteOdontologia, posTesteUnidade, preTeste, preTesteEnfermagem, preTesteInterdisciplinar, preTesteMedicina, preTesteOdontologia, preTesteUnidade, profissional, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade, self, u, unidade, unidades, _i, _id, _j, _k, _len, _len1, _len2;
      self = this;
      if (!this.elegivel) {
        this.elegivel = {
          medicina: "",
          enfermagem: "",
          odontologia: "",
          interdisciplinar: ''
        };
      } else {
        if (!this.elegivel.medicina) {
          this.elegivel.medicina = "";
        }
        if (!this.elegivel.enfermagem) {
          this.elegivel.enfermagem = "";
        }
        if (!this.elegivel.odontologia) {
          this.elegivel.odontologia = "";
        }
        if (!this.elegivel.interdisciplinar) {
          this.elegivel.interdisciplinar = "";
        }
      }
      profissional = self.user.get('profissional');
      if (!this.models) {
        return false;
      }
      respostasPorAtividade = _.groupBy(this.models, function(item) {
        return item.get('atividade');
      });
      atividadesPorUnidade = _.groupBy(this.getAllAtividades(), function(item) {
        return item.unidade;
      });
      unidades = _.where(window.modulo.components, {
        folder: 'unidade-progresso'
      }).map(function(c) {
        return c.unidade;
      });
      unidades = unidades.filter(function(u) {
        if (u) {
          return true;
        } else {
          return false;
        }
      });
      initialUnit = [];
      for (_i = 0, _len = unidades.length; _i < _len; _i++) {
        u = unidades[_i];
        initialUnit.push({});
      }
      unidade = {};
      preTesteUnidade = posTesteUnidade = percPosTesteUnidade = numTestesConcluidos = numCasosUnidade = numCasosIniciados = percGeralAcertoCasos = numCasosConcluidos = numTestesIniciados = numQuestoesTesteUnidade = numQuestoesTesteRespondidas = {};
      for (_j = 0, _len1 = unidades.length; _j < _len1; _j++) {
        u = unidades[_j];
        unidade[u] = {
          preTesteUnidade: false,
          posTesteUnidade: false,
          numCasosConcluidos: 0.0,
          percPosTesteUnidade: 0.0,
          numCasosIniciados: 0.0,
          numTestesIniciados: 0.0,
          numTestesConcluidos: 0.0,
          numQuestoesTesteRespondidas: 0.0,
          numQuestoesTesteUnidade: 0.0,
          percGeralAcertoCasos: 0.0,
          percAcertoTestes: 0.0,
          percCasosConcluUnidade: 0.0,
          percAcertoPreTeste: 0.0,
          percAcertoPosTeste: 0.0
        };
      }
      posTeste = preTeste = false;
      posTesteEnfermagem = preTesteEnfermagem = false;
      posTesteMedicina = preTesteMedicina = false;
      posTesteOdontologia = preTesteOdontologia = false;
      posTesteInterdisciplinar = preTesteInterdisciplinar = false;
      percTestesTotal = percCasosRespTotal = percTestesRespTotal = percAtivQuestTotal = percAcertoPosTeste = percAcertoPreTeste = 0.0;
      numCasosIniciados = numTestes = numAtiv = numQuestoesCasoRespondidas = numQuestoesTesteRespondidas = numTestesConcluidos = 0.0;
      numQuestoesCaso = numQuestoes = numQuestoesTeste = numAtivConcluido = numCasos = numCasosNucleo = numTestesIniciados = percCasosTotal = 0.0;
      numTestesConcluidosNucleo = numCasosConcluidos = numCasosConcluidosNucleo = percGeralAcertoCasos = percGeralAcertoCasosNucleo = percGeralAcertoTestes = percAtivTotal = 0.0;
      percAcertoTestesNucleoEnfermagem = percAcertoTestesNucleoMedicina = percAcertoTestesNucleoOdontologia = percGeralAcertoCasosNucleoEnfermagem = percGeralAcertoCasosNucleoMedicina = percGeralAcertoCasosNucleoOdontologia = percGeralAcertoCasosNucleoInterdisciplinar = 0.0;
      percCasosConcluNucleoEnfermagem = percCasosConcluNucleoMedicina = percCasosConcluNucleoOdontologia = percCasosConcluNucleoInterdisciplinar = 0.0;
      numCasosConcluidosNucleoEnfermagem = numCasosConcluidosNucleoMedicina = numCasosConcluidosNucleoOdontologia = numCasosConcluidosNucleoInterdisciplinar = 0.0;
      numCasosNucleoEnfermagem = numCasosNucleoMedicina = numCasosNucleoOdontologia = numCasosNucleoInterdisciplinar = 0.0;
      numTestesConcluidosNucleoEnfermagem = numTestesConcluidosNucleoMedicina = numTestesConcluidosNucleoOdontologia = numTestesConcluidosNucleoInterdisciplinar = 0.0;
      numQuestoesTesteRespondidasNucleoEnfermagem = numQuestoesTesteRespondidasNucleoMedicina = numQuestoesTesteRespondidasNucleoOdontologia = numQuestoesTesteRespondidasNucleoInterdisciplinar = 0.0;
      numQuestoesTesteNucleoEnfermagem = numQuestoesTesteNucleoMedicina = numQuestoesTesteNucleoOdontologia = numQuestoesTesteNucleoInterdisciplinar = 0.0;
      percAcertoPosTesteEnfermagem = percAcertoPosTesteMedicina = percAcertoPosTesteOdontologia = percAcertoPosTesteInterdisciplinar = 0.0;
      percAcertoPreTesteEnfermagem = percAcertoPreTesteMedicina = percAcertoPreTesteOdontologia = percAcertoPreTesteInterdisciplinar = 0.0;
      for (_id in respostasPorAtividade) {
        respostasDaAtividade = respostasPorAtividade[_id];
        atividade = _.findWhere(this.atividades, {
          _id: _id
        });
        if (!atividade) {
          continue;
        }
        questoesDaAtividade = atividade.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        escore = 0.0;
        for (key = _k = 0, _len2 = respostasDaAtividade.length; _k < _len2; key = ++_k) {
          respAtiv = respostasDaAtividade[key];
          escore += respAtiv.get('escore');
        }
        if (respostasDaAtividade.length > 0) {
          escore = escore / respostasDaAtividade.length;
        } else {
          escore = 0;
        }
        ativConcluida = questoesDaAtividade.length <= respostasDaAtividade.length && escore >= 70.00;
        ativEhDoNucleo = this.ehDoNucleo(atividade, profissional);
        switch (atividade.tipo) {
          case 'saibamais':
            numCasosIniciados++;
            if (atividade.unidade) {
              unidade[atividade.unidade].numCasosIniciados++;
            }
            if (ativConcluida) {
              numQuestoesCasoRespondidas += respostasDaAtividade.length;
              percGeralAcertoCasos += escore;
              numCasosConcluidos++;
              if (ativEhDoNucleo) {
                percGeralAcertoCasosNucleo += escore;
                numCasosConcluidosNucleo++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                percGeralAcertoCasosNucleoEnfermagem += escore;
                numCasosConcluidosNucleoEnfermagem++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                percGeralAcertoCasosNucleoMedicina += escore;
                numCasosConcluidosNucleoMedicina++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                percGeralAcertoCasosNucleoOdontologia += escore;
                numCasosConcluidosNucleoOdontologia++;
              }
              if (atividade.unidade) {
                unidade[atividade.unidade].percGeralAcertoCasos += escore;
                unidade[atividade.unidade].numCasosConcluidos++;
              }
            }
            break;
          case 'caso':
            numCasosIniciados++;
            if (atividade.unidade) {
              unidade[atividade.unidade].numCasosIniciados++;
            }
            if (ativConcluida) {
              numQuestoesCasoRespondidas += respostasDaAtividade.length;
              percGeralAcertoCasos += escore;
              numCasosConcluidos++;
              if (ativEhDoNucleo) {
                percGeralAcertoCasosNucleo += escore;
                numCasosConcluidosNucleo++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                percGeralAcertoCasosNucleoEnfermagem += escore;
                numCasosConcluidosNucleoEnfermagem++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                percGeralAcertoCasosNucleoMedicina += escore;
                numCasosConcluidosNucleoMedicina++;
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                percGeralAcertoCasosNucleoOdontologia += escore;
                numCasosConcluidosNucleoOdontologia++;
              }
              if (atividade.unidade) {
                unidade[atividade.unidade].percGeralAcertoCasos += escore;
                unidade[atividade.unidade].numCasosConcluidos++;
              }
            }
            break;
          case 'teste':
            numTestesIniciados++;
            numQuestoesTesteNucleoInterdisciplinar += respostasDaAtividade.length;
            if (self.ehDoNucleoByNucleo(atividade, 1)) {
              numQuestoesTesteNucleoEnfermagem += questoesDaAtividade.length;
              numQuestoesTesteRespondidasNucleoEnfermagem += respostasDaAtividade.length;
            }
            if (self.ehDoNucleoByNucleo(atividade, 2)) {
              numQuestoesTesteNucleoMedicina += questoesDaAtividade.length;
              numQuestoesTesteRespondidasNucleoMedicina += respostasDaAtividade.length;
            }
            if (self.ehDoNucleoByNucleo(atividade, 3)) {
              numQuestoesTesteNucleoOdontologia += questoesDaAtividade.length;
              numQuestoesTesteRespondidasNucleoOdontologia += respostasDaAtividade.length;
            }
            if (atividade.unidade) {
              console.log(atividade, unidade);
              unidade[atividade.unidade].numTestesIniciados++;
              unidade[atividade.unidade].numQuestoesTesteUnidade += questoesDaAtividade.length;
              unidade[atividade.unidade].numQuestoesTesteRespondidas += respostasDaAtividade.length;
            }
            if (ativConcluida) {
              numTestesConcluidos++;
              numTestesConcluidosNucleoInterdisciplinar++;
            }
            percGeralAcertoTestes += escore;
            numQuestoesTesteRespondidas += respostasDaAtividade.length;
            numQuestoesTesteRespondidasNucleoInterdisciplinar += respostasDaAtividade.length;
            if (ativEhDoNucleo) {
              percAcertoTestesNucleo = escore;
              numTestesConcluidosNucleo++;
              if (atividade.posTeste) {
                percAcertoPosTeste = escore;
                if (ativConcluida) {
                  posTeste = true;
                  posTesteInterdisciplinar = true;
                }
              } else {
                percAcertoPreTeste = escore;
                if (ativConcluida) {
                  preTeste = true;
                  preTesteInterdisciplinar = true;
                }
              }
            }
            if (atividade.posTeste) {
              percAcertoPosTesteInterdisciplinar = escore;
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                percAcertoPosTesteEnfermagem = escore;
                if (ativConcluida) {
                  posTesteEnfermagem = true;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                percAcertoPosTesteMedicina = escore;
                if (ativConcluida) {
                  posTesteMedicina = true;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                percAcertoPosTesteOdontologia = escore;
                if (ativConcluida) {
                  posTesteOdontologia = true;
                }
              }
              if (atividade.unidade) {
                unidade[atividade.unidade].percAcertoPosTeste = escore;
                if (ativConcluida) {
                  unidade[atividade.unidade].posTesteUnidade = true;
                  unidade[atividade.unidade].numTestesConcluidos++;
                }
              }
            } else {
              percAcertoPreTesteInterdisciplinar = escore;
              if (self.ehDoNucleoByNucleo(atividade, 1)) {
                percAcertoPreTesteEnfermagem = escore;
                if (ativConcluida) {
                  preTesteEnfermagem = true;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 2)) {
                percAcertoPreTesteMedicina = escore;
                if (ativConcluida) {
                  preTesteMedicina = true;
                }
              }
              if (self.ehDoNucleoByNucleo(atividade, 3)) {
                percAcertoPreTesteOdontologia = escore;
                if (ativConcluida) {
                  preTesteOdontologia = true;
                }
              }
              if (atividade.unidade) {
                unidade[atividade.unidade].percAcertoPreTeste = escore;
                if (ativConcluida) {
                  unidade[atividade.unidade].preTeste = true;
                }
              }
            }
            if (self.ehDoNucleoByNucleo(atividade, 1)) {
              percAcertoTestesNucleoEnfermagem += escore;
              if (ativConcluida) {
                numTestesConcluidosNucleoEnfermagem++;
              }
            }
            if (self.ehDoNucleoByNucleo(atividade, 2)) {
              percAcertoTestesNucleoMedicina += escore;
              if (ativConcluida) {
                numTestesConcluidosNucleoMedicina++;
              }
            }
            if (self.ehDoNucleoByNucleo(atividade, 3)) {
              percAcertoTestesNucleoOdontologia += escore;
              if (ativConcluida) {
                numTestesConcluidosNucleoOdontologia++;
              }
            }
            if (atividade.unidade) {
              unidade[atividade.unidade].percAcertoTestes += escore;
              if (ativConcluida) {
                unidade[atividade.unidade].numTestesConcluidos++;
                unidade[atividade.unidade].numTestesConcluidos++;
              }
            }
        }
        if (ativConcluida) {
          numAtivConcluido++;
        }
      }
      numAtiv = (this.getAllAtividades()).length;
      numCasos = (this.getAllCasosByNucleo()).length;
      numCasosNucleo = (this.getAllCasosByNucleo(profissional)).length;
      numCasosNucleoEnfermagem = (this.getAllCasosByNucleo()).filter(function(c) {
        return self.ehDoNucleoByNucleo(c, 1);
      }).length;
      numCasosNucleoMedicina = (this.getAllCasosByNucleo()).filter(function(c) {
        return self.ehDoNucleoByNucleo(c, 2);
      }).length;
      numCasosNucleoOdontologia = (this.getAllCasosByNucleo()).filter(function(c) {
        return self.ehDoNucleoByNucleo(c, 3);
      }).length;
      unidades.forEach(function(u) {
        var uni;
        uni = atividadesPorUnidade[u];
        if (!uni) {
          return;
        }
        return unidade[u].numCasosUnidade = uni.filter(function(c) {
          return c.tipo === 'caso' || c.tipo === 'saibamais';
        }).length;
      });
      numTestes = (this.getAllTestesByNucleo()).length;
      numQuestoesTeste = (this.getQuestAllTestes()).length;
      numQuestoesCaso = (this.getQuestAllCasos()).length;
      numQuestoes = numQuestoesCaso + numQuestoesTeste;
      numAtivConcluidos = numTestesConcluidos + numCasosConcluidos;
      percCasosConcluTotal = this.calcPercentagem(numCasosConcluidos, numCasos);
      percCasosConcluNucleo = this.calcPercentagem(numCasosConcluidosNucleo, numCasosNucleo);
      percCasosConcluNucleoEnfermagem = this.calcPercentagem(numCasosConcluidosNucleoEnfermagem, numCasosNucleoEnfermagem);
      percCasosConcluNucleoMedicina = this.calcPercentagem(numCasosConcluidosNucleoMedicina, numCasosNucleoMedicina);
      percCasosConcluNucleoOdontologia = this.calcPercentagem(numCasosConcluidosNucleoOdontologia, numCasosNucleoOdontologia);
      percCasosConcluNucleoInterdisciplinar = this.calcPercentagem(numCasosConcluidos, numCasos);
      self = this;
      percCasosRespTotal = this.calcPercentagem(numQuestoesCasoRespondidas, numQuestoesCaso);
      percTestesConcluTotal = this.calcPercentagem(numTestesConcluidos, numTestes);
      percTestesRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas, numQuestoesTeste);
      percAtivConcluTotal = this.calcPercentagem(numAtivConcluidos, numAtiv);
      percAtivQuestRespTotal = this.calcPercentagem(numQuestoesTesteRespondidas + numQuestoesCasoRespondidas, numQuestoesTeste + numQuestoesCaso);
      if (numCasosConcluidosNucleo > 0) {
        percGeralAcertoCasosNucleo = percGeralAcertoCasosNucleo / numCasosConcluidosNucleo;
      }
      if (numCasosConcluidosNucleoEnfermagem > 0) {
        percGeralAcertoCasosNucleoEnfermagem = percGeralAcertoCasosNucleoEnfermagem / numCasosConcluidosNucleoEnfermagem;
      }
      if (numCasosConcluidosNucleoMedicina > 0) {
        percGeralAcertoCasosNucleoMedicina = percGeralAcertoCasosNucleoMedicina / numCasosConcluidosNucleoMedicina;
      }
      if (numCasosConcluidosNucleoOdontologia > 0) {
        percGeralAcertoCasosNucleoOdontologia = percGeralAcertoCasosNucleoOdontologia / numCasosConcluidosNucleoOdontologia;
      }
      if (numCasosConcluidos > 0) {
        percGeralAcertoCasosNucleoInterdisciplinar = percGeralAcertoCasos / numCasosConcluidos;
      }
      if (numTestesConcluidos > 0) {
        percGeralAcertoTestes = percGeralAcertoTestes / numTestesConcluidos;
      }
      if (numTestesConcluidosNucleo > 0) {
        percAcertoTestesNucleo = percAcertoTestesNucleo / numTestesConcluidosNucleo;
      }
      if (numTestesConcluidosNucleoEnfermagem > 0) {
        percAcertoTestesNucleoEnfermagem = percAcertoTestesNucleoEnfermagem / numTestesConcluidosNucleoEnfermagem;
      }
      if (numTestesConcluidosNucleoMedicina > 0) {
        percAcertoTestesNucleoMedicina = percAcertoTestesNucleoMedicina / numTestesConcluidosNucleoMedicina;
      }
      if (numTestesConcluidosNucleoOdontologia > 0) {
        percAcertoTestesNucleoOdontologia = percAcertoTestesNucleoOdontologia / numTestesConcluidosNucleoOdontologia;
      }
      percAcertoTestesNucleoInterdisciplinar = percGeralAcertoTestes;
      if (numCasosConcluidos > 0) {
        percGeralAcertoCasos = percGeralAcertoCasos / numCasosConcluidos;
      }
      porAtividade = this.getProgressoPorAtividades();
      preTesteInterdisciplinar = preTeste;
      geral = {
        percCasosRespTotal: percCasosRespTotal,
        percCasosConcluTotal: percCasosConcluTotal,
        percTestesConcluTotal: percTestesConcluTotal,
        percTestesRespTotal: percTestesRespTotal,
        percAtivConcluTotal: percAtivConcluTotal,
        percAtivQuestRespTotal: percAtivQuestRespTotal,
        numQuestoesTeste: numQuestoesTeste,
        numAtivConcluido: numAtivConcluido,
        numCasos: numCasos,
        numTestes: numTestes,
        numQuestoesTesteRespondidasNucleoEnfermagem: numQuestoesTesteRespondidasNucleoEnfermagem,
        numQuestoesTesteRespondidasNucleoMedicina: numQuestoesTesteRespondidasNucleoMedicina,
        numQuestoesTesteRespondidasNucleoOdontologia: numQuestoesTesteRespondidasNucleoOdontologia,
        numQuestoesTesteRespondidasNucleoInterdisciplinar: numQuestoesTesteRespondidasNucleoInterdisciplinar,
        numQuestoesTesteNucleoEnfermagem: numQuestoesTesteNucleoEnfermagem,
        numQuestoesTesteNucleoMedicina: numQuestoesTesteNucleoMedicina,
        numQuestoesTesteNucleoOdontologia: numQuestoesTesteNucleoOdontologia,
        numQuestoesTesteNucleoInterdisciplinar: numQuestoesTesteNucleoInterdisciplinar,
        percAcertoPosTeste: percAcertoPosTeste,
        percAcertoPreTeste: percAcertoPreTeste,
        percAcertoPosTesteEnfermagem: percAcertoPosTesteEnfermagem,
        percAcertoPreTesteEnfermagem: percAcertoPreTesteEnfermagem,
        percAcertoPosTesteMedicina: percAcertoPosTesteMedicina,
        percAcertoPreTesteMedicina: percAcertoPreTesteMedicina,
        percAcertoPosTesteOdontologia: percAcertoPosTesteOdontologia,
        percAcertoPreTesteOdontologia: percAcertoPreTesteOdontologia,
        percAcertoPosTesteInterdisciplinar: percAcertoPosTesteInterdisciplinar,
        percAcertoPreTesteInterdisciplinar: percAcertoPreTesteInterdisciplinar,
        posTeste: posTeste,
        preTeste: preTeste,
        posTesteEnfermagem: posTesteEnfermagem,
        preTesteEnfermagem: preTesteEnfermagem,
        posTesteMedicina: posTesteMedicina,
        preTesteMedicina: preTesteMedicina,
        posTesteOdontologia: posTesteOdontologia,
        preTesteOdontologia: preTesteOdontologia,
        posTesteInterdisciplinar: posTesteInterdisciplinar,
        preTesteInterdisciplinar: preTesteInterdisciplinar,
        percGeralAcertoTestes: percGeralAcertoTestes,
        percAcertoTestesNucleoEnfermagem: percAcertoTestesNucleoEnfermagem,
        percAcertoTestesNucleoMedicina: percAcertoTestesNucleoMedicina,
        percAcertoTestesNucleoOdontologia: percAcertoTestesNucleoOdontologia,
        percAcertoTestesNucleoInterdisciplinar: percAcertoTestesNucleoInterdisciplinar,
        percGeralAcertoCasosNucleoEnfermagem: percGeralAcertoCasosNucleoEnfermagem,
        percGeralAcertoCasosNucleoMedicina: percGeralAcertoCasosNucleoMedicina,
        percGeralAcertoCasosNucleoOdontologia: percGeralAcertoCasosNucleoOdontologia,
        percGeralAcertoCasosNucleoInterdisciplinar: percGeralAcertoCasosNucleoInterdisciplinar,
        percCasosConcluNucleoEnfermagem: percCasosConcluNucleoEnfermagem,
        percCasosConcluNucleoMedicina: percCasosConcluNucleoMedicina,
        percCasosConcluNucleoOdontologia: percCasosConcluNucleoOdontologia,
        percCasosConcluNucleoInterdisciplinar: percCasosConcluNucleoInterdisciplinar,
        numQuestoesCaso: numQuestoesCaso,
        numTestesIniciados: numTestesIniciados,
        numCasosIniciados: numCasosIniciados,
        numTestesConcluidos: numTestesConcluidos,
        numQuestoesCasoRespondidas: numQuestoesCasoRespondidas,
        numQuestoesCaso: numQuestoesCaso,
        numQuestoesTesteRespondidas: numQuestoesTesteRespondidas,
        numTestesConcluidosNucleo: numTestesConcluidosNucleo,
        numAtiv: numAtiv,
        numCasosConcluidos: numCasosConcluidos,
        numQuestoes: numQuestoes,
        percCasosConcluNucleo: percCasosConcluNucleo,
        numCasosConcluidosNucleo: numCasosConcluidosNucleo,
        percGeralAcertoCasosNucleo: percGeralAcertoCasosNucleo,
        numCasosNucleo: numCasosNucleo,
        percGeralAcertoCasos: percGeralAcertoCasos,
        porAtividade: porAtividade,
        unidade: unidade
      };
      if (unidades.length > 0) {
        unidades.forEach(function(u) {
          return geral.unidade[u] = {
            numCasosUnidade: unidade[u].numCasosUnidade,
            numCasosConcluidos: unidade[u].numCasosConcluidos ? unidade[u].numCasosConcluidos : 0,
            numCasosIniciados: unidade[u].numCasosIniciados ? unidade[u].numCasosIniciados : 0,
            numTestesIniciados: unidade[u].numTestesIniciados ? unidade[u].numTestesIniciados : 0,
            posTesteUnidade: unidade[u].posTesteUnidade ? unidade[u].posTesteUnidade : false,
            preTesteUnidade: unidade[u].preTesteUnidade ? unidade[u].preTesteUnidade : false,
            numTestesConcluidos: unidade[u].numTestesConcluidos ? unidade[u].numTestesConcluidos : 0,
            numQuestoesTesteRespondidas: unidade[u].numQuestoesTesteRespondidas ? unidade[u].numQuestoesTesteRespondidas : 0,
            numQuestoesTesteUnidade: unidade[u].numQuestoesTesteUnidade ? unidade[u].numQuestoesTesteUnidade : 0,
            percCasosConclu: self.calcPercentagem(unidade[u].numCasosConcluidos, unidade[u].numCasosUnidade),
            percGeralAcertoCasos: self.calcPercentagem(unidade[u].percGeralAcertoCasos, unidade[u].numCasosConcluidos),
            percAcertoTestes: unidade[u].percAcertoTestes > 0 ? unidade[u].percAcertoTestes / unidade[u].numTestesConcluidos : 0.0,
            percAcertoPreTeste: unidade[u].percAcertoPreTeste ? unidade[u].percAcertoPreTeste : 0,
            percAcertoPosTeste: unidade[u].percAcertoPosTeste ? unidade[u].percAcertoPosTeste : 0
          };
        });
      }
      this.geral = geral;
      if (callback) {
        callback();
      }
      return geral;
    };

    ProgressoManager.prototype.calcPercentagem = function(vparcial, vtotal) {
      var perc;
      if (vparcial === 0) {
        return 0.0;
      }
      return perc = parseFloat(100 * vparcial) / vtotal;
    };

    ProgressoManager.prototype.getAllAtividades = function() {
      return App.atividades.toJSON();
    };

    ProgressoManager.prototype.getAllCasosByNucleo = function(nuc) {
      var self;
      if (!nuc) {
        return App.casos.toJSON();
      }
      self = this;
      nuc = self.user.get('profissional');
      return App.casos.toJSON().filter(function(atividade) {
        return self.ehDoNucleo(atividade, nuc);
      });
    };

    ProgressoManager.prototype.ehDoNucleo = function(atividade, nuc) {
      var self;
      self = this;
      nuc = parseInt(nuc);
      if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
        return true;
      }
      if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
        return true;
      }
      if (atividade.pro[2] && (nuc === '3' || nuc === 3)) {
        return true;
      }
      if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
        return true;
      }
      return false;
    };

    ProgressoManager.prototype.ehDoNucleoByNucleo = function(atividade, nuc) {
      var self;
      self = this;
      if (atividade.pro[0] && (nuc === '2' || nuc === 2)) {
        return true;
      }
      if (atividade.pro[1] && (nuc === '1' || nuc === 1)) {
        return true;
      }
      if (atividade.pro[2] && (nuc === '3' || nuc === 3)) {
        return true;
      }
      if (nuc === '0' || nuc === 0 || nuc === '-1' || nuc === -1) {
        return true;
      }
      return false;
    };

    ProgressoManager.prototype.getQuestAllCasos = function() {
      var casos, key, questUmcaso, questsCasos, val, _i, _len;
      casos = this.getAllCasosByNucleo();
      questsCasos = [];
      for (key = _i = 0, _len = casos.length; _i < _len; key = ++_i) {
        val = casos[key];
        questUmcaso = val.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        questsCasos = questsCasos.concat(questUmcaso);
      }
      return questsCasos;
    };

    ProgressoManager.prototype.getAllTestesByNucleo = function(nuc) {
      var self;
      self = this;
      if (!nuc) {
        return App.testes.toJSON();
      }
      return App.testes.toJSON().filter(function(atividade) {
        return self.ehDoNucleo(atividade);
      });
    };

    ProgressoManager.prototype.getQuestAllTestes = function(nuc) {
      var Tests, key, questUmcaso, questsTests, val, _i, _len;
      Tests = this.getAllTestesByNucleo(nuc);
      questsTests = [];
      for (key = _i = 0, _len = Tests.length; _i < _len; key = ++_i) {
        val = Tests[key];
        questUmcaso = val.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        questsTests = questsTests.concat(questUmcaso);
      }
      return questsTests;
    };

    ProgressoManager.prototype.getPercAtivTotal = function(numAtivConcluidos, numAtiv) {
      if (numAtivConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numAtivConcluidos) / numAtiv;
    };

    ProgressoManager.prototype.getPercCasosTotal = function(numCasosConcluidos, numCasos) {
      if (numCasosConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numCasosConcluidos) / numCasos;
    };

    ProgressoManager.prototype.getPercTestesTotal = function(numTestesConcluidos, numTeste) {
      if (numTestesConcluidos === 0) {
        return 0.0;
      }
      return parseFloat(100 * numTestesConcluidos) / numTeste;
    };

    ProgressoManager.prototype.getProgressoPorAtividades = function() {
      var ativConcluida, atividade, escore, key, numQuestoesRespondidas, numQuestoesTotais, percConclusao, porAtiv, questoesDaAtividade, respAtiv, respostasDaAtividade, respostasPorAtividade, _i, _id, _len;
      respostasPorAtividade = _.groupBy(this.models, function(item) {
        return item.get('atividade');
      });
      porAtiv = {};
      for (_id in respostasPorAtividade) {
        respostasDaAtividade = respostasPorAtividade[_id];
        atividade = _.findWhere(this.atividades, {
          _id: _id
        });
        if (!atividade) {
          continue;
        }
        questoesDaAtividade = atividade.slides.filter(function(slide) {
          return /quest/img.test(slide.tipo);
        });
        escore = 0.0;
        for (key = _i = 0, _len = respostasDaAtividade.length; _i < _len; key = ++_i) {
          respAtiv = respostasDaAtividade[key];
          escore += respAtiv.get('escore');
        }
        escore = escore / respostasDaAtividade.length;
        ativConcluida = questoesDaAtividade.length === respostasDaAtividade.length;
        numQuestoesRespondidas = respostasDaAtividade.length;
        numQuestoesTotais = questoesDaAtividade.length;
        percConclusao = this.calcPercentagem(numQuestoesRespondidas, numQuestoesTotais);
        porAtiv[_id] = {
          escore: escore,
          ativConcluida: ativConcluida,
          numQuestoesTotais: numQuestoesTotais,
          tipo: atividade.tipo,
          numQuestoesRespondidas: numQuestoesRespondidas,
          percConclusao: percConclusao
        };
      }
      return this.geral.porAtividade = porAtiv;
    };

    ProgressoManager.prototype.geral = {};

    ProgressoManager.prototype.CONTABADGE = 0;

    ProgressoManager.prototype.temNovosBadges = function(silent) {
      var aConceder, bad, badgesConcedidos, ids, self, _i, _len, _ref;
      if (silent == null) {
        silent = false;
      }
      self = this;
      badgesConcedidos = new BadgesColl();
      if (!silent) {
        badgesConcedidos = this.badgesConcedidos;
      }
      aConceder = new BadgesColl();
      this.badges.each(function(badge) {
        var asQueTem, ativ, foiDado, idAtividade, novoBadge, pool, rules, _ref, _results;
        if (badge.get('idAtiv') === '') {
          _ref = self.geral.porAtividade;
          _results = [];
          for (idAtividade in _ref) {
            ativ = _ref[idAtividade];
            asQueTem = badge.get('rules').filter(function(regra) {
              return regra.test(ativ);
            });
            if (asQueTem.length === badge.get('rules').length) {
              foiDado = badgesConcedidos.where({
                _id: badge.get('_id'),
                idAtiv: idAtividade
              });
              if (foiDado.length === 0) {
                rules = badge.get('rules');
                badge.unset('rules');
                novoBadge = badge.clone();
                badge.set('rules', rules);
                novoBadge.set('idAtiv', idAtividade);
                aConceder.add(novoBadge);
              }
            }
            _results.push(null);
          }
          return _results;
        } else {
          pool = self.geral;
          if (!pool) {
            pool = self.calculaProgressoGeral();
          }
          asQueTem = badge.get('rules').filter(function(regra) {
            return regra.test(pool);
          });
          if (asQueTem.length === badge.get('rules').length) {
            foiDado = badgesConcedidos.where({
              _id: badge.get('_id')
            });
            if (foiDado.length === 0) {
              return aConceder.add(badge);
            }
          }
        }
      });
      _ref = aConceder.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bad = _ref[_i];
        if (bad instanceof BadgeModel) {
          badgesConcedidos.add(bad);
        }
      }
      if (!silent && aConceder.length > 0) {
        ids = aConceder.map(function(badge) {
          return badge.get('_id');
        });
        Backbone.history.loadUrl("comp/badge/concede/" + (ids.join(',')));
        if (App.masterElegivelCert()) {
          App.main.once('show', function() {
            return App.appRouter.navigate("comp/home/elegivel-certificacao", {
              trigger: true
            });
          });
        }
      }
      return badgesConcedidos;
    };

    return ProgressoManager;

  })(Backbone.Collection);
});
