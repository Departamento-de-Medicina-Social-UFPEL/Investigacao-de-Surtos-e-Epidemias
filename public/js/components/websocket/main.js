// Generated by CoffeeScript 2.7.0
define(['socketio'], function(io) {
  return function(component, parentApp, Backbone, Marionette, $, _) {
    var amOnline, opt, setIcon, socket;
    setIcon = function(state = true) {
      var checkConectadoInternet, fn, ico, iconEl, states;
      iconEl = $('.main-net-stats-ico');
      checkConectadoInternet = $('.conexao-internet');
      ico = 'mdi-wifi';
      fn = state ? 'unshift' : 'push';
      if (state) {
        checkConectadoInternet.prop("checked", true);
      } else {
        checkConectadoInternet.prop("checked", false);
      }
      checkConectadoInternet.trigger("change");
      states = [ico];
      states[fn](`${ico}-off`);
      return iconEl.removeClass(states[0]).addClass(states[1]);
    };
    amOnline = function() {
      var iconEl;
      App.execute('retrieveRespostas', function() {
        //console.log "online, tentando sincronizar respostas - App.execute 'retrieveRespostas', ->"
        App.progresso.calculaProgressoGeral();
        return App.progresso.badgesConcedidos.reset(App.progresso.temNovosBadges(true).models);
      });
      if (App.userMenu.currentView) {
        iconEl = $('.main-net-stats-ico');
        setIcon(true);
        return iconEl.attr('title', `Conectado a ${this.io.uri}`);
      }
    };
    opt = {
      'path': '/ws',
      'port': 50000
    };
    socket = io(window.location.host, opt);
    // console.log window.location.host, opt, "============== socketio ================="
    socket.io.engine.on('heartbeat', function() {
      var ico;
      if (App.userMenu.currentView) {
        ico = $('.main-net-stats-ico');
        ico.addClass('glow');
        return setTimeout((function() {
          return ico.removeClass('glow');
        }), 2000);
      }
    });
    socket.on('connect', function() {
      return amOnline.apply(this);
    });
    socket.on('respostas', function(data) {});
    // console.log "socket.on 'respostas', (data)->", data
    socket.on('reconnect', function() {
      // console.log 'reconn'
      return amOnline.apply(this);
    });
    socket.on('reconnect_failed', function() {
      var self;
      self = this;
      return setTimeout((function() {
        return self.io.reconnect();
      }), 60e3);
    });
    socket.on('disconnect', function() {
      var iconEl, now;
      // console.log 'disconn'
      if (App.userMenu.currentView) {
        iconEl = $('.main-net-stats-ico');
        setIcon(false);
        now = new Date();
        return iconEl.attr('title', `Desconectado desde ${now.toLocaleDateString()} ${now.toLocaleTimeString()}`);
      }
    });
    return parentApp.socket = socket;
  };
});
